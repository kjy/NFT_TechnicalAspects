{
	"id": "bc15b2de67d9ed1361bfdf1a9f553cea",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.18",
	"solcLongVersion": "0.8.18+commit.87f61d96",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/ERC-721AWRefund.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\nimport \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\";\nimport \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/IERC721R.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract Web3Builders is ERC721A, Ownable {\n\n    uint256 public constant mintPrice = 1 ether;\n    uint256 public constant maxMintPerUser = 5;\n    uint256 public constant maxMintSupply = 100;\n\n    uint public constant refundPeriod = 3 minutes;\n    uint256 public refundEndTimeStamp;\n\n    address public refundAddress;\n\n\n    \n    // different timestamps per id, NFT\n    mapping(uint256 => uint256) public refundEndTimestamps;\n    // end time per user\n    // uint256 public refundEndTimestamp;\n    // track who has refunded or not\n    mapping(uint256 => bool) public hasRefunded;\n\n    constructor() ERC721A(\"Web3Builders\", \"WE3\") {\n        refundAddress = address(this);\n        refundEndTimeStamp = block.timestamp + refundPeriod;\n    }\n\n    function _baseURI() internal pure override returns (string memory) {\n        return \"ipfs://QmbseRTJWSsLfhsiWwuB2R7EtN93TxfoaMz1S5FXtsFEUB/\";\n    }\n\n    function safeMint(uint256 quantity) public payable {\n        require(msg.value >= mintPrice * quantity, \"Not enough funds.\");\n        require(_numberMinted(msg.sender ) + quantity <= maxMintPerUser, \"Mint Limit\");\n        require(_totalMinted() <= maxMintSupply, \"Supply Exceed. Sold out.\");\n\n        _safeMint(msg.sender, quantity);\n        refundEndTimeStamp = block.timestamp + refundPeriod;\n        for(uint256 i=_currentIndex - quantity; i < _currentIndex; i++) {\n            refundEndTimestamps[i] = refundEndTimeStamp;\n        }\n\n    }\n\n    function refund(uint256 tokenId) external {\n        require(block.timestamp < getRefundDeadline(tokenId), \"Refund Period Expired.\");\n        // verify owner of NFT\n        require(msg.sender == ownerOf(tokenId), \"Not your NFT\");\n        uint256 refundAmount = getRefundAmount(tokenId);\n\n        // transfer ownership of NFT\n        _transfer(msg.sender, refundAddress, tokenId);\n\n        // mark refunded\n        hasRefunded[tokenId] = true;\n\n        // refund the price\n        Address.sendValue(payable(msg.sender), refundAmount);\n    }\n\n    function getRefundDeadline(uint256 tokenId) public view returns(uint256) {\n        if(hasRefunded[tokenId]) {\n            return 0;\n        }\n        return refundEndTimestamps[tokenId];\n    }\n\n    function getRefundAmount(uint256 tokenId) public view returns(uint256) {\n        if(hasRefunded[tokenId]) {\n            return 0;\n        }\n        return mintPrice;\n    }\n\n    function withdraw() external onlyOwner {\n        require(block.timestamp > refundEndTimeStamp, \"It's not past the refund period\");\n        uint256 balance = address(this).balance;\n        // send value to msg.sender\n        Address.sendValue(payable(msg.sender), balance);\n    }\n}\n\n// Soldiity compiler, Advanced Configurations, Engable optimzation 200 checked, optimize gas fees\n// balanceof, put in 0x5B38Da6a701c568545dCfcB03FcB875f56beddC4,      0: uint256: 2\n// tokenURI, 0,   ipfs://QmbseRTJWSsLfhsiWwuB2R7EtN93TxfoaMz1S5FXtsFEUB/0\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/IERC721R.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// Creator: Exo Digital Labs\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\n/// @notice Refundable EIP-721 tokens\ninterface IERC721R is IERC165, IERC721 {\n    /// @notice           Emitted when a token is refunded\n    /// @dev              Emitted by `refund`\n    /// @param  _sender   The person that requested a refund\n    /// @param  _tokenId  The `tokenId` that was refunded\n    event Refund(\n        address indexed _sender,\n        uint256 indexed _tokenId\n    );\n\n    /// @notice         As long as the refund is active for the given `tokenId`, refunds the user\n    /// @dev            Make sure to check that the user has the token, and be aware of potential re-entrancy vectors\n    /// @param  tokenId The `tokenId` to refund\n    function refund(uint256 tokenId) external;\n\n    /// @notice         Gets the refund price of the specific `tokenId`\n    /// @param  tokenId The `tokenId` to query\n    /// @return _wei    The amount of ether (in wei) that would be refunded\n    function refundOf(uint256 tokenId) external view returns (uint256 _wei);\n \n    /// @notice         Gets the first block for which the refund is not active for a given `tokenId`\n    /// @param  tokenId The `tokenId` to query\n    /// @return _block   The block beyond which the token cannot be refunded\n    function refundDeadlineOf(uint256 tokenId) external view returns (uint256 _block);\n}\n"
			},
			"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// Creator: Chiru Labs\n// Forked to make private methods internal instead\n\npragma solidity ^0.8.4;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\nimport '@openzeppelin/contracts/utils/Address.sol';\nimport '@openzeppelin/contracts/utils/Context.sol';\nimport '@openzeppelin/contracts/utils/Strings.sol';\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\n\nerror ApprovalCallerNotOwnerNorApproved();\nerror ApprovalQueryForNonexistentToken();\nerror ApproveToCaller();\nerror ApprovalToCurrentOwner();\nerror BalanceQueryForZeroAddress();\nerror MintToZeroAddress();\nerror MintZeroQuantity();\nerror OwnerQueryForNonexistentToken();\nerror TransferCallerNotOwnerNorApproved();\nerror TransferFromIncorrectOwner();\nerror TransferToNonERC721ReceiverImplementer();\nerror TransferToZeroAddress();\nerror URIQueryForNonexistentToken();\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension. Built to optimize for lower gas during batch mints.\n *\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\n *\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n *\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\n */\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Compiler will pack this into a single 256bit word.\n    struct TokenOwnership {\n        // The address of the owner.\n        address addr;\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\n        uint64 startTimestamp;\n        // Whether the token has been burned.\n        bool burned;\n    }\n\n    // Compiler will pack this into a single 256bit word.\n    struct AddressData {\n        // Realistically, 2**64-1 is more than enough.\n        uint64 balance;\n        // Keeps track of mint count with minimal overhead for tokenomics.\n        uint64 numberMinted;\n        // Keeps track of burn count with minimal overhead for tokenomics.\n        uint64 numberBurned;\n        // For miscellaneous variable(s) pertaining to the address\n        // (e.g. number of whitelist mint slots used).\n        // If there are multiple variables, please pack them into a uint64.\n        uint64 aux;\n    }\n\n    // The tokenId of the next token to be minted.\n    uint256 internal _currentIndex;\n\n    // The number of tokens burned.\n    uint256 internal _burnCounter;\n\n    // Token name\n    string internal _name;\n\n    // Token symbol\n    string internal _symbol;\n\n    // Mapping from token ID to ownership details\n    // An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\n    mapping(uint256 => TokenOwnership) internal _ownerships;\n\n    // Mapping owner address to address data\n    mapping(address => AddressData) internal _addressData;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) internal _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) internal _operatorApprovals;\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _currentIndex = _startTokenId();\n    }\n\n    /**\n     * To change the starting tokenId, please override this function.\n     */\n    function _startTokenId() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\n     */\n    function totalSupply() public view returns (uint256) {\n        // Counter underflow is impossible as _burnCounter cannot be incremented\n        // more than _currentIndex - _startTokenId() times\n        unchecked {\n            return _currentIndex - _burnCounter - _startTokenId();\n        }\n    }\n\n    /**\n     * Returns the total amount of tokens minted in the contract.\n     */\n    function _totalMinted() internal view returns (uint256) {\n        // Counter underflow is impossible as _currentIndex does not decrement,\n        // and it is initialized to _startTokenId()\n        unchecked {\n            return _currentIndex - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view override returns (uint256) {\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\n        return uint256(_addressData[owner].balance);\n    }\n\n    /**\n     * Returns the number of tokens minted by `owner`.\n     */\n    function _numberMinted(address owner) internal view returns (uint256) {\n        return uint256(_addressData[owner].numberMinted);\n    }\n\n    /**\n     * Returns the number of tokens burned by or on behalf of `owner`.\n     */\n    function _numberBurned(address owner) internal view returns (uint256) {\n        return uint256(_addressData[owner].numberBurned);\n    }\n\n    /**\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\n     */\n    function _getAux(address owner) internal view returns (uint64) {\n        return _addressData[owner].aux;\n    }\n\n    /**\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\n     * If there are multiple variables, please pack them into a uint64.\n     */\n    function _setAux(address owner, uint64 aux) internal {\n        _addressData[owner].aux = aux;\n    }\n\n    /**\n     * Gas spent here starts off proportional to the maximum mint batch size.\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\n     */\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\n        uint256 curr = tokenId;\n\n        unchecked {\n            if (_startTokenId() <= curr && curr < _currentIndex) {\n                TokenOwnership memory ownership = _ownerships[curr];\n                if (!ownership.burned) {\n                    if (ownership.addr != address(0)) {\n                        return ownership;\n                    }\n                    // Invariant:\n                    // There will always be an ownership that has an address and is not burned\n                    // before an ownership that does not have an address and is not burned.\n                    // Hence, curr will not underflow.\n                    while (true) {\n                        curr--;\n                        ownership = _ownerships[curr];\n                        if (ownership.addr != address(0)) {\n                            return ownership;\n                        }\n                    }\n                }\n            }\n        }\n        revert OwnerQueryForNonexistentToken();\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view override returns (address) {\n        return _ownershipOf(tokenId).addr;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return '';\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public override {\n        address owner = ERC721A.ownerOf(tokenId);\n        if (to == owner) revert ApprovalToCurrentOwner();\n\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\n            revert ApprovalCallerNotOwnerNorApproved();\n        }\n\n        _approve(to, tokenId, owner);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view override returns (address) {\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        if (operator == _msgSender()) revert ApproveToCaller();\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, '');\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        _transfer(from, to, tokenId);\n        if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {\n            revert TransferToNonERC721ReceiverImplementer();\n        }\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     */\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        return _startTokenId() <= tokenId && tokenId < _currentIndex &&\n            !_ownerships[tokenId].burned;\n    }\n\n    function _safeMint(address to, uint256 quantity) internal {\n        _safeMint(to, quantity, '');\n    }\n\n    /**\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(\n        address to,\n        uint256 quantity,\n        bytes memory _data\n    ) internal {\n        _mint(to, quantity, _data, true);\n    }\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(\n        address to,\n        uint256 quantity,\n        bytes memory _data,\n        bool safe\n    ) internal {\n        uint256 startTokenId = _currentIndex;\n        if (to == address(0)) revert MintToZeroAddress();\n        if (quantity == 0) revert MintZeroQuantity();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are incredibly unrealistic.\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\n        unchecked {\n            _addressData[to].balance += uint64(quantity);\n            _addressData[to].numberMinted += uint64(quantity);\n\n            _ownerships[startTokenId].addr = to;\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\n\n            uint256 updatedIndex = startTokenId;\n            uint256 end = updatedIndex + quantity;\n\n            if (safe && to.isContract()) {\n                do {\n                    emit Transfer(address(0), to, updatedIndex);\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\n                        revert TransferToNonERC721ReceiverImplementer();\n                    }\n                } while (updatedIndex != end);\n                // Reentrancy protection\n                if (_currentIndex != startTokenId) revert();\n            } else {\n                do {\n                    emit Transfer(address(0), to, updatedIndex++);\n                } while (updatedIndex != end);\n            }\n            _currentIndex = updatedIndex;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal {\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\n\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\n\n        bool isApprovedOrOwner = (_msgSender() == from ||\n            isApprovedForAll(from, _msgSender()) ||\n            getApproved(tokenId) == _msgSender());\n\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\n        if (to == address(0)) revert TransferToZeroAddress();\n\n        _beforeTokenTransfers(from, to, tokenId, 1);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId, from);\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\n        unchecked {\n            _addressData[from].balance -= 1;\n            _addressData[to].balance += 1;\n\n            TokenOwnership storage currSlot = _ownerships[tokenId];\n            currSlot.addr = to;\n            currSlot.startTimestamp = uint64(block.timestamp);\n\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\n            uint256 nextTokenId = tokenId + 1;\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\n            if (nextSlot.addr == address(0)) {\n                // This will suffice for checking _exists(nextTokenId),\n                // as a burned slot cannot contain the zero address.\n                if (nextTokenId != _currentIndex) {\n                    nextSlot.addr = from;\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\n                }\n            }\n        }\n\n        emit Transfer(from, to, tokenId);\n        _afterTokenTransfers(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev This is equivalent to _burn(tokenId, false)\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        _burn(tokenId, false);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\n\n        address from = prevOwnership.addr;\n\n        if (approvalCheck) {\n            bool isApprovedOrOwner = (_msgSender() == from ||\n                isApprovedForAll(from, _msgSender()) ||\n                getApproved(tokenId) == _msgSender());\n\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\n        }\n\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId, from);\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\n        unchecked {\n            AddressData storage addressData = _addressData[from];\n            addressData.balance -= 1;\n            addressData.numberBurned += 1;\n\n            // Keep track of who burned the token, and the timestamp of burning.\n            TokenOwnership storage currSlot = _ownerships[tokenId];\n            currSlot.addr = from;\n            currSlot.startTimestamp = uint64(block.timestamp);\n            currSlot.burned = true;\n\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\n            uint256 nextTokenId = tokenId + 1;\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\n            if (nextSlot.addr == address(0)) {\n                // This will suffice for checking _exists(nextTokenId),\n                // as a burned slot cannot contain the zero address.\n                if (nextTokenId != _currentIndex) {\n                    nextSlot.addr = from;\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\n                }\n            }\n        }\n\n        emit Transfer(from, address(0), tokenId);\n        _afterTokenTransfers(from, address(0), tokenId, 1);\n\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\n        unchecked {\n            _burnCounter++;\n        }\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(\n        address to,\n        uint256 tokenId,\n        address owner\n    ) internal {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkContractOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal returns (bool) {\n        try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n            return retval == IERC721Receiver(to).onERC721Received.selector;\n        } catch (bytes memory reason) {\n            if (reason.length == 0) {\n                revert TransferToNonERC721ReceiverImplementer();\n            } else {\n                assembly {\n                    revert(add(32, reason), mload(reason))\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\n     * And also called before burning one token.\n     *\n     * startTokenId - the first token id to be transferred\n     * quantity - the amount to be transferred\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _beforeTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\n     * minting.\n     * And also called after one token has been burned.\n     *\n     * startTokenId - the first token id to be transferred\n     * quantity - the amount to be transferred\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` has been minted for `to`.\n     * - When `to` is zero, `tokenId` has been burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _afterTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
			},
			"@openzeppelin/contracts/utils/math/SignedMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fc980984badf3984b6303b377711220e067722bbd6a135b24669ff5069ef9f32\",\"dweb:/ipfs/QmPHXMSXj99XjSVM21YsY6aNtLLjLVXDbyN76J5HQYvvrz\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"IERC721": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required interface of an ERC721 compliant contract.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
				"IERC721Receiver": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "onERC721Received",
							"outputs": [
								{
									"internalType": "bytes4",
									"name": "",
									"type": "bytes4"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.",
						"kind": "dev",
						"methods": {
							"onERC721Received(address,address,uint256,bytes)": {
								"details": "Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."
							}
						},
						"title": "ERC721 token receiver interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"onERC721Received(address,address,uint256,bytes)": "150b7a02"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708\",\"dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
				"IERC721Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://eips.ethereum.org/EIPS/eip-721",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard, optional metadata extension",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Address.sol\":194:9363  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Address.sol\":194:9363  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212208dda839c71de4998b97bb5d687b69290308a06d6755ff9d70d1e6a9a3a0190dc64736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208dda839c71de4998b97bb5d687b69290308a06d6755ff9d70d1e6a9a3a0190dc64736f6c63430008120033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP14 0xDA DUP4 SWAP13 PUSH18 0xDE4998B97BB5D687B69290308A06D6755FF9 0xD7 0xD 0x1E PUSH11 0x9A3A0190DC64736F6C6343 STOP ADDMOD SLT STOP CALLER ",
							"sourceMap": "194:9169:4:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:9169:4;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208dda839c71de4998b97bb5d687b69290308a06d6755ff9d70d1e6a9a3a0190dc64736f6c63430008120033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP14 0xDA DUP4 SWAP13 PUSH18 0xDE4998B97BB5D687B69290308A06D6755FF9 0xD7 0xD 0x1E PUSH11 0x9A3A0190DC64736F6C6343 STOP ADDMOD SLT STOP CALLER ",
							"sourceMap": "194:9169:4:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_revert(bytes memory,string memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite",
								"verifyCallResultFromTarget(address,bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 4,
									"value": "B"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "BYTE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "EQ",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 4,
									"value": "24"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "ADDRESS",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "MSTORE8",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212208dda839c71de4998b97bb5d687b69290308a06d6755ff9d70d1e6a9a3a0190dc64736f6c63430008120033",
									".code": [
										{
											"begin": 194,
											"end": 9363,
											"name": "PUSHDEPLOYADDRESS",
											"source": 4
										},
										{
											"begin": 194,
											"end": 9363,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 194,
											"end": 9363,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 194,
											"end": 9363,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 194,
											"end": 9363,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 194,
											"end": 9363,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 194,
											"end": 9363,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 9363,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 194,
											"end": 9363,
											"name": "REVERT",
											"source": 4
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
								"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/introspection/ERC165.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/ERC-721AWRefund.sol",
								"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol",
								"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/IERC721R.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931\",\"dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"Strings": {
					"abi": [],
					"devdoc": {
						"details": "String operations.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Strings.sol\":220:2779  library Strings {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":220:2779  library Strings {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122033930a3489b186cb226124175343a78529bcc2d2e55b95e770b81f1d26f6039764736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122033930a3489b186cb226124175343a78529bcc2d2e55b95e770b81f1d26f6039764736f6c63430008120033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLER SWAP4 EXP CALLVALUE DUP10 0xB1 DUP7 0xCB 0x22 PUSH2 0x2417 MSTORE8 NUMBER 0xA7 DUP6 0x29 0xBC 0xC2 0xD2 0xE5 JUMPDEST SWAP6 0xE7 PUSH17 0xB81F1D26F6039764736F6C634300081200 CALLER ",
							"sourceMap": "220:2559:6:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;220:2559:6;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122033930a3489b186cb226124175343a78529bcc2d2e55b95e770b81f1d26f6039764736f6c63430008120033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLER SWAP4 EXP CALLVALUE DUP10 0xB1 DUP7 0xCB 0x22 PUSH2 0x2417 MSTORE8 NUMBER 0xA7 DUP6 0x29 0xBC 0xC2 0xD2 0xE5 JUMPDEST SWAP6 0xE7 PUSH17 0xB81F1D26F6039764736F6C634300081200 CALLER ",
							"sourceMap": "220:2559:6:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"equal(string memory,string memory)": "infinite",
								"toHexString(address)": "infinite",
								"toHexString(uint256)": "infinite",
								"toHexString(uint256,uint256)": "infinite",
								"toString(int256)": "infinite",
								"toString(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH",
									"source": 6,
									"value": "B"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "BYTE",
									"source": 6
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "EQ",
									"source": 6
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH",
									"source": 6,
									"value": "24"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "ADDRESS",
									"source": 6
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "MSTORE8",
									"source": 6
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122033930a3489b186cb226124175343a78529bcc2d2e55b95e770b81f1d26f6039764736f6c63430008120033",
									".code": [
										{
											"begin": 220,
											"end": 2779,
											"name": "PUSHDEPLOYADDRESS",
											"source": 6
										},
										{
											"begin": 220,
											"end": 2779,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 220,
											"end": 2779,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 220,
											"end": 2779,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 220,
											"end": 2779,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 220,
											"end": 2779,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 220,
											"end": 2779,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 220,
											"end": 2779,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 220,
											"end": 2779,
											"name": "REVERT",
											"source": 6
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
								"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/introspection/ERC165.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/ERC-721AWRefund.sol",
								"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol",
								"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/IERC721R.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b81d9ff6559ea5c47fc573e17ece6d9ba5d6839e213e6ebc3b4c5c8fe4199d7f\",\"dweb:/ipfs/QmPCW1bFisUzJkyjroY3yipwfism9RRCigCcK1hbXtVM8n\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c\",\"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7\",\"dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
				"ERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"Math": {
					"abi": [],
					"devdoc": {
						"details": "Standard math utilities missing in the Solidity language.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/math/Math.sol\":202:12784  library Math {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":202:12784  library Math {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220f0207e6f093317eb262bef746acf1bc4b738cb2faefb2b0378951461cb8198d764736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f0207e6f093317eb262bef746acf1bc4b738cb2faefb2b0378951461cb8198d764736f6c63430008120033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE KECCAK256 PUSH31 0x6F093317EB262BEF746ACF1BC4B738CB2FAEFB2B0378951461CB8198D76473 PUSH16 0x6C634300081200330000000000000000 ",
							"sourceMap": "202:12582:9:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:12582:9;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f0207e6f093317eb262bef746acf1bc4b738cb2faefb2b0378951461cb8198d764736f6c63430008120033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE KECCAK256 PUSH31 0x6F093317EB262BEF746ACF1BC4B738CB2FAEFB2B0378951461CB8198D76473 PUSH16 0x6C634300081200330000000000000000 ",
							"sourceMap": "202:12582:9:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"average(uint256,uint256)": "infinite",
								"ceilDiv(uint256,uint256)": "infinite",
								"log10(uint256)": "infinite",
								"log10(uint256,enum Math.Rounding)": "infinite",
								"log2(uint256)": "infinite",
								"log2(uint256,enum Math.Rounding)": "infinite",
								"log256(uint256)": "infinite",
								"log256(uint256,enum Math.Rounding)": "infinite",
								"max(uint256,uint256)": "infinite",
								"min(uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256,enum Math.Rounding)": "infinite",
								"sqrt(uint256)": "infinite",
								"sqrt(uint256,enum Math.Rounding)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH",
									"source": 9,
									"value": "B"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "BYTE",
									"source": 9
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH",
									"source": 9,
									"value": "4"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "ADDRESS",
									"source": 9
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "MSTORE8",
									"source": 9
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "RETURN",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220f0207e6f093317eb262bef746acf1bc4b738cb2faefb2b0378951461cb8198d764736f6c63430008120033",
									".code": [
										{
											"begin": 202,
											"end": 12784,
											"name": "PUSHDEPLOYADDRESS",
											"source": 9
										},
										{
											"begin": 202,
											"end": 12784,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 202,
											"end": 12784,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 202,
											"end": 12784,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 202,
											"end": 12784,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 202,
											"end": 12784,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 202,
											"end": 12784,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 202,
											"end": 12784,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 202,
											"end": 12784,
											"name": "REVERT",
											"source": 9
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
								"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/introspection/ERC165.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/ERC-721AWRefund.sol",
								"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol",
								"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/IERC721R.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c\",\"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/math/SignedMath.sol": {
				"SignedMath": {
					"abi": [],
					"devdoc": {
						"details": "Standard signed math utilities missing in the Solidity language.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/math/SignedMath.sol\":215:1262  library SignedMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/math/SignedMath.sol\":215:1262  library SignedMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220f0e0d7caf8b5366e0d2e6ea208cb596a40b3ccd2c7e9fc610d4de61856fa660a64736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f0e0d7caf8b5366e0d2e6ea208cb596a40b3ccd2c7e9fc610d4de61856fa660a64736f6c63430008120033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE 0xE0 0xD7 0xCA 0xF8 0xB5 CALLDATASIZE PUSH15 0xD2E6EA208CB596A40B3CCD2C7E9FC PUSH2 0xD4D 0xE6 XOR JUMP STATICCALL PUSH7 0xA64736F6C6343 STOP ADDMOD SLT STOP CALLER ",
							"sourceMap": "215:1047:10:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;215:1047:10;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f0e0d7caf8b5366e0d2e6ea208cb596a40b3ccd2c7e9fc610d4de61856fa660a64736f6c63430008120033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE 0xE0 0xD7 0xCA 0xF8 0xB5 CALLDATASIZE PUSH15 0xD2E6EA208CB596A40B3CCD2C7E9FC PUSH2 0xD4D 0xE6 XOR JUMP STATICCALL PUSH7 0xA64736F6C6343 STOP ADDMOD SLT STOP CALLER ",
							"sourceMap": "215:1047:10:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"abs(int256)": "infinite",
								"average(int256,int256)": "infinite",
								"max(int256,int256)": "infinite",
								"min(int256,int256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH #[$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH [$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH",
									"source": 10,
									"value": "B"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "CODECOPY",
									"source": 10
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "BYTE",
									"source": 10
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH",
									"source": 10,
									"value": "73"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "EQ",
									"source": 10
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH",
									"source": 10,
									"value": "4"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "tag",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "ADDRESS",
									"source": 10
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH",
									"source": 10,
									"value": "73"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "MSTORE8",
									"source": 10
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "RETURN",
									"source": 10
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220f0e0d7caf8b5366e0d2e6ea208cb596a40b3ccd2c7e9fc610d4de61856fa660a64736f6c63430008120033",
									".code": [
										{
											"begin": 215,
											"end": 1262,
											"name": "PUSHDEPLOYADDRESS",
											"source": 10
										},
										{
											"begin": 215,
											"end": 1262,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 215,
											"end": 1262,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 215,
											"end": 1262,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 215,
											"end": 1262,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 215,
											"end": 1262,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 215,
											"end": 1262,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 215,
											"end": 1262,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 215,
											"end": 1262,
											"name": "REVERT",
											"source": 10
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
								"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/introspection/ERC165.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/ERC-721AWRefund.sol",
								"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol",
								"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/IERC721R.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7\",\"dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/ERC-721AWRefund.sol": {
				"Web3Builders": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "ApprovalCallerNotOwnerNorApproved",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ApprovalQueryForNonexistentToken",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ApprovalToCurrentOwner",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ApproveToCaller",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "BalanceQueryForZeroAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MintToZeroAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MintZeroQuantity",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "OwnerQueryForNonexistentToken",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferCallerNotOwnerNorApproved",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferFromIncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferToNonERC721ReceiverImplementer",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferToZeroAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "URIQueryForNonexistentToken",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getRefundAmount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getRefundDeadline",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "hasRefunded",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "maxMintPerUser",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "maxMintSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "mintPrice",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "refund",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "refundAddress",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "refundEndTimeStamp",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "refundEndTimestamps",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "refundPeriod",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "quantity",
									"type": "uint256"
								}
							],
							"name": "safeMint",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "withdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "See {IERC721-approve}."
							},
							"balanceOf(address)": {
								"details": "See {IERC721-balanceOf}."
							},
							"getApproved(uint256)": {
								"details": "See {IERC721-getApproved}."
							},
							"isApprovedForAll(address,address)": {
								"details": "See {IERC721-isApprovedForAll}."
							},
							"name()": {
								"details": "See {IERC721Metadata-name}."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"ownerOf(uint256)": {
								"details": "See {IERC721-ownerOf}."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "See {IERC721-safeTransferFrom}."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "See {IERC721-safeTransferFrom}."
							},
							"setApprovalForAll(address,bool)": {
								"details": "See {IERC721-setApprovalForAll}."
							},
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							},
							"symbol()": {
								"details": "See {IERC721Metadata-symbol}."
							},
							"tokenURI(uint256)": {
								"details": "See {IERC721Metadata-tokenURI}."
							},
							"totalSupply()": {
								"details": "Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC721-transferFrom}."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/ERC-721AWRefund.sol\":283:2923  contract Web3Builders is ERC721A, Ownable {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/ERC-721AWRefund.sol\":865:1017  constructor() ERC721A(\"Web3Builders\", \"WE3\") {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":3413:3567  constructor(string memory name_, string memory symbol_) {... */\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x0c\n  dup2\n  mstore\n  0x20\n  add\n  shl(0xa0, 0x576562334275696c64657273)\n  dup2\n  mstore\n  pop\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x03\n  dup2\n  mstore\n  0x20\n  add\n  shl(0xe8, 0x574533)\n  dup2\n  mstore\n  pop\n    /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":3487:3492  name_ */\n  dup2\n    /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":3479:3484  _name */\n  0x02\n    /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":3479:3492  _name = name_ */\n  swap1\n  dup2\n  tag_6\n  swap2\n  swap1\n  tag_7\n  jump\t// in\ntag_6:\n  pop\n    /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":3502:3509  _symbol */\n  0x03\n    /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":3502:3519  _symbol = symbol_ */\n  tag_8\n    /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":3512:3519  symbol_ */\n  dup3\n    /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":3502:3509  _symbol */\n  dup3\n    /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":3502:3519  _symbol = symbol_ */\n  tag_7\n  jump\t// in\ntag_8:\n  pop\n  pop\n    /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":3715:3722  uint256 */\n  0x00\n    /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":3529:3560  _currentIndex = _startTokenId() */\n  dup1\n  sstore\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:968  _transferOwnership(_msgSender()) */\n  tag_12\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:954  _transferOwnership */\n  tag_15\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:968  _transferOwnership(_msgSender()) */\n  jump\t// in\ntag_12:\n    /* \"contracts/ERC-721AWRefund.sol\":920:933  refundAddress */\n  0x0a\n    /* \"contracts/ERC-721AWRefund.sol\":920:949  refundAddress = address(this) */\n  dup1\n  sload\n  not(sub(shl(0xa0, 0x01), 0x01))\n  and\n    /* \"contracts/ERC-721AWRefund.sol\":944:948  this */\n  address\n    /* \"contracts/ERC-721AWRefund.sol\":920:949  refundAddress = address(this) */\n  or\n  swap1\n  sstore\n    /* \"contracts/ERC-721AWRefund.sol\":980:1010  block.timestamp + refundPeriod */\n  tag_17\n    /* \"contracts/ERC-721AWRefund.sol\":515:524  3 minutes */\n  0xb4\n    /* \"contracts/ERC-721AWRefund.sol\":980:995  block.timestamp */\n  timestamp\n    /* \"contracts/ERC-721AWRefund.sol\":980:1010  block.timestamp + refundPeriod */\n  tag_18\n  jump\t// in\ntag_17:\n    /* \"contracts/ERC-721AWRefund.sol\":959:977  refundEndTimeStamp */\n  0x09\n    /* \"contracts/ERC-721AWRefund.sol\":959:1010  refundEndTimeStamp = block.timestamp + refundPeriod */\n  sstore\n    /* \"contracts/ERC-721AWRefund.sol\":283:2923  contract Web3Builders is ERC721A, Ownable {... */\n  jump(tag_28)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2426:2613  function _transferOwnership(address newOwner) internal virtual {... */\ntag_15:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2518:2524  _owner */\n  0x08\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2534:2551  _owner = newOwner */\n  dup4\n  dup2\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  dup4\n  and\n  dup2\n  or\n  swap1\n  swap4\n  sstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2566:2606  OwnershipTransferred(oldOwner, newOwner) */\n  mload(0x40)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2518:2524  _owner */\n  swap2\n  and\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2534:2551  _owner = newOwner */\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2518:2524  _owner */\n  dup3\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2566:2606  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2499:2515  address oldOwner */\n  0x00\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2566:2606  OwnershipTransferred(oldOwner, newOwner) */\n  log3\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2489:2613  {... */\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2426:2613  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":14:141   */\ntag_23:\n    /* \"#utility.yul\":75:85   */\n  0x4e487b71\n    /* \"#utility.yul\":70:73   */\n  0xe0\n    /* \"#utility.yul\":66:86   */\n  shl\n    /* \"#utility.yul\":63:64   */\n  0x00\n    /* \"#utility.yul\":56:87   */\n  mstore\n    /* \"#utility.yul\":106:110   */\n  0x41\n    /* \"#utility.yul\":103:104   */\n  0x04\n    /* \"#utility.yul\":96:111   */\n  mstore\n    /* \"#utility.yul\":130:134   */\n  0x24\n    /* \"#utility.yul\":127:128   */\n  0x00\n    /* \"#utility.yul\":120:135   */\n  revert\n    /* \"#utility.yul\":146:526   */\ntag_24:\n    /* \"#utility.yul\":225:226   */\n  0x01\n    /* \"#utility.yul\":221:233   */\n  dup2\n  dup2\n  shr\n  swap1\n    /* \"#utility.yul\":268:280   */\n  dup3\n  and\n  dup1\n    /* \"#utility.yul\":289:350   */\n  tag_31\n  jumpi\n    /* \"#utility.yul\":343:347   */\n  0x7f\n    /* \"#utility.yul\":335:341   */\n  dup3\n    /* \"#utility.yul\":331:348   */\n  and\n    /* \"#utility.yul\":321:348   */\n  swap2\n  pop\n    /* \"#utility.yul\":289:350   */\ntag_31:\n    /* \"#utility.yul\":396:398   */\n  0x20\n    /* \"#utility.yul\":388:394   */\n  dup3\n    /* \"#utility.yul\":385:399   */\n  lt\n    /* \"#utility.yul\":365:383   */\n  dup2\n    /* \"#utility.yul\":362:400   */\n  sub\n    /* \"#utility.yul\":359:520   */\n  tag_32\n  jumpi\n    /* \"#utility.yul\":442:452   */\n  0x4e487b71\n    /* \"#utility.yul\":437:440   */\n  0xe0\n    /* \"#utility.yul\":433:453   */\n  shl\n    /* \"#utility.yul\":430:431   */\n  0x00\n    /* \"#utility.yul\":423:454   */\n  mstore\n    /* \"#utility.yul\":477:481   */\n  0x22\n    /* \"#utility.yul\":474:475   */\n  0x04\n    /* \"#utility.yul\":467:482   */\n  mstore\n    /* \"#utility.yul\":505:509   */\n  0x24\n    /* \"#utility.yul\":502:503   */\n  0x00\n    /* \"#utility.yul\":495:510   */\n  revert\n    /* \"#utility.yul\":359:520   */\ntag_32:\n  pop\n    /* \"#utility.yul\":146:526   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":657:1202   */\ntag_26:\n    /* \"#utility.yul\":759:761   */\n  0x1f\n    /* \"#utility.yul\":754:757   */\n  dup3\n    /* \"#utility.yul\":751:762   */\n  gt\n    /* \"#utility.yul\":748:1196   */\n  iszero\n  tag_35\n  jumpi\n    /* \"#utility.yul\":795:796   */\n  0x00\n    /* \"#utility.yul\":820:825   */\n  dup2\n    /* \"#utility.yul\":816:818   */\n  dup2\n    /* \"#utility.yul\":809:826   */\n  mstore\n    /* \"#utility.yul\":865:869   */\n  0x20\n    /* \"#utility.yul\":861:863   */\n  dup2\n    /* \"#utility.yul\":851:870   */\n  keccak256\n    /* \"#utility.yul\":935:937   */\n  0x1f\n    /* \"#utility.yul\":923:933   */\n  dup6\n    /* \"#utility.yul\":919:938   */\n  add\n    /* \"#utility.yul\":916:917   */\n  0x05\n    /* \"#utility.yul\":912:939   */\n  shr\n    /* \"#utility.yul\":906:910   */\n  dup2\n    /* \"#utility.yul\":902:940   */\n  add\n    /* \"#utility.yul\":971:975   */\n  0x20\n    /* \"#utility.yul\":959:969   */\n  dup7\n    /* \"#utility.yul\":956:976   */\n  lt\n    /* \"#utility.yul\":953:1000   */\n  iszero\n  tag_36\n  jumpi\n  pop\n    /* \"#utility.yul\":994:998   */\n  dup1\n    /* \"#utility.yul\":953:1000   */\ntag_36:\n    /* \"#utility.yul\":1049:1051   */\n  0x1f\n    /* \"#utility.yul\":1044:1047   */\n  dup6\n    /* \"#utility.yul\":1040:1052   */\n  add\n    /* \"#utility.yul\":1037:1038   */\n  0x05\n    /* \"#utility.yul\":1033:1053   */\n  shr\n    /* \"#utility.yul\":1027:1031   */\n  dup3\n    /* \"#utility.yul\":1023:1054   */\n  add\n    /* \"#utility.yul\":1013:1054   */\n  swap2\n  pop\n    /* \"#utility.yul\":1104:1186   */\ntag_37:\n    /* \"#utility.yul\":1122:1124   */\n  dup2\n    /* \"#utility.yul\":1115:1120   */\n  dup2\n    /* \"#utility.yul\":1112:1125   */\n  lt\n    /* \"#utility.yul\":1104:1186   */\n  iszero\n  tag_39\n  jumpi\n    /* \"#utility.yul\":1167:1184   */\n  dup3\n  dup2\n  sstore\n    /* \"#utility.yul\":1148:1149   */\n  0x01\n    /* \"#utility.yul\":1137:1150   */\n  add\n    /* \"#utility.yul\":1104:1186   */\n  jump(tag_37)\ntag_39:\n    /* \"#utility.yul\":1108:1111   */\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":748:1196   */\ntag_35:\n    /* \"#utility.yul\":657:1202   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1378:2730   */\ntag_7:\n    /* \"#utility.yul\":1498:1508   */\n  dup2\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":1520:1550   */\n  dup2\n  gt\n    /* \"#utility.yul\":1517:1573   */\n  iszero\n  tag_43\n  jumpi\n    /* \"#utility.yul\":1553:1571   */\n  tag_43\n  tag_23\n  jump\t// in\ntag_43:\n    /* \"#utility.yul\":1582:1679   */\n  tag_44\n    /* \"#utility.yul\":1672:1678   */\n  dup2\n    /* \"#utility.yul\":1632:1670   */\n  tag_45\n    /* \"#utility.yul\":1664:1668   */\n  dup5\n    /* \"#utility.yul\":1658:1669   */\n  sload\n    /* \"#utility.yul\":1632:1670   */\n  tag_24\n  jump\t// in\ntag_45:\n    /* \"#utility.yul\":1626:1630   */\n  dup5\n    /* \"#utility.yul\":1582:1679   */\n  tag_26\n  jump\t// in\ntag_44:\n    /* \"#utility.yul\":1734:1738   */\n  0x20\n  dup1\n    /* \"#utility.yul\":1798:1800   */\n  0x1f\n    /* \"#utility.yul\":1787:1801   */\n  dup4\n  gt\n    /* \"#utility.yul\":1815:1816   */\n  0x01\n    /* \"#utility.yul\":1810:2473   */\n  dup2\n  eq\n  tag_47\n  jumpi\n    /* \"#utility.yul\":2517:2518   */\n  0x00\n    /* \"#utility.yul\":2534:2540   */\n  dup5\n    /* \"#utility.yul\":2531:2620   */\n  iszero\n  tag_48\n  jumpi\n  pop\n    /* \"#utility.yul\":2586:2605   */\n  dup6\n  dup4\n  add\n    /* \"#utility.yul\":2580:2606   */\n  mload\n    /* \"#utility.yul\":2531:2620   */\ntag_48:\n  not(0x00)\n    /* \"#utility.yul\":1335:1336   */\n  0x03\n    /* \"#utility.yul\":1331:1342   */\n  dup7\n  swap1\n  shl\n    /* \"#utility.yul\":1327:1351   */\n  shr\n    /* \"#utility.yul\":1323:1352   */\n  not\n    /* \"#utility.yul\":1313:1353   */\n  and\n    /* \"#utility.yul\":1359:1360   */\n  0x01\n    /* \"#utility.yul\":1355:1366   */\n  dup6\n  swap1\n  shl\n    /* \"#utility.yul\":1310:1367   */\n  or\n    /* \"#utility.yul\":2633:2714   */\n  dup6\n  sstore\n    /* \"#utility.yul\":1780:2724   */\n  jump(tag_39)\n    /* \"#utility.yul\":1810:2473   */\ntag_47:\n    /* \"#utility.yul\":604:605   */\n  0x00\n    /* \"#utility.yul\":597:611   */\n  dup6\n  dup2\n  mstore\n    /* \"#utility.yul\":641:645   */\n  0x20\n    /* \"#utility.yul\":628:646   */\n  dup2\n  keccak256\n  not(0x1f)\n    /* \"#utility.yul\":1846:1866   */\n  dup7\n  and\n  swap2\n    /* \"#utility.yul\":1964:2200   */\ntag_51:\n    /* \"#utility.yul\":1978:1985   */\n  dup3\n    /* \"#utility.yul\":1975:1976   */\n  dup2\n    /* \"#utility.yul\":1972:1986   */\n  lt\n    /* \"#utility.yul\":1964:2200   */\n  iszero\n  tag_53\n  jumpi\n    /* \"#utility.yul\":2067:2086   */\n  dup9\n  dup7\n  add\n    /* \"#utility.yul\":2061:2087   */\n  mload\n    /* \"#utility.yul\":2046:2088   */\n  dup3\n  sstore\n    /* \"#utility.yul\":2159:2186   */\n  swap5\n  dup5\n  add\n  swap5\n    /* \"#utility.yul\":2127:2128   */\n  0x01\n    /* \"#utility.yul\":2115:2129   */\n  swap1\n  swap2\n  add\n  swap1\n    /* \"#utility.yul\":1994:2013   */\n  dup5\n  add\n    /* \"#utility.yul\":1964:2200   */\n  jump(tag_51)\ntag_53:\n    /* \"#utility.yul\":1968:1971   */\n  pop\n    /* \"#utility.yul\":2228:2234   */\n  dup6\n    /* \"#utility.yul\":2219:2226   */\n  dup3\n    /* \"#utility.yul\":2216:2235   */\n  lt\n    /* \"#utility.yul\":2213:2414   */\n  iszero\n  tag_54\n  jumpi\n    /* \"#utility.yul\":2289:2308   */\n  dup8\n  dup6\n  add\n    /* \"#utility.yul\":2283:2309   */\n  mload\n  not(0x00)\n    /* \"#utility.yul\":2372:2373   */\n  0x03\n    /* \"#utility.yul\":2368:2382   */\n  dup9\n  swap1\n  shl\n    /* \"#utility.yul\":2384:2387   */\n  0xf8\n    /* \"#utility.yul\":2364:2388   */\n  and\n    /* \"#utility.yul\":2360:2397   */\n  shr\n    /* \"#utility.yul\":2356:2398   */\n  not\n    /* \"#utility.yul\":2341:2399   */\n  and\n    /* \"#utility.yul\":2326:2400   */\n  dup2\n  sstore\n    /* \"#utility.yul\":2213:2414   */\ntag_54:\n  pop\n  pop\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":2460:2461   */\n  0x01\n    /* \"#utility.yul\":2444:2458   */\n  swap1\n  dup2\n  shl\n    /* \"#utility.yul\":2440:2462   */\n  add\n    /* \"#utility.yul\":2427:2463   */\n  swap1\n  sstore\n  pop\n    /* \"#utility.yul\":1378:2730   */\n  jump\t// out\n    /* \"#utility.yul\":2735:2957   */\ntag_18:\n    /* \"#utility.yul\":2800:2809   */\n  dup1\n  dup3\n  add\n    /* \"#utility.yul\":2821:2831   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":2818:2951   */\n  iszero\n  tag_56\n  jumpi\n    /* \"#utility.yul\":2873:2883   */\n  0x4e487b71\n    /* \"#utility.yul\":2868:2871   */\n  0xe0\n    /* \"#utility.yul\":2864:2884   */\n  shl\n    /* \"#utility.yul\":2861:2862   */\n  0x00\n    /* \"#utility.yul\":2854:2885   */\n  mstore\n    /* \"#utility.yul\":2908:2912   */\n  0x11\n    /* \"#utility.yul\":2905:2906   */\n  0x04\n    /* \"#utility.yul\":2898:2913   */\n  mstore\n    /* \"#utility.yul\":2936:2940   */\n  0x24\n    /* \"#utility.yul\":2933:2934   */\n  0x00\n    /* \"#utility.yul\":2926:2941   */\n  revert\n    /* \"#utility.yul\":2818:2951   */\ntag_56:\n    /* \"#utility.yul\":2735:2957   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\ntag_28:\n    /* \"contracts/ERC-721AWRefund.sol\":283:2923  contract Web3Builders is ERC721A, Ownable {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/ERC-721AWRefund.sol\":283:2923  contract Web3Builders is ERC721A, Ownable {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x70a08231\n      gt\n      tag_32\n      jumpi\n      dup1\n      0xc23fcdef\n      gt\n      tag_33\n      jumpi\n      dup1\n      0xd64297f9\n      gt\n      tag_34\n      jumpi\n      dup1\n      0xd64297f9\n      eq\n      tag_28\n      jumpi\n      dup1\n      0xe5496fc8\n      eq\n      tag_29\n      jumpi\n      dup1\n      0xe985e9c5\n      eq\n      tag_30\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_31\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_34:\n      dup1\n      0xc23fcdef\n      eq\n      tag_24\n      jumpi\n      dup1\n      0xc285e107\n      eq\n      tag_25\n      jumpi\n      dup1\n      0xc87b56dd\n      eq\n      tag_26\n      jumpi\n      dup1\n      0xd304c4bc\n      eq\n      tag_27\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_33:\n      dup1\n      0x95d89b41\n      gt\n      tag_35\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_20\n      jumpi\n      dup1\n      0xa22cb465\n      eq\n      tag_21\n      jumpi\n      dup1\n      0xa6a3b5b4\n      eq\n      tag_22\n      jumpi\n      dup1\n      0xb88d4fde\n      eq\n      tag_23\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_35:\n      dup1\n      0x70a08231\n      eq\n      tag_17\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_18\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_19\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_32:\n      dup1\n      0x23b872dd\n      gt\n      tag_36\n      jumpi\n      dup1\n      0x42842e0e\n      gt\n      tag_37\n      jumpi\n      dup1\n      0x42842e0e\n      eq\n      tag_13\n      jumpi\n      dup1\n      0x6352211e\n      eq\n      tag_14\n      jumpi\n      dup1\n      0x6817c76c\n      eq\n      tag_15\n      jumpi\n      dup1\n      0x6f1d10ce\n      eq\n      tag_16\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_37:\n      dup1\n      0x23b872dd\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x278ecde1\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x31c864e8\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x3ccfd60b\n      eq\n      tag_12\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_36:\n      dup1\n      0x081812fc\n      gt\n      tag_38\n      jumpi\n      dup1\n      0x081812fc\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x0cb61f6c\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_8\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_38:\n      dup1\n      0x01ffc9a7\n      eq\n      tag_2\n      jumpi\n      dup1\n      0x04cd5294\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x06fdde03\n      eq\n      tag_4\n      jumpi\n    tag_1:\n      0x00\n      dup1\n      revert\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":4607:4907  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n    tag_2:\n      callvalue\n      dup1\n      iszero\n      tag_39\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_39:\n      pop\n      tag_40\n      tag_41\n      calldatasize\n      0x04\n      tag_42\n      jump\t// in\n    tag_41:\n      tag_43\n      jump\t// in\n    tag_40:\n      mload(0x40)\n        /* \"#utility.yul\":565:579   */\n      swap1\n      iszero\n        /* \"#utility.yul\":558:580   */\n      iszero\n        /* \"#utility.yul\":540:581   */\n      dup2\n      mstore\n        /* \"#utility.yul\":528:530   */\n      0x20\n        /* \"#utility.yul\":513:531   */\n      add\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":4607:4907  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n    tag_44:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ERC-721AWRefund.sol\":2466:2637  function getRefundAmount(uint256 tokenId) public view returns(uint256) {... */\n    tag_3:\n      callvalue\n      dup1\n      iszero\n      tag_46\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_46:\n      pop\n      tag_47\n      tag_48\n      calldatasize\n      0x04\n      tag_49\n      jump\t// in\n    tag_48:\n      tag_50\n      jump\t// in\n    tag_47:\n      mload(0x40)\n        /* \"#utility.yul\":923:948   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":911:913   */\n      0x20\n        /* \"#utility.yul\":896:914   */\n      add\n        /* \"contracts/ERC-721AWRefund.sol\":2466:2637  function getRefundAmount(uint256 tokenId) public view returns(uint256) {... */\n      tag_44\n        /* \"#utility.yul\":777:954   */\n      jump\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7635:7733  function name() public view virtual override returns (string memory) {... */\n    tag_4:\n      callvalue\n      dup1\n      iszero\n      tag_53\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_53:\n      pop\n      tag_54\n      tag_55\n      jump\t// in\n    tag_54:\n      mload(0x40)\n      tag_44\n      swap2\n      swap1\n      tag_57\n      jump\t// in\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9091:9291  function getApproved(uint256 tokenId) public view override returns (address) {... */\n    tag_5:\n      callvalue\n      dup1\n      iszero\n      tag_58\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_58:\n      pop\n      tag_59\n      tag_60\n      calldatasize\n      0x04\n      tag_49\n      jump\t// in\n    tag_60:\n      tag_61\n      jump\t// in\n    tag_59:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1879:1911   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":1861:1912   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1849:1851   */\n      0x20\n        /* \"#utility.yul\":1834:1852   */\n      add\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9091:9291  function getApproved(uint256 tokenId) public view override returns (address) {... */\n      tag_44\n        /* \"#utility.yul\":1715:1918   */\n      jump\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8668:9030  function approve(address to, uint256 tokenId) public override {... */\n    tag_6:\n      callvalue\n      dup1\n      iszero\n      tag_64\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_64:\n      pop\n      tag_65\n      tag_66\n      calldatasize\n      0x04\n      tag_67\n      jump\t// in\n    tag_66:\n      tag_68\n      jump\t// in\n    tag_65:\n      stop\n        /* \"contracts/ERC-721AWRefund.sol\":570:598  address public refundAddress */\n    tag_7:\n      callvalue\n      dup1\n      iszero\n      tag_69\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_69:\n      pop\n      sload(0x0a)\n      tag_59\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":3878:4175  function totalSupply() public view returns (uint256) {... */\n    tag_8:\n      callvalue\n      dup1\n      iszero\n      tag_73\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_73:\n      pop\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":4128:4140  _burnCounter */\n      sload(0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":3922:3929  uint256 */\n      0x00\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":4112:4125  _currentIndex */\n      sload\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":4112:4140  _currentIndex - _burnCounter */\n      sub\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":3878:4175  function totalSupply() public view returns (uint256) {... */\n      jump(tag_47)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9930:10094  function transferFrom(... */\n    tag_9:\n      callvalue\n      dup1\n      iszero\n      tag_77\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_77:\n      pop\n      tag_65\n      tag_79\n      calldatasize\n      0x04\n      tag_80\n      jump\t// in\n    tag_79:\n      tag_81\n      jump\t// in\n        /* \"contracts/ERC-721AWRefund.sol\":1724:2262  function refund(uint256 tokenId) external {... */\n    tag_10:\n      callvalue\n      dup1\n      iszero\n      tag_82\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_82:\n      pop\n      tag_65\n      tag_84\n      calldatasize\n      0x04\n      tag_49\n      jump\t// in\n    tag_84:\n      tag_85\n      jump\t// in\n        /* \"contracts/ERC-721AWRefund.sol\":1176:1718  function safeMint(uint256 quantity) public payable {... */\n    tag_11:\n      tag_65\n      tag_87\n      calldatasize\n      0x04\n      tag_49\n      jump\t// in\n    tag_87:\n      tag_88\n      jump\t// in\n        /* \"contracts/ERC-721AWRefund.sol\":2643:2921  function withdraw() external onlyOwner {... */\n    tag_12:\n      callvalue\n      dup1\n      iszero\n      tag_89\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_89:\n      pop\n      tag_65\n      tag_91\n      jump\t// in\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10160:10339  function safeTransferFrom(... */\n    tag_13:\n      callvalue\n      dup1\n      iszero\n      tag_92\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_92:\n      pop\n      tag_65\n      tag_94\n      calldatasize\n      0x04\n      tag_80\n      jump\t// in\n    tag_94:\n      tag_95\n      jump\t// in\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7450:7573  function ownerOf(uint256 tokenId) public view override returns (address) {... */\n    tag_14:\n      callvalue\n      dup1\n      iszero\n      tag_96\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_96:\n      pop\n      tag_59\n      tag_98\n      calldatasize\n      0x04\n      tag_49\n      jump\t// in\n    tag_98:\n      tag_99\n      jump\t// in\n        /* \"contracts/ERC-721AWRefund.sol\":332:375  uint256 public constant mintPrice = 1 ether */\n    tag_15:\n      callvalue\n      dup1\n      iszero\n      tag_101\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_101:\n      pop\n      tag_47\n        /* \"contracts/ERC-721AWRefund.sol\":368:375  1 ether */\n      0x0de0b6b3a7640000\n        /* \"contracts/ERC-721AWRefund.sol\":332:375  uint256 public constant mintPrice = 1 ether */\n      dup2\n      jump\n        /* \"contracts/ERC-721AWRefund.sol\":530:563  uint256 public refundEndTimeStamp */\n    tag_16:\n      callvalue\n      dup1\n      iszero\n      tag_105\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_105:\n      pop\n      tag_47\n      sload(0x09)\n      dup2\n      jump\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":4966:5169  function balanceOf(address owner) public view override returns (uint256) {... */\n    tag_17:\n      callvalue\n      dup1\n      iszero\n      tag_109\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_109:\n      pop\n      tag_47\n      tag_111\n      calldatasize\n      0x04\n      tag_112\n      jump\t// in\n    tag_111:\n      tag_113\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1824:1925  function renounceOwnership() public virtual onlyOwner {... */\n    tag_18:\n      callvalue\n      dup1\n      iszero\n      tag_115\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_115:\n      pop\n      tag_65\n      tag_117\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n    tag_19:\n      callvalue\n      dup1\n      iszero\n      tag_118\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_118:\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1279  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x08))\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n      jump(tag_59)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7797:7899  function symbol() public view virtual override returns (string memory) {... */\n    tag_20:\n      callvalue\n      dup1\n      iszero\n      tag_122\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_122:\n      pop\n      tag_54\n      tag_124\n      jump\t// in\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9358:9640  function setApprovalForAll(address operator, bool approved) public virtual override {... */\n    tag_21:\n      callvalue\n      dup1\n      iszero\n      tag_126\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_126:\n      pop\n      tag_65\n      tag_128\n      calldatasize\n      0x04\n      tag_129\n      jump\t// in\n    tag_128:\n      tag_130\n      jump\t// in\n        /* \"contracts/ERC-721AWRefund.sol\":479:524  uint public constant refundPeriod = 3 minutes */\n    tag_22:\n      callvalue\n      dup1\n      iszero\n      tag_131\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_131:\n      pop\n      tag_47\n        /* \"contracts/ERC-721AWRefund.sol\":515:524  3 minutes */\n      0xb4\n        /* \"contracts/ERC-721AWRefund.sol\":479:524  uint public constant refundPeriod = 3 minutes */\n      dup2\n      jump\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10405:10764  function safeTransferFrom(... */\n    tag_23:\n      callvalue\n      dup1\n      iszero\n      tag_135\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_135:\n      pop\n      tag_65\n      tag_137\n      calldatasize\n      0x04\n      tag_138\n      jump\t// in\n    tag_137:\n      tag_139\n      jump\t// in\n        /* \"contracts/ERC-721AWRefund.sol\":815:858  mapping(uint256 => bool) public hasRefunded */\n    tag_24:\n      callvalue\n      dup1\n      iszero\n      tag_140\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_140:\n      pop\n      tag_40\n      tag_142\n      calldatasize\n      0x04\n      tag_49\n      jump\t// in\n    tag_142:\n      mstore(0x20, 0x0c)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n      dup2\n      jump\n        /* \"contracts/ERC-721AWRefund.sol\":429:472  uint256 public constant maxMintSupply = 100 */\n    tag_25:\n      callvalue\n      dup1\n      iszero\n      tag_145\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_145:\n      pop\n      tag_47\n        /* \"contracts/ERC-721AWRefund.sol\":469:472  100 */\n      0x64\n        /* \"contracts/ERC-721AWRefund.sol\":429:472  uint256 public constant maxMintSupply = 100 */\n      dup2\n      jump\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7965:8278  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {... */\n    tag_26:\n      callvalue\n      dup1\n      iszero\n      tag_149\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_149:\n      pop\n      tag_54\n      tag_151\n      calldatasize\n      0x04\n      tag_49\n      jump\t// in\n    tag_151:\n      tag_152\n      jump\t// in\n        /* \"contracts/ERC-721AWRefund.sol\":381:423  uint256 public constant maxMintPerUser = 5 */\n    tag_27:\n      callvalue\n      dup1\n      iszero\n      tag_154\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_154:\n      pop\n      tag_47\n        /* \"contracts/ERC-721AWRefund.sol\":422:423  5 */\n      0x05\n        /* \"contracts/ERC-721AWRefund.sol\":381:423  uint256 public constant maxMintPerUser = 5 */\n      dup2\n      jump\n        /* \"contracts/ERC-721AWRefund.sol\":651:705  mapping(uint256 => uint256) public refundEndTimestamps */\n    tag_28:\n      callvalue\n      dup1\n      iszero\n      tag_158\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_158:\n      pop\n      tag_47\n      tag_160\n      calldatasize\n      0x04\n      tag_49\n      jump\t// in\n    tag_160:\n      mstore(0x20, 0x0b)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      dup2\n      jump\n        /* \"contracts/ERC-721AWRefund.sol\":2268:2460  function getRefundDeadline(uint256 tokenId) public view returns(uint256) {... */\n    tag_29:\n      callvalue\n      dup1\n      iszero\n      tag_163\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_163:\n      pop\n      tag_47\n      tag_165\n      calldatasize\n      0x04\n      tag_49\n      jump\t// in\n    tag_165:\n      tag_166\n      jump\t// in\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9706:9868  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n    tag_30:\n      callvalue\n      dup1\n      iszero\n      tag_168\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_168:\n      pop\n      tag_40\n      tag_170\n      calldatasize\n      0x04\n      tag_171\n      jump\t// in\n    tag_170:\n      tag_172\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2074:2272  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_31:\n      callvalue\n      dup1\n      iszero\n      tag_174\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_174:\n      pop\n      tag_65\n      tag_176\n      calldatasize\n      0x04\n      tag_112\n      jump\t// in\n    tag_176:\n      tag_177\n      jump\t// in\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":4607:4907  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n    tag_43:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":4709:4713  bool */\n      0x00\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":4744:4784  interfaceId == type(IERC721).interfaceId */\n      dup3\n      and\n      shl(0xe0, 0x80ac58cd)\n      eq\n      dup1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":4744:4848  interfaceId == type(IERC721).interfaceId ||... */\n      tag_179\n      jumpi\n      pop\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":4800:4848  interfaceId == type(IERC721Metadata).interfaceId */\n      dup3\n      and\n      shl(0xe0, 0x5b5e139f)\n      eq\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":4744:4848  interfaceId == type(IERC721).interfaceId ||... */\n    tag_179:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":4744:4900  interfaceId == type(IERC721).interfaceId ||... */\n      dup1\n      tag_181\n      jumpi\n      pop\n      shl(0xe0, 0x01ffc9a7)\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"@openzeppelin/contracts/utils/introspection/ERC165.sol\":937:977  interfaceId == type(IERC165).interfaceId */\n      dup4\n      and\n      eq\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":4864:4900  super.supportsInterface(interfaceId) */\n    tag_181:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":4725:4900  return... */\n      swap3\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":4607:4907  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC-721AWRefund.sol\":2466:2637  function getRefundAmount(uint256 tokenId) public view returns(uint256) {... */\n    tag_50:\n        /* \"contracts/ERC-721AWRefund.sol\":2528:2535  uint256 */\n      0x00\n        /* \"contracts/ERC-721AWRefund.sol\":2550:2570  hasRefunded[tokenId] */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/ERC-721AWRefund.sol\":2550:2561  hasRefunded */\n      0x0c\n        /* \"contracts/ERC-721AWRefund.sol\":2550:2570  hasRefunded[tokenId] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n      sload\n      0xff\n      and\n        /* \"contracts/ERC-721AWRefund.sol\":2547:2605  if(hasRefunded[tokenId]) {... */\n      iszero\n      tag_184\n      jumpi\n      pop\n        /* \"contracts/ERC-721AWRefund.sol\":2593:2594  0 */\n      0x00\n      swap2\n        /* \"contracts/ERC-721AWRefund.sol\":2466:2637  function getRefundAmount(uint256 tokenId) public view returns(uint256) {... */\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/ERC-721AWRefund.sol\":2547:2605  if(hasRefunded[tokenId]) {... */\n    tag_184:\n      pop\n        /* \"contracts/ERC-721AWRefund.sol\":368:375  1 ether */\n      0x0de0b6b3a7640000\n      swap2\n        /* \"contracts/ERC-721AWRefund.sol\":2466:2637  function getRefundAmount(uint256 tokenId) public view returns(uint256) {... */\n      swap1\n      pop\n      jump\t// out\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7635:7733  function name() public view virtual override returns (string memory) {... */\n    tag_55:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7689:7702  string memory */\n      0x60\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7721:7726  _name */\n      0x02\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7714:7726  return _name */\n      dup1\n      sload\n      tag_186\n      swap1\n      tag_187\n      jump\t// in\n    tag_186:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_188\n      swap1\n      tag_187\n      jump\t// in\n    tag_188:\n      dup1\n      iszero\n      tag_189\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_190\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_189)\n    tag_190:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_191:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_191\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_189:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7635:7733  function name() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9091:9291  function getApproved(uint256 tokenId) public view override returns (address) {... */\n    tag_61:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9159:9166  address */\n      0x00\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9183:9199  _exists(tokenId) */\n      tag_193\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9191:9198  tokenId */\n      dup3\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9183:9190  _exists */\n      tag_194\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9183:9199  _exists(tokenId) */\n      jump\t// in\n    tag_193:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9178:9242  if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken() */\n      tag_195\n      jumpi\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9208:9242  ApprovalQueryForNonexistentToken() */\n      mload(0x40)\n      shl(0xe2, 0x33d1c039)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9178:9242  if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken() */\n    tag_195:\n      pop\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9260:9284  _tokenApprovals[tokenId] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9260:9275  _tokenApprovals */\n      0x06\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9260:9284  _tokenApprovals[tokenId] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9091:9291  function getApproved(uint256 tokenId) public view override returns (address) {... */\n      jump\t// out\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8668:9030  function approve(address to, uint256 tokenId) public override {... */\n    tag_68:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8740:8753  address owner */\n      0x00\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8756:8780  ERC721A.ownerOf(tokenId) */\n      tag_197\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8772:8779  tokenId */\n      dup3\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8756:8771  ERC721A.ownerOf */\n      tag_99\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8756:8780  ERC721A.ownerOf(tokenId) */\n      jump\t// in\n    tag_197:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8740:8780  address owner = ERC721A.ownerOf(tokenId) */\n      swap1\n      pop\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8800:8805  owner */\n      dup1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8794:8805  to == owner */\n      and\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8794:8796  to */\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8794:8805  to == owner */\n      and\n      sub\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8790:8838  if (to == owner) revert ApprovalToCurrentOwner() */\n      tag_198\n      jumpi\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8814:8838  ApprovalToCurrentOwner() */\n      mload(0x40)\n      shl(0xe2, 0x250fdee3)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8790:8838  if (to == owner) revert ApprovalToCurrentOwner() */\n    tag_198:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8853:8874  _msgSender() != owner */\n      dup3\n      and\n      eq\n      dup1\n      iszero\n      swap1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8853:8916  _msgSender() != owner && !isApprovedForAll(owner, _msgSender()) */\n      tag_201\n      jumpi\n      pop\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8879:8916  isApprovedForAll(owner, _msgSender()) */\n      tag_202\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8896:8901  owner */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9706:9868  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n      tag_172\n      jump\t// in\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8879:8916  isApprovedForAll(owner, _msgSender()) */\n    tag_202:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8878:8916  !isApprovedForAll(owner, _msgSender()) */\n      iszero\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8853:8916  _msgSender() != owner && !isApprovedForAll(owner, _msgSender()) */\n    tag_201:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8849:8985  if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {... */\n      iszero\n      tag_204\n      jumpi\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8939:8974  ApprovalCallerNotOwnerNorApproved() */\n      mload(0x40)\n      shl(0xe1, 0x67d9dca1)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8849:8985  if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {... */\n    tag_204:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8995:9023  _approve(to, tokenId, owner) */\n      tag_205\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9004:9006  to */\n      dup4\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9008:9015  tokenId */\n      dup4\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9017:9022  owner */\n      dup4\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8995:9003  _approve */\n      tag_206\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8995:9023  _approve(to, tokenId, owner) */\n      jump\t// in\n    tag_205:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8730:9030  {... */\n      pop\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8668:9030  function approve(address to, uint256 tokenId) public override {... */\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9930:10094  function transferFrom(... */\n    tag_81:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10059:10087  _transfer(from, to, tokenId) */\n      tag_205\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10069:10073  from */\n      dup4\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10075:10077  to */\n      dup4\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10079:10086  tokenId */\n      dup4\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10059:10068  _transfer */\n      tag_212\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10059:10087  _transfer(from, to, tokenId) */\n      jump\t// in\n        /* \"contracts/ERC-721AWRefund.sol\":1724:2262  function refund(uint256 tokenId) external {... */\n    tag_85:\n        /* \"contracts/ERC-721AWRefund.sol\":1802:1828  getRefundDeadline(tokenId) */\n      tag_214\n        /* \"contracts/ERC-721AWRefund.sol\":1820:1827  tokenId */\n      dup2\n        /* \"contracts/ERC-721AWRefund.sol\":1802:1819  getRefundDeadline */\n      tag_166\n        /* \"contracts/ERC-721AWRefund.sol\":1802:1828  getRefundDeadline(tokenId) */\n      jump\t// in\n    tag_214:\n        /* \"contracts/ERC-721AWRefund.sol\":1784:1799  block.timestamp */\n      timestamp\n        /* \"contracts/ERC-721AWRefund.sol\":1784:1828  block.timestamp < getRefundDeadline(tokenId) */\n      lt\n        /* \"contracts/ERC-721AWRefund.sol\":1776:1855  require(block.timestamp < getRefundDeadline(tokenId), \"Refund Period Expired.\") */\n      tag_215\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5363:5365   */\n      0x20\n        /* \"contracts/ERC-721AWRefund.sol\":1776:1855  require(block.timestamp < getRefundDeadline(tokenId), \"Refund Period Expired.\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5345:5366   */\n      mstore\n        /* \"#utility.yul\":5402:5404   */\n      0x16\n        /* \"#utility.yul\":5382:5400   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5375:5405   */\n      mstore\n      shl(0x51, 0x2932b33ab732102832b934b7b21022bc3834b932b217)\n        /* \"#utility.yul\":5421:5439   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5414:5466   */\n      mstore\n        /* \"#utility.yul\":5483:5501   */\n      0x64\n      add\n        /* \"contracts/ERC-721AWRefund.sol\":1776:1855  require(block.timestamp < getRefundDeadline(tokenId), \"Refund Period Expired.\") */\n    tag_216:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_215:\n        /* \"contracts/ERC-721AWRefund.sol\":1918:1934  ownerOf(tokenId) */\n      tag_218\n        /* \"contracts/ERC-721AWRefund.sol\":1926:1933  tokenId */\n      dup2\n        /* \"contracts/ERC-721AWRefund.sol\":1918:1925  ownerOf */\n      tag_99\n        /* \"contracts/ERC-721AWRefund.sol\":1918:1934  ownerOf(tokenId) */\n      jump\t// in\n    tag_218:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/ERC-721AWRefund.sol\":1904:1934  msg.sender == ownerOf(tokenId) */\n      and\n        /* \"contracts/ERC-721AWRefund.sol\":1904:1914  msg.sender */\n      caller\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/ERC-721AWRefund.sol\":1904:1934  msg.sender == ownerOf(tokenId) */\n      and\n      eq\n        /* \"contracts/ERC-721AWRefund.sol\":1896:1951  require(msg.sender == ownerOf(tokenId), \"Not your NFT\") */\n      tag_219\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5714:5716   */\n      0x20\n        /* \"contracts/ERC-721AWRefund.sol\":1896:1951  require(msg.sender == ownerOf(tokenId), \"Not your NFT\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5696:5717   */\n      mstore\n        /* \"#utility.yul\":5753:5755   */\n      0x0c\n        /* \"#utility.yul\":5733:5751   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5726:5756   */\n      mstore\n      shl(0xa2, 0x139bdd081e5bdd5c88139195)\n        /* \"#utility.yul\":5772:5790   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5765:5807   */\n      mstore\n        /* \"#utility.yul\":5824:5842   */\n      0x64\n      add\n        /* \"contracts/ERC-721AWRefund.sol\":1896:1951  require(msg.sender == ownerOf(tokenId), \"Not your NFT\") */\n      tag_216\n        /* \"#utility.yul\":5512:5848   */\n      jump\n        /* \"contracts/ERC-721AWRefund.sol\":1896:1951  require(msg.sender == ownerOf(tokenId), \"Not your NFT\") */\n    tag_219:\n        /* \"contracts/ERC-721AWRefund.sol\":1961:1981  uint256 refundAmount */\n      0x00\n        /* \"contracts/ERC-721AWRefund.sol\":1984:2008  getRefundAmount(tokenId) */\n      tag_222\n        /* \"contracts/ERC-721AWRefund.sol\":2000:2007  tokenId */\n      dup3\n        /* \"contracts/ERC-721AWRefund.sol\":1984:1999  getRefundAmount */\n      tag_50\n        /* \"contracts/ERC-721AWRefund.sol\":1984:2008  getRefundAmount(tokenId) */\n      jump\t// in\n    tag_222:\n        /* \"contracts/ERC-721AWRefund.sol\":2078:2091  refundAddress */\n      sload(0x0a)\n        /* \"contracts/ERC-721AWRefund.sol\":1961:2008  uint256 refundAmount = getRefundAmount(tokenId) */\n      swap1\n      swap2\n      pop\n        /* \"contracts/ERC-721AWRefund.sol\":2056:2101  _transfer(msg.sender, refundAddress, tokenId) */\n      tag_223\n      swap1\n        /* \"contracts/ERC-721AWRefund.sol\":2066:2076  msg.sender */\n      caller\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/ERC-721AWRefund.sol\":2078:2091  refundAddress */\n      and\n        /* \"contracts/ERC-721AWRefund.sol\":2093:2100  tokenId */\n      dup5\n        /* \"contracts/ERC-721AWRefund.sol\":2056:2065  _transfer */\n      tag_212\n        /* \"contracts/ERC-721AWRefund.sol\":2056:2101  _transfer(msg.sender, refundAddress, tokenId) */\n      jump\t// in\n    tag_223:\n        /* \"contracts/ERC-721AWRefund.sol\":2137:2157  hasRefunded[tokenId] */\n      0x00\n      dup3\n      dup2\n      mstore\n        /* \"contracts/ERC-721AWRefund.sol\":2137:2148  hasRefunded */\n      0x0c\n        /* \"contracts/ERC-721AWRefund.sol\":2137:2157  hasRefunded[tokenId] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/ERC-721AWRefund.sol\":2137:2164  hasRefunded[tokenId] = true */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"contracts/ERC-721AWRefund.sol\":2160:2164  true */\n      0x01\n        /* \"contracts/ERC-721AWRefund.sol\":2137:2164  hasRefunded[tokenId] = true */\n      or\n      swap1\n      sstore\n        /* \"contracts/ERC-721AWRefund.sol\":2203:2255  Address.sendValue(payable(msg.sender), refundAmount) */\n      tag_224\n        /* \"contracts/ERC-721AWRefund.sol\":2229:2239  msg.sender */\n      caller\n        /* \"contracts/ERC-721AWRefund.sol\":2242:2254  refundAmount */\n      dup3\n        /* \"contracts/ERC-721AWRefund.sol\":2203:2220  Address.sendValue */\n      tag_225\n        /* \"contracts/ERC-721AWRefund.sol\":2203:2255  Address.sendValue(payable(msg.sender), refundAmount) */\n      jump\t// in\n    tag_224:\n        /* \"contracts/ERC-721AWRefund.sol\":1766:2262  {... */\n      pop\n        /* \"contracts/ERC-721AWRefund.sol\":1724:2262  function refund(uint256 tokenId) external {... */\n      pop\n      jump\t// out\n        /* \"contracts/ERC-721AWRefund.sol\":1176:1718  function safeMint(uint256 quantity) public payable {... */\n    tag_88:\n        /* \"contracts/ERC-721AWRefund.sol\":1258:1278  mintPrice * quantity */\n      tag_227\n        /* \"contracts/ERC-721AWRefund.sol\":1270:1278  quantity */\n      dup2\n        /* \"contracts/ERC-721AWRefund.sol\":368:375  1 ether */\n      0x0de0b6b3a7640000\n        /* \"contracts/ERC-721AWRefund.sol\":1258:1278  mintPrice * quantity */\n      tag_228\n      jump\t// in\n    tag_227:\n        /* \"contracts/ERC-721AWRefund.sol\":1245:1254  msg.value */\n      callvalue\n        /* \"contracts/ERC-721AWRefund.sol\":1245:1278  msg.value >= mintPrice * quantity */\n      lt\n      iszero\n        /* \"contracts/ERC-721AWRefund.sol\":1237:1300  require(msg.value >= mintPrice * quantity, \"Not enough funds.\") */\n      tag_229\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6360:6362   */\n      0x20\n        /* \"contracts/ERC-721AWRefund.sol\":1237:1300  require(msg.value >= mintPrice * quantity, \"Not enough funds.\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6342:6363   */\n      mstore\n        /* \"#utility.yul\":6399:6401   */\n      0x11\n        /* \"#utility.yul\":6379:6397   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6372:6402   */\n      mstore\n      shl(0x79, 0x2737ba1032b737bab3b410333ab7323997)\n        /* \"#utility.yul\":6418:6436   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6411:6458   */\n      mstore\n        /* \"#utility.yul\":6475:6493   */\n      0x64\n      add\n        /* \"contracts/ERC-721AWRefund.sol\":1237:1300  require(msg.value >= mintPrice * quantity, \"Not enough funds.\") */\n      tag_216\n        /* \"#utility.yul\":6158:6499   */\n      jump\n        /* \"contracts/ERC-721AWRefund.sol\":1237:1300  require(msg.value >= mintPrice * quantity, \"Not enough funds.\") */\n    tag_229:\n        /* \"contracts/ERC-721AWRefund.sol\":1332:1342  msg.sender */\n      caller\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":5307:5314  uint256 */\n      0x00\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":5341:5360  _addressData[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/ERC-721AWRefund.sol\":422:423  5 */\n      0x05\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":5341:5360  _addressData[owner] */\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      swap2\n      keccak256\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":5341:5373  _addressData[owner].numberMinted */\n      sload\n        /* \"contracts/ERC-721AWRefund.sol\":1347:1355  quantity */\n      dup3\n      swap1\n      shl(0x40, 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":5341:5373  _addressData[owner].numberMinted */\n      swap1\n      div\n      0xffffffffffffffff\n      and\n        /* \"contracts/ERC-721AWRefund.sol\":1318:1355  _numberMinted(msg.sender ) + quantity */\n      tag_234\n      swap2\n      swap1\n      tag_235\n      jump\t// in\n    tag_234:\n        /* \"contracts/ERC-721AWRefund.sol\":1318:1373  _numberMinted(msg.sender ) + quantity <= maxMintPerUser */\n      gt\n      iszero\n        /* \"contracts/ERC-721AWRefund.sol\":1310:1388  require(_numberMinted(msg.sender ) + quantity <= maxMintPerUser, \"Mint Limit\") */\n      tag_236\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6836:6838   */\n      0x20\n        /* \"contracts/ERC-721AWRefund.sol\":1310:1388  require(_numberMinted(msg.sender ) + quantity <= maxMintPerUser, \"Mint Limit\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6818:6839   */\n      mstore\n        /* \"#utility.yul\":6875:6877   */\n      0x0a\n        /* \"#utility.yul\":6855:6873   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6848:6878   */\n      mstore\n      shl(0xb2, 0x135a5b9d08131a5b5a5d)\n        /* \"#utility.yul\":6894:6912   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6887:6927   */\n      mstore\n        /* \"#utility.yul\":6944:6962   */\n      0x64\n      add\n        /* \"contracts/ERC-721AWRefund.sol\":1310:1388  require(_numberMinted(msg.sender ) + quantity <= maxMintPerUser, \"Mint Limit\") */\n      tag_216\n        /* \"#utility.yul\":6634:6968   */\n      jump\n        /* \"contracts/ERC-721AWRefund.sol\":1310:1388  require(_numberMinted(msg.sender ) + quantity <= maxMintPerUser, \"Mint Limit\") */\n    tag_236:\n        /* \"contracts/ERC-721AWRefund.sol\":469:472  100 */\n      0x64\n        /* \"contracts/ERC-721AWRefund.sol\":1406:1420  _totalMinted() */\n      tag_239\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":4310:4317  uint256 */\n      0x00\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":4492:4505  _currentIndex */\n      sload\n      swap1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":4263:4540  function _totalMinted() internal view returns (uint256) {... */\n      jump\n        /* \"contracts/ERC-721AWRefund.sol\":1406:1420  _totalMinted() */\n    tag_239:\n        /* \"contracts/ERC-721AWRefund.sol\":1406:1437  _totalMinted() <= maxMintSupply */\n      gt\n      iszero\n        /* \"contracts/ERC-721AWRefund.sol\":1398:1466  require(_totalMinted() <= maxMintSupply, \"Supply Exceed. Sold out.\") */\n      tag_241\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":7175:7177   */\n      0x20\n        /* \"contracts/ERC-721AWRefund.sol\":1398:1466  require(_totalMinted() <= maxMintSupply, \"Supply Exceed. Sold out.\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7157:7178   */\n      mstore\n        /* \"#utility.yul\":7214:7216   */\n      0x18\n        /* \"#utility.yul\":7194:7212   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7187:7217   */\n      mstore\n        /* \"#utility.yul\":7253:7279   */\n      0x537570706c79204578636565642e20536f6c64206f75742e0000000000000000\n        /* \"#utility.yul\":7233:7251   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7226:7280   */\n      mstore\n        /* \"#utility.yul\":7297:7315   */\n      0x64\n      add\n        /* \"contracts/ERC-721AWRefund.sol\":1398:1466  require(_totalMinted() <= maxMintSupply, \"Supply Exceed. Sold out.\") */\n      tag_216\n        /* \"#utility.yul\":6973:7321   */\n      jump\n        /* \"contracts/ERC-721AWRefund.sol\":1398:1466  require(_totalMinted() <= maxMintSupply, \"Supply Exceed. Sold out.\") */\n    tag_241:\n        /* \"contracts/ERC-721AWRefund.sol\":1477:1508  _safeMint(msg.sender, quantity) */\n      tag_244\n        /* \"contracts/ERC-721AWRefund.sol\":1487:1497  msg.sender */\n      caller\n        /* \"contracts/ERC-721AWRefund.sol\":1499:1507  quantity */\n      dup3\n        /* \"contracts/ERC-721AWRefund.sol\":1477:1486  _safeMint */\n      tag_245\n        /* \"contracts/ERC-721AWRefund.sol\":1477:1508  _safeMint(msg.sender, quantity) */\n      jump\t// in\n    tag_244:\n        /* \"contracts/ERC-721AWRefund.sol\":1539:1569  block.timestamp + refundPeriod */\n      tag_246\n        /* \"contracts/ERC-721AWRefund.sol\":515:524  3 minutes */\n      0xb4\n        /* \"contracts/ERC-721AWRefund.sol\":1539:1554  block.timestamp */\n      timestamp\n        /* \"contracts/ERC-721AWRefund.sol\":1539:1569  block.timestamp + refundPeriod */\n      tag_235\n      jump\t// in\n    tag_246:\n        /* \"contracts/ERC-721AWRefund.sol\":1518:1536  refundEndTimeStamp */\n      0x09\n        /* \"contracts/ERC-721AWRefund.sol\":1518:1569  refundEndTimeStamp = block.timestamp + refundPeriod */\n      sstore\n        /* \"contracts/ERC-721AWRefund.sol\":1583:1592  uint256 i */\n      0x00\n        /* \"contracts/ERC-721AWRefund.sol\":1593:1606  _currentIndex */\n      dup1\n      sload\n        /* \"contracts/ERC-721AWRefund.sol\":1593:1617  _currentIndex - quantity */\n      tag_250\n      swap1\n        /* \"contracts/ERC-721AWRefund.sol\":1609:1617  quantity */\n      dup4\n      swap1\n        /* \"contracts/ERC-721AWRefund.sol\":1593:1617  _currentIndex - quantity */\n      tag_251\n      jump\t// in\n    tag_250:\n        /* \"contracts/ERC-721AWRefund.sol\":1583:1617  uint256 i=_currentIndex - quantity */\n      swap1\n      pop\n        /* \"contracts/ERC-721AWRefund.sol\":1579:1711  for(uint256 i=_currentIndex - quantity; i < _currentIndex; i++) {... */\n    tag_247:\n        /* \"contracts/ERC-721AWRefund.sol\":1623:1636  _currentIndex */\n      sload(0x00)\n        /* \"contracts/ERC-721AWRefund.sol\":1619:1620  i */\n      dup2\n        /* \"contracts/ERC-721AWRefund.sol\":1619:1636  i < _currentIndex */\n      lt\n        /* \"contracts/ERC-721AWRefund.sol\":1579:1711  for(uint256 i=_currentIndex - quantity; i < _currentIndex; i++) {... */\n      iszero\n      tag_224\n      jumpi\n        /* \"contracts/ERC-721AWRefund.sol\":1682:1700  refundEndTimeStamp */\n      sload(0x09)\n        /* \"contracts/ERC-721AWRefund.sol\":1657:1679  refundEndTimestamps[i] */\n      0x00\n      dup3\n      dup2\n      mstore\n        /* \"contracts/ERC-721AWRefund.sol\":1657:1676  refundEndTimestamps */\n      0x0b\n        /* \"contracts/ERC-721AWRefund.sol\":1657:1679  refundEndTimestamps[i] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/ERC-721AWRefund.sol\":1657:1700  refundEndTimestamps[i] = refundEndTimeStamp */\n      sstore\n        /* \"contracts/ERC-721AWRefund.sol\":1677:1678  i */\n      dup1\n        /* \"contracts/ERC-721AWRefund.sol\":1638:1641  i++ */\n      tag_252\n        /* \"contracts/ERC-721AWRefund.sol\":1677:1678  i */\n      dup2\n        /* \"contracts/ERC-721AWRefund.sol\":1638:1641  i++ */\n      tag_253\n      jump\t// in\n    tag_252:\n      swap2\n      pop\n      pop\n        /* \"contracts/ERC-721AWRefund.sol\":1579:1711  for(uint256 i=_currentIndex - quantity; i < _currentIndex; i++) {... */\n      jump(tag_247)\n        /* \"contracts/ERC-721AWRefund.sol\":2643:2921  function withdraw() external onlyOwner {... */\n    tag_91:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_255\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_256\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_255:\n        /* \"contracts/ERC-721AWRefund.sol\":2718:2736  refundEndTimeStamp */\n      sload(0x09)\n        /* \"contracts/ERC-721AWRefund.sol\":2700:2715  block.timestamp */\n      timestamp\n        /* \"contracts/ERC-721AWRefund.sol\":2700:2736  block.timestamp > refundEndTimeStamp */\n      gt\n        /* \"contracts/ERC-721AWRefund.sol\":2692:2772  require(block.timestamp > refundEndTimeStamp, \"It's not past the refund period\") */\n      tag_258\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":7801:7803   */\n      0x20\n        /* \"contracts/ERC-721AWRefund.sol\":2692:2772  require(block.timestamp > refundEndTimeStamp, \"It's not past the refund period\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7783:7804   */\n      mstore\n        /* \"#utility.yul\":7840:7842   */\n      0x1f\n        /* \"#utility.yul\":7820:7838   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7813:7843   */\n      mstore\n        /* \"#utility.yul\":7879:7912   */\n      0x49742773206e6f7420706173742074686520726566756e6420706572696f6400\n        /* \"#utility.yul\":7859:7877   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7852:7913   */\n      mstore\n        /* \"#utility.yul\":7930:7948   */\n      0x64\n      add\n        /* \"contracts/ERC-721AWRefund.sol\":2692:2772  require(block.timestamp > refundEndTimeStamp, \"It's not past the refund period\") */\n      tag_216\n        /* \"#utility.yul\":7599:7954   */\n      jump\n        /* \"contracts/ERC-721AWRefund.sol\":2692:2772  require(block.timestamp > refundEndTimeStamp, \"It's not past the refund period\") */\n    tag_258:\n        /* \"contracts/ERC-721AWRefund.sol\":2800:2821  address(this).balance */\n      selfbalance\n        /* \"contracts/ERC-721AWRefund.sol\":2867:2914  Address.sendValue(payable(msg.sender), balance) */\n      tag_261\n        /* \"contracts/ERC-721AWRefund.sol\":2893:2903  msg.sender */\n      caller\n        /* \"contracts/ERC-721AWRefund.sol\":2800:2821  address(this).balance */\n      dup3\n        /* \"contracts/ERC-721AWRefund.sol\":2867:2884  Address.sendValue */\n      tag_225\n        /* \"contracts/ERC-721AWRefund.sol\":2867:2914  Address.sendValue(payable(msg.sender), balance) */\n      jump\t// in\n    tag_261:\n        /* \"contracts/ERC-721AWRefund.sol\":2682:2921  {... */\n      pop\n        /* \"contracts/ERC-721AWRefund.sol\":2643:2921  function withdraw() external onlyOwner {... */\n      jump\t// out\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10160:10339  function safeTransferFrom(... */\n    tag_95:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10293:10332  safeTransferFrom(from, to, tokenId, '') */\n      tag_205\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10310:10314  from */\n      dup4\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10316:10318  to */\n      dup4\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10320:10327  tokenId */\n      dup4\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10293:10332  safeTransferFrom(from, to, tokenId, '') */\n      mload(0x40)\n      dup1\n      0x20\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      pop\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10293:10309  safeTransferFrom */\n      tag_139\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10293:10332  safeTransferFrom(from, to, tokenId, '') */\n      jump\t// in\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7450:7573  function ownerOf(uint256 tokenId) public view override returns (address) {... */\n    tag_99:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7514:7521  address */\n      0x00\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7540:7561  _ownershipOf(tokenId) */\n      tag_265\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7553:7560  tokenId */\n      dup3\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7540:7552  _ownershipOf */\n      tag_266\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7540:7561  _ownershipOf(tokenId) */\n      jump\t// in\n    tag_265:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7540:7566  _ownershipOf(tokenId).addr */\n      mload\n      swap3\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7450:7573  function ownerOf(uint256 tokenId) public view override returns (address) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":4966:5169  function balanceOf(address owner) public view override returns (uint256) {... */\n    tag_113:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":5030:5037  uint256 */\n      0x00\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":5053:5072  owner == address(0) */\n      dup3\n      and\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":5049:5109  if (owner == address(0)) revert BalanceQueryForZeroAddress() */\n      tag_268\n      jumpi\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":5081:5109  BalanceQueryForZeroAddress() */\n      mload(0x40)\n      shl(0xe2, 0x23d3ad81)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":5049:5109  if (owner == address(0)) revert BalanceQueryForZeroAddress() */\n    tag_268:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":5134:5153  _addressData[owner] */\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":5134:5146  _addressData */\n      0x05\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":5134:5153  _addressData[owner] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":5134:5161  _addressData[owner].balance */\n      sload\n      0xffffffffffffffff\n      and\n      swap1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":4966:5169  function balanceOf(address owner) public view override returns (uint256) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1824:1925  function renounceOwnership() public virtual onlyOwner {... */\n    tag_117:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_270\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_256\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_270:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1888:1918  _transferOwnership(address(0)) */\n      tag_272\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1915:1916  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1888:1906  _transferOwnership */\n      tag_273\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1888:1918  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_272:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1824:1925  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7797:7899  function symbol() public view virtual override returns (string memory) {... */\n    tag_124:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7853:7866  string memory */\n      0x60\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7885:7892  _symbol */\n      0x03\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7878:7892  return _symbol */\n      dup1\n      sload\n      tag_186\n      swap1\n      tag_187\n      jump\t// in\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9358:9640  function setApprovalForAll(address operator, bool approved) public virtual override {... */\n    tag_130:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9456:9480  operator == _msgSender() */\n      dup4\n      and\n      sub\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9452:9506  if (operator == _msgSender()) revert ApproveToCaller() */\n      tag_283\n      jumpi\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9489:9506  ApproveToCaller() */\n      mload(0x40)\n      shl(0xe0, 0xb06307db)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9452:9506  if (operator == _msgSender()) revert ApproveToCaller() */\n    tag_283:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9517:9549  _operatorApprovals[_msgSender()] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9517:9535  _operatorApprovals */\n      0x07\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9517:9549  _operatorApprovals[_msgSender()] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9517:9559  _operatorApprovals[_msgSender()][operator] */\n      dup8\n      and\n      dup1\n      dup6\n      mstore\n      swap1\n      dup4\n      mstore\n      swap3\n      dup2\n      swap1\n      keccak256\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9517:9570  _operatorApprovals[_msgSender()][operator] = approved */\n      dup1\n      sload\n      not(0xff)\n      and\n      dup7\n      iszero\n      iszero\n      swap1\n      dup2\n      or\n      swap1\n      swap2\n      sstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9585:9633  ApprovalForAll(_msgSender(), operator, approved) */\n      swap1\n      mload\n        /* \"#utility.yul\":540:581   */\n      swap1\n      dup2\n      mstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9517:9559  _operatorApprovals[_msgSender()][operator] */\n      swap2\n      swap3\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      swap2\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9585:9633  ApprovalForAll(_msgSender(), operator, approved) */\n      0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31\n      swap2\n        /* \"#utility.yul\":513:531   */\n      add\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9585:9633  ApprovalForAll(_msgSender(), operator, approved) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9358:9640  function setApprovalForAll(address operator, bool approved) public virtual override {... */\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10405:10764  function safeTransferFrom(... */\n    tag_139:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10566:10594  _transfer(from, to, tokenId) */\n      tag_288\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10576:10580  from */\n      dup5\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10582:10584  to */\n      dup5\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10586:10593  tokenId */\n      dup5\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10566:10575  _transfer */\n      tag_212\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10566:10594  _transfer(from, to, tokenId) */\n      jump\t// in\n    tag_288:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10608:10621  to.isContract */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1702:1721  account.code.length */\n      extcodesize\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1702:1725  account.code.length > 0 */\n      iszero\n      iszero\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10608:10684  to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data) */\n      dup1\n      iszero\n      tag_291\n      jumpi\n      pop\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10628:10684  _checkContractOnERC721Received(from, to, tokenId, _data) */\n      tag_292\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10659:10663  from */\n      dup5\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10665:10667  to */\n      dup5\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10669:10676  tokenId */\n      dup5\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10678:10683  _data */\n      dup5\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10628:10658  _checkContractOnERC721Received */\n      tag_293\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10628:10684  _checkContractOnERC721Received(from, to, tokenId, _data) */\n      jump\t// in\n    tag_292:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10627:10684  !_checkContractOnERC721Received(from, to, tokenId, _data) */\n      iszero\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10608:10684  to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data) */\n    tag_291:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10604:10758  if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {... */\n      iszero\n      tag_294\n      jumpi\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10707:10747  TransferToNonERC721ReceiverImplementer() */\n      mload(0x40)\n      shl(0xe1, 0x68d2bf6b)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10604:10758  if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {... */\n    tag_294:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10405:10764  function safeTransferFrom(... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7965:8278  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {... */\n    tag_152:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8038:8051  string memory */\n      0x60\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8068:8084  _exists(tokenId) */\n      tag_296\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8076:8083  tokenId */\n      dup3\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8068:8075  _exists */\n      tag_194\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8068:8084  _exists(tokenId) */\n      jump\t// in\n    tag_296:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8063:8122  if (!_exists(tokenId)) revert URIQueryForNonexistentToken() */\n      tag_297\n      jumpi\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8093:8122  URIQueryForNonexistentToken() */\n      mload(0x40)\n      shl(0xe4, 0x0a14c4b5)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8063:8122  if (!_exists(tokenId)) revert URIQueryForNonexistentToken() */\n    tag_297:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8133:8154  string memory baseURI */\n      0x00\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8157:8167  _baseURI() */\n      tag_298\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8157:8165  _baseURI */\n      tag_299\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8157:8167  _baseURI() */\n      jump\t// in\n    tag_298:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8133:8167  string memory baseURI = _baseURI() */\n      swap1\n      pop\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8190:8197  baseURI */\n      dup1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8184:8205  bytes(baseURI).length */\n      mload\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8209:8210  0 */\n      0x00\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8184:8210  bytes(baseURI).length != 0 */\n      sub\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8184:8271  bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '' */\n      tag_300\n      jumpi\n      mload(0x40)\n      dup1\n      0x20\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      pop\n      jump(tag_301)\n    tag_300:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8237:8244  baseURI */\n      dup1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8246:8264  tokenId.toString() */\n      tag_302\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8246:8253  tokenId */\n      dup5\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8246:8262  tokenId.toString */\n      tag_303\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8246:8264  tokenId.toString() */\n      jump\t// in\n    tag_302:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8220:8265  abi.encodePacked(baseURI, tokenId.toString()) */\n      add(0x20, mload(0x40))\n      tag_304\n      swap3\n      swap2\n      swap1\n      tag_305\n      jump\t// in\n    tag_304:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8184:8271  bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '' */\n    tag_301:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8177:8271  return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '' */\n      swap4\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7965:8278  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC-721AWRefund.sol\":2268:2460  function getRefundDeadline(uint256 tokenId) public view returns(uint256) {... */\n    tag_166:\n        /* \"contracts/ERC-721AWRefund.sol\":2332:2339  uint256 */\n      0x00\n        /* \"contracts/ERC-721AWRefund.sol\":2354:2374  hasRefunded[tokenId] */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/ERC-721AWRefund.sol\":2354:2365  hasRefunded */\n      0x0c\n        /* \"contracts/ERC-721AWRefund.sol\":2354:2374  hasRefunded[tokenId] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n      sload\n      0xff\n      and\n        /* \"contracts/ERC-721AWRefund.sol\":2351:2409  if(hasRefunded[tokenId]) {... */\n      iszero\n      tag_307\n      jumpi\n      pop\n        /* \"contracts/ERC-721AWRefund.sol\":2397:2398  0 */\n      0x00\n      swap2\n        /* \"contracts/ERC-721AWRefund.sol\":2268:2460  function getRefundDeadline(uint256 tokenId) public view returns(uint256) {... */\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/ERC-721AWRefund.sol\":2351:2409  if(hasRefunded[tokenId]) {... */\n    tag_307:\n      pop\n        /* \"contracts/ERC-721AWRefund.sol\":2425:2453  refundEndTimestamps[tokenId] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/ERC-721AWRefund.sol\":2425:2444  refundEndTimestamps */\n      0x0b\n        /* \"contracts/ERC-721AWRefund.sol\":2425:2453  refundEndTimestamps[tokenId] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"contracts/ERC-721AWRefund.sol\":2268:2460  function getRefundDeadline(uint256 tokenId) public view returns(uint256) {... */\n      jump\t// out\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9706:9868  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n    tag_172:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9826:9851  _operatorApprovals[owner] */\n      swap2\n      dup3\n      and\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9803:9807  bool */\n      0x00\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9826:9851  _operatorApprovals[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9826:9844  _operatorApprovals */\n      0x07\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9826:9851  _operatorApprovals[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9826:9861  _operatorApprovals[owner][operator] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      0xff\n      and\n      swap1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9706:9868  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2074:2272  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_177:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_310\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_256\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_310:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2162:2184  newOwner != address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2154:2227  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_312\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":8662:8664   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2154:2227  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":8644:8665   */\n      mstore\n        /* \"#utility.yul\":8701:8703   */\n      0x26\n        /* \"#utility.yul\":8681:8699   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":8674:8704   */\n      mstore\n        /* \"#utility.yul\":8740:8774   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":8720:8738   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":8713:8775   */\n      mstore\n      shl(0xd0, 0x646472657373)\n        /* \"#utility.yul\":8791:8809   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":8784:8820   */\n      mstore\n        /* \"#utility.yul\":8837:8856   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2154:2227  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_216\n        /* \"#utility.yul\":8460:8862   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2154:2227  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n    tag_312:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2237:2265  _transferOwnership(newOwner) */\n      tag_261\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2256:2264  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2237:2255  _transferOwnership */\n      tag_273\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2237:2265  _transferOwnership(newOwner) */\n      jump\t// in\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":11010:11194  function _exists(uint256 tokenId) internal view returns (bool) {... */\n    tag_194:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":11067:11071  bool */\n      0x00\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":11130:11143  _currentIndex */\n      dup1\n      sload\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":11120:11127  tokenId */\n      dup3\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":11120:11143  tokenId < _currentIndex */\n      lt\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":11090:11187  _startTokenId() <= tokenId && tokenId < _currentIndex &&... */\n      dup1\n      iszero\n      tag_181\n      jumpi\n      pop\n      pop\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":11160:11180  _ownerships[tokenId] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":11160:11171  _ownerships */\n      0x04\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":11160:11180  _ownerships[tokenId] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":11160:11187  _ownerships[tokenId].burned */\n      sload\n      shl(0xe0, 0x01)\n      swap1\n      div\n      0xff\n      and\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":11159:11187  !_ownerships[tokenId].burned */\n      iszero\n      swap1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":11010:11194  function _exists(uint256 tokenId) internal view returns (bool) {... */\n      jump\t// out\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":18963:19153  function _approve(... */\n    tag_206:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":19074:19098  _tokenApprovals[tokenId] */\n      0x00\n      dup3\n      dup2\n      mstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":19074:19089  _tokenApprovals */\n      0x06\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":19074:19098  _tokenApprovals[tokenId] */\n      0x20\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":19074:19103  _tokenApprovals[tokenId] = to */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      dup8\n      dup2\n      and\n      swap2\n      dup3\n      or\n      swap1\n      swap3\n      sstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":19118:19146  Approval(owner, to, tokenId) */\n      swap2\n      mload\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":19074:19098  _tokenApprovals[tokenId] */\n      dup6\n      swap4\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":19118:19146  Approval(owner, to, tokenId) */\n      swap2\n      dup6\n      and\n      swap2\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      swap2\n      log4\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":18963:19153  function _approve(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14032:16115  function _transfer(... */\n    tag_212:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14143:14178  TokenOwnership memory prevOwnership */\n      0x00\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14181:14202  _ownershipOf(tokenId) */\n      tag_325\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14194:14201  tokenId */\n      dup3\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14181:14193  _ownershipOf */\n      tag_266\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14181:14202  _ownershipOf(tokenId) */\n      jump\t// in\n    tag_325:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14143:14202  TokenOwnership memory prevOwnership = _ownershipOf(tokenId) */\n      swap1\n      pop\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14239:14243  from */\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14217:14243  prevOwnership.addr != from */\n      and\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14217:14230  prevOwnership */\n      dup2\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14217:14235  prevOwnership.addr */\n      0x00\n      add\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14217:14243  prevOwnership.addr != from */\n      and\n      eq\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14213:14280  if (prevOwnership.addr != from) revert TransferFromIncorrectOwner() */\n      tag_326\n      jumpi\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14252:14280  TransferFromIncorrectOwner() */\n      mload(0x40)\n      shl(0xe8, 0xa11481)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14213:14280  if (prevOwnership.addr != from) revert TransferFromIncorrectOwner() */\n    tag_326:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14291:14313  bool isApprovedOrOwner */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14317:14337  _msgSender() == from */\n      dup7\n      and\n      eq\n      dup1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14317:14389  _msgSender() == from ||... */\n      tag_329\n      jumpi\n      pop\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14353:14389  isApprovedForAll(from, _msgSender()) */\n      tag_329\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14370:14374  from */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9706:9868  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n      tag_172\n      jump\t// in\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14353:14389  isApprovedForAll(from, _msgSender()) */\n    tag_329:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14317:14441  _msgSender() == from ||... */\n      dup1\n      tag_331\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14405:14425  getApproved(tokenId) */\n      tag_333\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14417:14424  tokenId */\n      dup5\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14405:14416  getApproved */\n      tag_61\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14405:14425  getApproved(tokenId) */\n      jump\t// in\n    tag_333:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14405:14441  getApproved(tokenId) == _msgSender() */\n      and\n      eq\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14317:14441  _msgSender() == from ||... */\n    tag_331:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14291:14442  bool isApprovedOrOwner = (_msgSender() == from ||... */\n      swap1\n      pop\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14458:14475  isApprovedOrOwner */\n      dup1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14453:14519  if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved() */\n      tag_334\n      jumpi\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14484:14519  TransferCallerNotOwnerNorApproved() */\n      mload(0x40)\n      shl(0xe1, 0x2ce44b5f)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14453:14519  if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved() */\n    tag_334:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14533:14549  to == address(0) */\n      dup5\n      and\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14529:14581  if (to == address(0)) revert TransferToZeroAddress() */\n      tag_335\n      jumpi\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14558:14581  TransferToZeroAddress() */\n      mload(0x40)\n      shl(0xe2, 0x3a954ecd)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14529:14581  if (to == address(0)) revert TransferToZeroAddress() */\n    tag_335:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14697:14732  _approve(address(0), tokenId, from) */\n      tag_338\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14714:14715  0 */\n      0x00\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14718:14725  tokenId */\n      dup5\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14727:14731  from */\n      dup8\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14697:14705  _approve */\n      tag_206\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14697:14732  _approve(address(0), tokenId, from) */\n      jump\t// in\n    tag_338:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15022:15040  _addressData[from] */\n      dup6\n      dup2\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15022:15034  _addressData */\n      0x05\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15022:15040  _addressData[from] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15022:15053  _addressData[from].balance -= 1 */\n      dup1\n      sload\n      not(0xffffffffffffffff)\n      dup1\n      dup3\n      and\n      0xffffffffffffffff\n      swap3\n      dup4\n      and\n      not(0x00)\n      add\n      dup4\n      and\n      or\n      swap1\n      swap3\n      sstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15067:15083  _addressData[to] */\n      dup10\n      dup7\n      and\n      dup1\n      dup7\n      mstore\n      dup4\n      dup7\n      keccak256\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15067:15096  _addressData[to].balance += 1 */\n      dup1\n      sload\n      swap4\n      dup5\n      and\n      swap4\n      dup4\n      and\n      0x01\n      swap1\n      dup2\n      add\n      dup5\n      and\n      swap5\n      swap1\n      swap5\n      or\n      swap1\n      sstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15145:15165  _ownerships[tokenId] */\n      dup10\n      dup7\n      mstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15145:15156  _ownerships */\n      0x04\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15145:15165  _ownerships[tokenId] */\n      swap1\n      swap5\n      mstore\n      dup3\n      dup6\n      keccak256\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15179:15197  currSlot.addr = to */\n      dup1\n      sload\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15211:15260  currSlot.startTimestamp = uint64(block.timestamp) */\n      and\n      swap1\n      swap5\n      or\n      shl(0xa0, 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15244:15259  block.timestamp */\n      timestamp\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15211:15260  currSlot.startTimestamp = uint64(block.timestamp) */\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      mul\n      or\n      dup4\n      sstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15530:15541  tokenId + 1 */\n      dup8\n      add\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15589:15613  _ownerships[nextTokenId] */\n      dup1\n      dup5\n      mstore\n      swap3\n      keccak256\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15631:15644  nextSlot.addr */\n      dup1\n      sload\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15145:15165  _ownerships[tokenId] */\n      swap2\n      swap4\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15589:15613  _ownerships[nextTokenId] */\n      swap1\n      swap2\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15631:15644  nextSlot.addr */\n      and\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15627:16004  if (nextSlot.addr == address(0)) {... */\n      tag_340\n      jumpi\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15838:15851  _currentIndex */\n      sload(0x00)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15823:15834  nextTokenId */\n      dup3\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15823:15851  nextTokenId != _currentIndex */\n      eq\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15819:15990  if (nextTokenId != _currentIndex) {... */\n      tag_340\n      jumpi\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15875:15895  nextSlot.addr = from */\n      dup1\n      sload\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15943:15971  prevOwnership.startTimestamp */\n      0x20\n      dup7\n      add\n      mload\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15917:15971  nextSlot.startTimestamp = prevOwnership.startTimestamp */\n      0xffffffffffffffff\n      and\n      shl(0xa0, 0x01)\n      mul\n      not(sub(shl(0xe0, 0x01), 0x01))\n      swap1\n      swap2\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15875:15895  nextSlot.addr = from */\n      dup11\n      and\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15917:15971  nextSlot.startTimestamp = prevOwnership.startTimestamp */\n      or\n      or\n      dup2\n      sstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15819:15990  if (nextTokenId != _currentIndex) {... */\n    tag_340:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14998:16014  unchecked {... */\n      pop\n      pop\n      pop\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":16048:16055  tokenId */\n      dup3\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":16044:16046  to */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":16029:16056  Transfer(from, to, tokenId) */\n      and\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":16038:16042  from */\n      dup7\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":16029:16056  Transfer(from, to, tokenId) */\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log4\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":16066:16108  _afterTokenTransfers(from, to, tokenId, 1) */\n    tag_341:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14133:16115  {... */\n      pop\n      pop\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14032:16115  function _transfer(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2647:2959  function sendValue(address payable recipient, uint256 amount) internal {... */\n    tag_225:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2761:2767  amount */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2736:2757  address(this).balance */\n      selfbalance\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2736:2767  address(this).balance >= amount */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2728:2801  require(address(this).balance >= amount, \"Address: insufficient balance\") */\n      tag_344\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":9069:9071   */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2728:2801  require(address(this).balance >= amount, \"Address: insufficient balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":9051:9072   */\n      mstore\n        /* \"#utility.yul\":9108:9110   */\n      0x1d\n        /* \"#utility.yul\":9088:9106   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":9081:9111   */\n      mstore\n        /* \"#utility.yul\":9147:9178   */\n      0x416464726573733a20696e73756666696369656e742062616c616e6365000000\n        /* \"#utility.yul\":9127:9145   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":9120:9179   */\n      mstore\n        /* \"#utility.yul\":9196:9214   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2728:2801  require(address(this).balance >= amount, \"Address: insufficient balance\") */\n      tag_216\n        /* \"#utility.yul\":8867:9220   */\n      jump\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2728:2801  require(address(this).balance >= amount, \"Address: insufficient balance\") */\n    tag_344:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2813:2825  bool success */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2831:2840  recipient */\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2831:2845  recipient.call */\n      and\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2853:2859  amount */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2831:2864  recipient.call{value: amount}(\"\") */\n      mload(0x40)\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_351\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_350)\n    tag_351:\n      0x60\n      swap2\n      pop\n    tag_350:\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2812:2864  (bool success, ) = recipient.call{value: amount}(\"\") */\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2882:2889  success */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2874:2952  require(success, \"Address: unable to send value, recipient may have reverted\") */\n      tag_205\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":9637:9639   */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2874:2952  require(success, \"Address: unable to send value, recipient may have reverted\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":9619:9640   */\n      mstore\n        /* \"#utility.yul\":9676:9678   */\n      0x3a\n        /* \"#utility.yul\":9656:9674   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":9649:9679   */\n      mstore\n        /* \"#utility.yul\":9715:9749   */\n      0x416464726573733a20756e61626c6520746f2073656e642076616c75652c2072\n        /* \"#utility.yul\":9695:9713   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":9688:9750   */\n      mstore\n        /* \"#utility.yul\":9786:9814   */\n      0x6563697069656e74206d61792068617665207265766572746564000000000000\n        /* \"#utility.yul\":9766:9784   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":9759:9815   */\n      mstore\n        /* \"#utility.yul\":9832:9851   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2874:2952  require(success, \"Address: unable to send value, recipient may have reverted\") */\n      tag_216\n        /* \"#utility.yul\":9435:9857   */\n      jump\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":11200:11302  function _safeMint(address to, uint256 quantity) internal {... */\n    tag_245:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":11268:11295  _safeMint(to, quantity, '') */\n      tag_224\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":11278:11280  to */\n      dup3\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":11282:11290  quantity */\n      dup3\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":11268:11295  _safeMint(to, quantity, '') */\n      mload(0x40)\n      dup1\n      0x20\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      pop\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":11268:11277  _safeMint */\n      tag_360\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":11268:11295  _safeMint(to, quantity, '') */\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1359:1489  function _checkOwner() internal view virtual {... */\n    tag_256:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1279  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x08))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1445  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1414:1482  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_272\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":10064:10066   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1414:1482  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":10046:10067   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":10083:10101   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":10076:10106   */\n      mstore\n        /* \"#utility.yul\":10142:10176   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":10122:10140   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":10115:10177   */\n      mstore\n        /* \"#utility.yul\":10194:10212   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1414:1482  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_216\n        /* \"#utility.yul\":9862:10218   */\n      jump\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":6309:7393  function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {... */\n    tag_266:\n      0x40\n      dup1\n      mload\n      0x60\n      dup2\n      add\n      dup3\n      mstore\n      0x00\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      swap2\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":6419:6426  tokenId */\n      dup2\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":6499:6512  _currentIndex */\n      sload(0x00)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":6492:6496  curr */\n      dup2\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":6492:6512  curr < _currentIndex */\n      lt\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":6461:7329  if (_startTokenId() <= curr && curr < _currentIndex) {... */\n      iszero\n      tag_372\n      jumpi\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":6532:6563  TokenOwnership memory ownership */\n      0x00\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":6566:6583  _ownerships[curr] */\n      dup2\n      dup2\n      mstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":6566:6577  _ownerships */\n      0x04\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":6566:6583  _ownerships[curr] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":6532:6583  TokenOwnership memory ownership = _ownerships[curr] */\n      dup3\n      mload\n      0x60\n      dup2\n      add\n      dup5\n      mstore\n      swap1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup2\n      and\n      dup3\n      mstore\n      shl(0xa0, 0x01)\n      dup2\n      div\n      0xffffffffffffffff\n      and\n      swap3\n      dup3\n      add\n      swap3\n      swap1\n      swap3\n      mstore\n      shl(0xe0, 0x01)\n      swap1\n      swap2\n      div\n      0xff\n      and\n      iszero\n      iszero\n      swap2\n      dup2\n      add\n      dup3\n      swap1\n      mstore\n      swap1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":6601:7315  if (!ownership.burned) {... */\n      tag_376\n      jumpi\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":6650:6664  ownership.addr */\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":6650:6678  ownership.addr != address(0) */\n      and\n      iszero\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":6646:6745  if (ownership.addr != address(0)) {... */\n      tag_374\n      jumpi\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":6713:6722  ownership */\n      swap4\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":6309:7393  function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":6646:6745  if (ownership.addr != address(0)) {... */\n    tag_374:\n      pop\n      not(0x00)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7081:7087  curr-- */\n      add\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7125:7142  _ownerships[curr] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7125:7136  _ownerships */\n      0x04\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7125:7142  _ownerships[curr] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7113:7142  ownership = _ownerships[curr] */\n      dup3\n      mload\n      0x60\n      dup2\n      add\n      dup5\n      mstore\n      swap1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup2\n      and\n      dup1\n      dup4\n      mstore\n      shl(0xa0, 0x01)\n      dup3\n      div\n      0xffffffffffffffff\n      and\n      swap4\n      dup4\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      shl(0xe0, 0x01)\n      swap1\n      div\n      0xff\n      and\n      iszero\n      iszero\n      swap3\n      dup2\n      add\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7172:7200  ownership.addr != address(0) */\n      iszero\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7168:7275  if (ownership.addr != address(0)) {... */\n      tag_377\n      jumpi\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7239:7248  ownership */\n      swap4\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":6309:7393  function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7168:7275  if (ownership.addr != address(0)) {... */\n    tag_377:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7042:7297  while (true) {... */\n      jump(tag_374)\n    tag_376:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":6514:7329  {... */\n      pop\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":6461:7329  if (_startTokenId() <= curr && curr < _currentIndex) {... */\n    tag_372:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7355:7386  OwnerQueryForNonexistentToken() */\n      mload(0x40)\n      shl(0xe1, 0x6f96cda1)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2426:2613  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_273:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2518:2524  _owner */\n      0x08\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2534:2551  _owner = newOwner */\n      dup4\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      swap1\n      swap4\n      sstore\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2566:2606  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2518:2524  _owner */\n      swap2\n      and\n      swap2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2534:2551  _owner = newOwner */\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2518:2524  _owner */\n      dup3\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2566:2606  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2499:2515  address oldOwner */\n      0x00\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2566:2606  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2489:2613  {... */\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2426:2613  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":19634:20285  function _checkContractOnERC721Received(... */\n    tag_293:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":19813:19885  IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) */\n      mload(0x40)\n      shl(0xe1, 0x0a85bd01)\n      dup2\n      mstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":19793:19797  bool */\n      0x00\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":19813:19849  IERC721Receiver(to).onERC721Received */\n      dup6\n      and\n      swap1\n      0x150b7a02\n      swap1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":19813:19885  IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) */\n      tag_382\n      swap1\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n      swap1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":19864:19868  from */\n      dup10\n      swap1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":19870:19877  tokenId */\n      dup9\n      swap1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":19879:19884  _data */\n      dup9\n      swap1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":19813:19885  IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) */\n      0x04\n      add\n      tag_383\n      jump\t// in\n    tag_382:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      dup1\n      iszero\n      tag_384\n      jumpi\n      pop\n      0x40\n      dup1\n      mload\n      0x1f\n      returndatasize\n      swap1\n      dup2\n      add\n      not(0x1f)\n      and\n      dup3\n      add\n      swap1\n      swap3\n      mstore\n      tag_385\n      swap2\n      dup2\n      add\n      swap1\n      tag_386\n      jump\t// in\n    tag_385:\n      0x01\n    tag_384:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":19809:20279  try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {... */\n      tag_387\n      jumpi\n      returndatasize\n      dup1\n      dup1\n      iszero\n      tag_392\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_391)\n    tag_392:\n      0x60\n      swap2\n      pop\n    tag_391:\n      pop\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":20044:20050  reason */\n      dup1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":20044:20057  reason.length */\n      mload\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":20061:20062  0 */\n      0x00\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":20044:20062  reason.length == 0 */\n      sub\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":20040:20269  if (reason.length == 0) {... */\n      tag_393\n      jumpi\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":20089:20129  TransferToNonERC721ReceiverImplementer() */\n      mload(0x40)\n      shl(0xe1, 0x68d2bf6b)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":20040:20269  if (reason.length == 0) {... */\n    tag_393:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":20229:20235  reason */\n      dup1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":20223:20236  mload(reason) */\n      mload\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":20214:20220  reason */\n      dup2\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":20210:20212  32 */\n      0x20\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":20206:20221  add(32, reason) */\n      add\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":20199:20237  revert(add(32, reason), mload(reason)) */\n      revert\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":19809:20279  try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {... */\n    tag_387:\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":19931:19986  retval == IERC721Receiver(to).onERC721Received.selector */\n      and\n      shl(0xe1, 0x0a85bd01)\n      eq\n      swap1\n      pop\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":19634:20285  function _checkContractOnERC721Received(... */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC-721AWRefund.sol\":1023:1170  function _baseURI() internal pure override returns (string memory) {... */\n    tag_299:\n        /* \"contracts/ERC-721AWRefund.sol\":1075:1088  string memory */\n      0x60\n        /* \"contracts/ERC-721AWRefund.sol\":1100:1163  return \"ipfs://QmbseRTJWSsLfhsiWwuB2R7EtN93TxfoaMz1S5FXtsFEUB/\" */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x36\n      dup2\n      mstore\n      0x20\n      add\n      data_bad8c5b7513efa3484aff4751176e1559e99e0aac6100695fa19afecc4f7431d\n      0x36\n      swap2\n      codecopy\n      swap1\n      pop\n        /* \"contracts/ERC-721AWRefund.sol\":1023:1170  function _baseURI() internal pure override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":447:1143  function toString(uint256 value) internal pure returns (string memory) {... */\n    tag_303:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":503:516  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":552:566  uint256 length */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":569:586  Math.log10(value) */\n      tag_398\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":580:585  value */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":569:579  Math.log10 */\n      tag_399\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":569:586  Math.log10(value) */\n      jump\t// in\n    tag_398:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":589:590  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":569:590  Math.log10(value) + 1 */\n      add\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":552:590  uint256 length = Math.log10(value) + 1 */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":604:624  string memory buffer */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":638:644  length */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":627:645  new string(length) */\n      0xffffffffffffffff\n      dup2\n      gt\n      iszero\n      tag_401\n      jumpi\n      tag_401\n      tag_402\n      jump\t// in\n    tag_401:\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x1f\n      add\n      not(0x1f)\n      and\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_403\n      jumpi\n      0x20\n      dup3\n      add\n      dup2\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      add\n      swap1\n      pop\n    tag_403:\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":604:645  string memory buffer = new string(length) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":765:793  add(buffer, add(32, length)) */\n      dup2\n      dup2\n      add\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":781:783  32 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":765:793  add(buffer, add(32, length)) */\n      add\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":820:1100  while (true) {... */\n    tag_404:\n      not(0x00)\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":851:856  ptr-- */\n      add\n      shl(0x81, 0x181899199a1a9b1b9c1cb0b131b232b3)\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":985:987  10 */\n      0x0a\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":974:988  mod(value, 10) */\n      dup7\n      mod\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":969:999  byte(mod(value, 10), _SYMBOLS) */\n      byte\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":851:856  ptr-- */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":956:1000  mstore8(ptr, byte(mod(value, 10), _SYMBOLS)) */\n      mstore8\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1044:1046  10 */\n      0x0a\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1035:1046  value /= 10 */\n      dup6\n      div\n      swap5\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1064:1085  if (value == 0) break */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":820:1100  while (true) {... */\n      tag_404\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1064:1085  if (value == 0) break */\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1120:1126  buffer */\n      swap4\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":447:1143  function toString(uint256 value) internal pure returns (string memory) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":11653:11810  function _safeMint(... */\n    tag_360:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":11771:11803  _mint(to, quantity, _data, true) */\n      tag_205\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":11777:11779  to */\n      dup4\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":11781:11789  quantity */\n      dup4\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":11791:11796  _data */\n      dup4\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":11798:11802  true */\n      0x01\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":11771:11776  _mint */\n      tag_414\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":11771:11803  _mint(to, quantity, _data, true) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10139:11055  function log10(uint256 value) internal pure returns (uint256) {... */\n    tag_399:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10192:10199  uint256 */\n      0x00\n      dup1\n      shl(0x40, 0x184f03e93ff9f4daa797ed6e38ed64bf6a1f01)\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10267:10284  value >= 10 ** 64 */\n      dup4\n      lt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10263:10366  if (value >= 10 ** 64) {... */\n      tag_416\n      jumpi\n      shl(0x40, 0x184f03e93ff9f4daa797ed6e38ed64bf6a1f01)\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10304:10321  value /= 10 ** 64 */\n      dup4\n      div\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10349:10351  64 */\n      0x40\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10339:10351  result += 64 */\n      add\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10263:10366  if (value >= 10 ** 64) {... */\n    tag_416:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10392:10400  10 ** 32 */\n      0x04ee2d6d415b85acef8100000000\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10383:10388  value */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10383:10400  value >= 10 ** 32 */\n      lt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10379:10482  if (value >= 10 ** 32) {... */\n      tag_419\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10429:10437  10 ** 32 */\n      0x04ee2d6d415b85acef8100000000\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10420:10437  value /= 10 ** 32 */\n      dup4\n      div\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10465:10467  32 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10455:10467  result += 32 */\n      add\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10379:10482  if (value >= 10 ** 32) {... */\n    tag_419:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10508:10516  10 ** 16 */\n      0x2386f26fc10000\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10499:10504  value */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10499:10516  value >= 10 ** 16 */\n      lt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10495:10598  if (value >= 10 ** 16) {... */\n      tag_422\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10545:10553  10 ** 16 */\n      0x2386f26fc10000\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10536:10553  value /= 10 ** 16 */\n      dup4\n      div\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10581:10583  16 */\n      0x10\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10571:10583  result += 16 */\n      add\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10495:10598  if (value >= 10 ** 16) {... */\n    tag_422:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10624:10631  10 ** 8 */\n      0x05f5e100\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10615:10620  value */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10615:10631  value >= 10 ** 8 */\n      lt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10611:10711  if (value >= 10 ** 8) {... */\n      tag_425\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10660:10667  10 ** 8 */\n      0x05f5e100\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10651:10667  value /= 10 ** 8 */\n      dup4\n      div\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10695:10696  8 */\n      0x08\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10685:10696  result += 8 */\n      add\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10611:10711  if (value >= 10 ** 8) {... */\n    tag_425:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10737:10744  10 ** 4 */\n      0x2710\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10728:10733  value */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10728:10744  value >= 10 ** 4 */\n      lt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10724:10824  if (value >= 10 ** 4) {... */\n      tag_428\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10773:10780  10 ** 4 */\n      0x2710\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10764:10780  value /= 10 ** 4 */\n      dup4\n      div\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10808:10809  4 */\n      0x04\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10798:10809  result += 4 */\n      add\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10724:10824  if (value >= 10 ** 4) {... */\n    tag_428:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10850:10857  10 ** 2 */\n      0x64\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10841:10846  value */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10841:10857  value >= 10 ** 2 */\n      lt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10837:10937  if (value >= 10 ** 2) {... */\n      tag_431\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10886:10893  10 ** 2 */\n      0x64\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10877:10893  value /= 10 ** 2 */\n      dup4\n      div\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10921:10922  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10911:10922  result += 2 */\n      add\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10837:10937  if (value >= 10 ** 2) {... */\n    tag_431:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10963:10970  10 ** 1 */\n      0x0a\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10954:10959  value */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10954:10970  value >= 10 ** 1 */\n      lt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10950:11016  if (value >= 10 ** 1) {... */\n      tag_181\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":11000:11001  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10990:11001  result += 1 */\n      add\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":11042:11048  result */\n      swap3\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10139:11055  function log10(uint256 value) internal pure returns (uint256) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":12057:13790  function _mint(... */\n    tag_414:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":12190:12210  uint256 startTokenId */\n      0x00\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":12213:12226  _currentIndex */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":12240:12256  to == address(0) */\n      dup6\n      and\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":12236:12284  if (to == address(0)) revert MintToZeroAddress() */\n      tag_436\n      jumpi\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":12265:12284  MintToZeroAddress() */\n      mload(0x40)\n      shl(0xe8, 0x2e0763)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":12236:12284  if (to == address(0)) revert MintToZeroAddress() */\n    tag_436:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":12298:12306  quantity */\n      dup4\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":12310:12311  0 */\n      0x00\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":12298:12311  quantity == 0 */\n      sub\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":12294:12338  if (quantity == 0) revert MintZeroQuantity() */\n      tag_437\n      jumpi\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":12320:12338  MintZeroQuantity() */\n      mload(0x40)\n      shl(0xe0, 0xb562e8dd)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":12294:12338  if (quantity == 0) revert MintZeroQuantity() */\n    tag_437:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":12681:12697  _addressData[to] */\n      dup6\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":12681:12693  _addressData */\n      0x05\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":12681:12697  _addressData[to] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":12681:12725  _addressData[to].balance += uint64(quantity) */\n      dup1\n      sload\n      not(0xffffffffffffffffffffffffffffffff)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":12739:12788  _addressData[to].numberMinted += uint64(quantity) */\n      dup2\n      and\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":12681:12725  _addressData[to].balance += uint64(quantity) */\n      0xffffffffffffffff\n      dup1\n      dup4\n      and\n      dup13\n      add\n      dup2\n      and\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":12739:12788  _addressData[to].numberMinted += uint64(quantity) */\n      swap2\n      dup3\n      or\n      shl(0x40, 0x01)\n      not(0xffffffffffffffff)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":12681:12725  _addressData[to].balance += uint64(quantity) */\n      swap1\n      swap5\n      and\n      swap1\n      swap3\n      or\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":12739:12788  _addressData[to].numberMinted += uint64(quantity) */\n      dup4\n      swap1\n      div\n      dup2\n      and\n      dup13\n      add\n      dup2\n      and\n      swap1\n      swap3\n      mul\n      or\n      swap1\n      swap2\n      sstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":12803:12828  _ownerships[startTokenId] */\n      dup6\n      dup5\n      mstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":12803:12814  _ownerships */\n      0x04\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":12803:12828  _ownerships[startTokenId] */\n      swap1\n      swap3\n      mstore\n      swap1\n      swap2\n      keccak256\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":12803:12838  _ownerships[startTokenId].addr = to */\n      dup1\n      sload\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":12852:12918  _ownerships[startTokenId].startTimestamp = uint64(block.timestamp) */\n      and\n      swap1\n      swap3\n      or\n      shl(0xa0, 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":12902:12917  block.timestamp */\n      timestamp\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":12852:12918  _ownerships[startTokenId].startTimestamp = uint64(block.timestamp) */\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      mul\n      or\n      swap1\n      sstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":12803:12828  _ownerships[startTokenId] */\n      dup1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":12996:13019  updatedIndex + quantity */\n      dup1\n      dup6\n      add\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13038:13042  safe */\n      dup4\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13038:13061  safe && to.isContract() */\n      dup1\n      iszero\n      tag_440\n      jumpi\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13046:13059  to.isContract */\n      dup8\n      and\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1702:1721  account.code.length */\n      extcodesize\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1702:1725  account.code.length > 0 */\n      iszero\n      iszero\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13046:13061  to.isContract() */\n    tag_440:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13034:13662  if (safe && to.isContract()) {... */\n      iszero\n      tag_441\n      jumpi\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13081:13390  do {... */\n    tag_442:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13111:13149  Transfer(address(0), to, updatedIndex) */\n      mload(0x40)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13136:13148  updatedIndex */\n      dup3\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13111:13149  Transfer(address(0), to, updatedIndex) */\n      dup10\n      and\n      swap1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13128:13129  0 */\n      0x00\n      swap1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13111:13149  Transfer(address(0), to, updatedIndex) */\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      swap1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13128:13129  0 */\n      dup3\n      swap1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13111:13149  Transfer(address(0), to, updatedIndex) */\n      log4\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13176:13245  _checkContractOnERC721Received(address(0), to, updatedIndex++, _data) */\n      tag_445\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13215:13216  0 */\n      0x00\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13219:13221  to */\n      dup9\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13223:13237  updatedIndex++ */\n      dup5\n      dup1\n      0x01\n      add\n      swap6\n      pop\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13239:13244  _data */\n      dup9\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13176:13206  _checkContractOnERC721Received */\n      tag_293\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13176:13245  _checkContractOnERC721Received(address(0), to, updatedIndex++, _data) */\n      jump\t// in\n    tag_445:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13171:13343  if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {... */\n      tag_446\n      jumpi\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13280:13320  TransferToNonERC721ReceiverImplementer() */\n      mload(0x40)\n      shl(0xe1, 0x68d2bf6b)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13171:13343  if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {... */\n    tag_446:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13385:13388  end */\n      dup1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13369:13381  updatedIndex */\n      dup3\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13369:13388  updatedIndex != end */\n      sub\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13081:13390  do {... */\n      tag_442\n      jumpi\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13469:13481  startTokenId */\n      dup3\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13452:13465  _currentIndex */\n      sload(0x00)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13452:13481  _currentIndex != startTokenId */\n      eq\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13448:13491  if (_currentIndex != startTokenId) revert() */\n      tag_447\n      jumpi\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13483:13491  revert() */\n      0x00\n      dup1\n      revert\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13448:13491  if (_currentIndex != startTokenId) revert() */\n    tag_447:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13034:13662  if (safe && to.isContract()) {... */\n      jump(tag_448)\n    tag_441:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13530:13648  do {... */\n    tag_449:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13560:13600  Transfer(address(0), to, updatedIndex++) */\n      mload(0x40)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13585:13599  updatedIndex++ */\n      0x01\n      dup4\n      add\n      swap3\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13560:13600  Transfer(address(0), to, updatedIndex++) */\n      dup10\n      and\n      swap1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13577:13578  0 */\n      0x00\n      swap1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13560:13600  Transfer(address(0), to, updatedIndex++) */\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      swap1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13577:13578  0 */\n      dup3\n      swap1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13560:13600  Transfer(address(0), to, updatedIndex++) */\n      log4\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13643:13646  end */\n      dup1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13627:13639  updatedIndex */\n      dup3\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13627:13646  updatedIndex != end */\n      sub\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13530:13648  do {... */\n      tag_449\n      jumpi\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13034:13662  if (safe && to.isContract()) {... */\n    tag_448:\n      pop\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13675:13688  _currentIndex */\n      0x00\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13675:13703  _currentIndex = updatedIndex */\n      sstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":13723:13783  _afterTokenTransfers(address(0), to, startTokenId, quantity) */\n      tag_341\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10405:10764  function safeTransferFrom(... */\n      jump\n        /* \"#utility.yul\":14:145   */\n    tag_453:\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"#utility.yul\":88:120   */\n      dup2\n      and\n        /* \"#utility.yul\":78:121   */\n      dup2\n      eq\n        /* \"#utility.yul\":68:139   */\n      tag_261\n      jumpi\n        /* \"#utility.yul\":135:136   */\n      0x00\n        /* \"#utility.yul\":132:133   */\n      dup1\n        /* \"#utility.yul\":125:137   */\n      revert\n        /* \"#utility.yul\":150:395   */\n    tag_42:\n        /* \"#utility.yul\":208:214   */\n      0x00\n        /* \"#utility.yul\":261:263   */\n      0x20\n        /* \"#utility.yul\":249:258   */\n      dup3\n        /* \"#utility.yul\":240:247   */\n      dup5\n        /* \"#utility.yul\":236:259   */\n      sub\n        /* \"#utility.yul\":232:264   */\n      slt\n        /* \"#utility.yul\":229:281   */\n      iszero\n      tag_462\n      jumpi\n        /* \"#utility.yul\":277:278   */\n      0x00\n        /* \"#utility.yul\":274:275   */\n      dup1\n        /* \"#utility.yul\":267:279   */\n      revert\n        /* \"#utility.yul\":229:281   */\n    tag_462:\n        /* \"#utility.yul\":316:325   */\n      dup2\n        /* \"#utility.yul\":303:326   */\n      calldataload\n        /* \"#utility.yul\":335:365   */\n      tag_301\n        /* \"#utility.yul\":359:364   */\n      dup2\n        /* \"#utility.yul\":335:365   */\n      tag_453\n      jump\t// in\n        /* \"#utility.yul\":592:772   */\n    tag_49:\n        /* \"#utility.yul\":651:657   */\n      0x00\n        /* \"#utility.yul\":704:706   */\n      0x20\n        /* \"#utility.yul\":692:701   */\n      dup3\n        /* \"#utility.yul\":683:690   */\n      dup5\n        /* \"#utility.yul\":679:702   */\n      sub\n        /* \"#utility.yul\":675:707   */\n      slt\n        /* \"#utility.yul\":672:724   */\n      iszero\n      tag_466\n      jumpi\n        /* \"#utility.yul\":720:721   */\n      0x00\n        /* \"#utility.yul\":717:718   */\n      dup1\n        /* \"#utility.yul\":710:722   */\n      revert\n        /* \"#utility.yul\":672:724   */\n    tag_466:\n      pop\n        /* \"#utility.yul\":743:766   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":592:772   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":959:1209   */\n    tag_454:\n        /* \"#utility.yul\":1044:1045   */\n      0x00\n        /* \"#utility.yul\":1054:1167   */\n    tag_469:\n        /* \"#utility.yul\":1068:1074   */\n      dup4\n        /* \"#utility.yul\":1065:1066   */\n      dup2\n        /* \"#utility.yul\":1062:1075   */\n      lt\n        /* \"#utility.yul\":1054:1167   */\n      iszero\n      tag_471\n      jumpi\n        /* \"#utility.yul\":1144:1155   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":1138:1156   */\n      mload\n        /* \"#utility.yul\":1125:1136   */\n      dup4\n      dup3\n      add\n        /* \"#utility.yul\":1118:1157   */\n      mstore\n        /* \"#utility.yul\":1090:1092   */\n      0x20\n        /* \"#utility.yul\":1083:1093   */\n      add\n        /* \"#utility.yul\":1054:1167   */\n      jump(tag_469)\n    tag_471:\n      pop\n      pop\n        /* \"#utility.yul\":1201:1202   */\n      0x00\n        /* \"#utility.yul\":1183:1199   */\n      swap2\n      add\n        /* \"#utility.yul\":1176:1203   */\n      mstore\n        /* \"#utility.yul\":959:1209   */\n      jump\t// out\n        /* \"#utility.yul\":1214:1485   */\n    tag_455:\n        /* \"#utility.yul\":1256:1259   */\n      0x00\n        /* \"#utility.yul\":1294:1299   */\n      dup2\n        /* \"#utility.yul\":1288:1300   */\n      mload\n        /* \"#utility.yul\":1321:1327   */\n      dup1\n        /* \"#utility.yul\":1316:1319   */\n      dup5\n        /* \"#utility.yul\":1309:1328   */\n      mstore\n        /* \"#utility.yul\":1337:1413   */\n      tag_473\n        /* \"#utility.yul\":1406:1412   */\n      dup2\n        /* \"#utility.yul\":1399:1403   */\n      0x20\n        /* \"#utility.yul\":1394:1397   */\n      dup7\n        /* \"#utility.yul\":1390:1404   */\n      add\n        /* \"#utility.yul\":1383:1387   */\n      0x20\n        /* \"#utility.yul\":1376:1381   */\n      dup7\n        /* \"#utility.yul\":1372:1388   */\n      add\n        /* \"#utility.yul\":1337:1413   */\n      tag_454\n      jump\t// in\n    tag_473:\n        /* \"#utility.yul\":1467:1469   */\n      0x1f\n        /* \"#utility.yul\":1446:1461   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":1442:1471   */\n      and\n        /* \"#utility.yul\":1433:1472   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":1474:1478   */\n      0x20\n        /* \"#utility.yul\":1429:1479   */\n      add\n      swap3\n        /* \"#utility.yul\":1214:1485   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1490:1710   */\n    tag_57:\n        /* \"#utility.yul\":1639:1641   */\n      0x20\n        /* \"#utility.yul\":1628:1637   */\n      dup2\n        /* \"#utility.yul\":1621:1642   */\n      mstore\n        /* \"#utility.yul\":1602:1606   */\n      0x00\n        /* \"#utility.yul\":1659:1704   */\n      tag_301\n        /* \"#utility.yul\":1700:1702   */\n      0x20\n        /* \"#utility.yul\":1689:1698   */\n      dup4\n        /* \"#utility.yul\":1685:1703   */\n      add\n        /* \"#utility.yul\":1677:1683   */\n      dup5\n        /* \"#utility.yul\":1659:1704   */\n      tag_455\n      jump\t// in\n        /* \"#utility.yul\":1923:2096   */\n    tag_456:\n        /* \"#utility.yul\":1991:2011   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":2040:2071   */\n      dup2\n      and\n        /* \"#utility.yul\":2030:2072   */\n      dup2\n      eq\n        /* \"#utility.yul\":2020:2090   */\n      tag_478\n      jumpi\n        /* \"#utility.yul\":2086:2087   */\n      0x00\n        /* \"#utility.yul\":2083:2084   */\n      dup1\n        /* \"#utility.yul\":2076:2088   */\n      revert\n        /* \"#utility.yul\":2020:2090   */\n    tag_478:\n        /* \"#utility.yul\":1923:2096   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2101:2355   */\n    tag_67:\n        /* \"#utility.yul\":2169:2175   */\n      0x00\n        /* \"#utility.yul\":2177:2183   */\n      dup1\n        /* \"#utility.yul\":2230:2232   */\n      0x40\n        /* \"#utility.yul\":2218:2227   */\n      dup4\n        /* \"#utility.yul\":2209:2216   */\n      dup6\n        /* \"#utility.yul\":2205:2228   */\n      sub\n        /* \"#utility.yul\":2201:2233   */\n      slt\n        /* \"#utility.yul\":2198:2250   */\n      iszero\n      tag_480\n      jumpi\n        /* \"#utility.yul\":2246:2247   */\n      0x00\n        /* \"#utility.yul\":2243:2244   */\n      dup1\n        /* \"#utility.yul\":2236:2248   */\n      revert\n        /* \"#utility.yul\":2198:2250   */\n    tag_480:\n        /* \"#utility.yul\":2269:2298   */\n      tag_481\n        /* \"#utility.yul\":2288:2297   */\n      dup4\n        /* \"#utility.yul\":2269:2298   */\n      tag_456\n      jump\t// in\n    tag_481:\n        /* \"#utility.yul\":2259:2298   */\n      swap5\n        /* \"#utility.yul\":2345:2347   */\n      0x20\n        /* \"#utility.yul\":2330:2348   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":2317:2349   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":2101:2355   */\n      jump\t// out\n        /* \"#utility.yul\":2360:2688   */\n    tag_80:\n        /* \"#utility.yul\":2437:2443   */\n      0x00\n        /* \"#utility.yul\":2445:2451   */\n      dup1\n        /* \"#utility.yul\":2453:2459   */\n      0x00\n        /* \"#utility.yul\":2506:2508   */\n      0x60\n        /* \"#utility.yul\":2494:2503   */\n      dup5\n        /* \"#utility.yul\":2485:2492   */\n      dup7\n        /* \"#utility.yul\":2481:2504   */\n      sub\n        /* \"#utility.yul\":2477:2509   */\n      slt\n        /* \"#utility.yul\":2474:2526   */\n      iszero\n      tag_483\n      jumpi\n        /* \"#utility.yul\":2522:2523   */\n      0x00\n        /* \"#utility.yul\":2519:2520   */\n      dup1\n        /* \"#utility.yul\":2512:2524   */\n      revert\n        /* \"#utility.yul\":2474:2526   */\n    tag_483:\n        /* \"#utility.yul\":2545:2574   */\n      tag_484\n        /* \"#utility.yul\":2564:2573   */\n      dup5\n        /* \"#utility.yul\":2545:2574   */\n      tag_456\n      jump\t// in\n    tag_484:\n        /* \"#utility.yul\":2535:2574   */\n      swap3\n      pop\n        /* \"#utility.yul\":2593:2631   */\n      tag_485\n        /* \"#utility.yul\":2627:2629   */\n      0x20\n        /* \"#utility.yul\":2616:2625   */\n      dup6\n        /* \"#utility.yul\":2612:2630   */\n      add\n        /* \"#utility.yul\":2593:2631   */\n      tag_456\n      jump\t// in\n    tag_485:\n        /* \"#utility.yul\":2583:2631   */\n      swap2\n      pop\n        /* \"#utility.yul\":2678:2680   */\n      0x40\n        /* \"#utility.yul\":2667:2676   */\n      dup5\n        /* \"#utility.yul\":2663:2681   */\n      add\n        /* \"#utility.yul\":2650:2682   */\n      calldataload\n        /* \"#utility.yul\":2640:2682   */\n      swap1\n      pop\n        /* \"#utility.yul\":2360:2688   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":2693:2879   */\n    tag_112:\n        /* \"#utility.yul\":2752:2758   */\n      0x00\n        /* \"#utility.yul\":2805:2807   */\n      0x20\n        /* \"#utility.yul\":2793:2802   */\n      dup3\n        /* \"#utility.yul\":2784:2791   */\n      dup5\n        /* \"#utility.yul\":2780:2803   */\n      sub\n        /* \"#utility.yul\":2776:2808   */\n      slt\n        /* \"#utility.yul\":2773:2825   */\n      iszero\n      tag_487\n      jumpi\n        /* \"#utility.yul\":2821:2822   */\n      0x00\n        /* \"#utility.yul\":2818:2819   */\n      dup1\n        /* \"#utility.yul\":2811:2823   */\n      revert\n        /* \"#utility.yul\":2773:2825   */\n    tag_487:\n        /* \"#utility.yul\":2844:2873   */\n      tag_301\n        /* \"#utility.yul\":2863:2872   */\n      dup3\n        /* \"#utility.yul\":2844:2873   */\n      tag_456\n      jump\t// in\n        /* \"#utility.yul\":2884:3231   */\n    tag_129:\n        /* \"#utility.yul\":2949:2955   */\n      0x00\n        /* \"#utility.yul\":2957:2963   */\n      dup1\n        /* \"#utility.yul\":3010:3012   */\n      0x40\n        /* \"#utility.yul\":2998:3007   */\n      dup4\n        /* \"#utility.yul\":2989:2996   */\n      dup6\n        /* \"#utility.yul\":2985:3008   */\n      sub\n        /* \"#utility.yul\":2981:3013   */\n      slt\n        /* \"#utility.yul\":2978:3030   */\n      iszero\n      tag_490\n      jumpi\n        /* \"#utility.yul\":3026:3027   */\n      0x00\n        /* \"#utility.yul\":3023:3024   */\n      dup1\n        /* \"#utility.yul\":3016:3028   */\n      revert\n        /* \"#utility.yul\":2978:3030   */\n    tag_490:\n        /* \"#utility.yul\":3049:3078   */\n      tag_491\n        /* \"#utility.yul\":3068:3077   */\n      dup4\n        /* \"#utility.yul\":3049:3078   */\n      tag_456\n      jump\t// in\n    tag_491:\n        /* \"#utility.yul\":3039:3078   */\n      swap2\n      pop\n        /* \"#utility.yul\":3128:3130   */\n      0x20\n        /* \"#utility.yul\":3117:3126   */\n      dup4\n        /* \"#utility.yul\":3113:3131   */\n      add\n        /* \"#utility.yul\":3100:3132   */\n      calldataload\n        /* \"#utility.yul\":3175:3180   */\n      dup1\n        /* \"#utility.yul\":3168:3181   */\n      iszero\n        /* \"#utility.yul\":3161:3182   */\n      iszero\n        /* \"#utility.yul\":3154:3159   */\n      dup2\n        /* \"#utility.yul\":3151:3183   */\n      eq\n        /* \"#utility.yul\":3141:3201   */\n      tag_492\n      jumpi\n        /* \"#utility.yul\":3197:3198   */\n      0x00\n        /* \"#utility.yul\":3194:3195   */\n      dup1\n        /* \"#utility.yul\":3187:3199   */\n      revert\n        /* \"#utility.yul\":3141:3201   */\n    tag_492:\n        /* \"#utility.yul\":3220:3225   */\n      dup1\n        /* \"#utility.yul\":3210:3225   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":2884:3231   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3236:3363   */\n    tag_402:\n        /* \"#utility.yul\":3297:3307   */\n      0x4e487b71\n        /* \"#utility.yul\":3292:3295   */\n      0xe0\n        /* \"#utility.yul\":3288:3308   */\n      shl\n        /* \"#utility.yul\":3285:3286   */\n      0x00\n        /* \"#utility.yul\":3278:3309   */\n      mstore\n        /* \"#utility.yul\":3328:3332   */\n      0x41\n        /* \"#utility.yul\":3325:3326   */\n      0x04\n        /* \"#utility.yul\":3318:3333   */\n      mstore\n        /* \"#utility.yul\":3352:3356   */\n      0x24\n        /* \"#utility.yul\":3349:3350   */\n      0x00\n        /* \"#utility.yul\":3342:3357   */\n      revert\n        /* \"#utility.yul\":3368:4506   */\n    tag_138:\n        /* \"#utility.yul\":3463:3469   */\n      0x00\n        /* \"#utility.yul\":3471:3477   */\n      dup1\n        /* \"#utility.yul\":3479:3485   */\n      0x00\n        /* \"#utility.yul\":3487:3493   */\n      dup1\n        /* \"#utility.yul\":3540:3543   */\n      0x80\n        /* \"#utility.yul\":3528:3537   */\n      dup6\n        /* \"#utility.yul\":3519:3526   */\n      dup8\n        /* \"#utility.yul\":3515:3538   */\n      sub\n        /* \"#utility.yul\":3511:3544   */\n      slt\n        /* \"#utility.yul\":3508:3561   */\n      iszero\n      tag_495\n      jumpi\n        /* \"#utility.yul\":3557:3558   */\n      0x00\n        /* \"#utility.yul\":3554:3555   */\n      dup1\n        /* \"#utility.yul\":3547:3559   */\n      revert\n        /* \"#utility.yul\":3508:3561   */\n    tag_495:\n        /* \"#utility.yul\":3580:3609   */\n      tag_496\n        /* \"#utility.yul\":3599:3608   */\n      dup6\n        /* \"#utility.yul\":3580:3609   */\n      tag_456\n      jump\t// in\n    tag_496:\n        /* \"#utility.yul\":3570:3609   */\n      swap4\n      pop\n        /* \"#utility.yul\":3628:3666   */\n      tag_497\n        /* \"#utility.yul\":3662:3664   */\n      0x20\n        /* \"#utility.yul\":3651:3660   */\n      dup7\n        /* \"#utility.yul\":3647:3665   */\n      add\n        /* \"#utility.yul\":3628:3666   */\n      tag_456\n      jump\t// in\n    tag_497:\n        /* \"#utility.yul\":3618:3666   */\n      swap3\n      pop\n        /* \"#utility.yul\":3713:3715   */\n      0x40\n        /* \"#utility.yul\":3702:3711   */\n      dup6\n        /* \"#utility.yul\":3698:3716   */\n      add\n        /* \"#utility.yul\":3685:3717   */\n      calldataload\n        /* \"#utility.yul\":3675:3717   */\n      swap2\n      pop\n        /* \"#utility.yul\":3768:3770   */\n      0x60\n        /* \"#utility.yul\":3757:3766   */\n      dup6\n        /* \"#utility.yul\":3753:3771   */\n      add\n        /* \"#utility.yul\":3740:3772   */\n      calldataload\n        /* \"#utility.yul\":3791:3809   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":3832:3834   */\n      dup1\n        /* \"#utility.yul\":3824:3830   */\n      dup3\n        /* \"#utility.yul\":3821:3835   */\n      gt\n        /* \"#utility.yul\":3818:3852   */\n      iszero\n      tag_498\n      jumpi\n        /* \"#utility.yul\":3848:3849   */\n      0x00\n        /* \"#utility.yul\":3845:3846   */\n      dup1\n        /* \"#utility.yul\":3838:3850   */\n      revert\n        /* \"#utility.yul\":3818:3852   */\n    tag_498:\n        /* \"#utility.yul\":3886:3892   */\n      dup2\n        /* \"#utility.yul\":3875:3884   */\n      dup8\n        /* \"#utility.yul\":3871:3893   */\n      add\n        /* \"#utility.yul\":3861:3893   */\n      swap2\n      pop\n        /* \"#utility.yul\":3931:3938   */\n      dup8\n        /* \"#utility.yul\":3924:3928   */\n      0x1f\n        /* \"#utility.yul\":3920:3922   */\n      dup4\n        /* \"#utility.yul\":3916:3929   */\n      add\n        /* \"#utility.yul\":3912:3939   */\n      slt\n        /* \"#utility.yul\":3902:3957   */\n      tag_499\n      jumpi\n        /* \"#utility.yul\":3953:3954   */\n      0x00\n        /* \"#utility.yul\":3950:3951   */\n      dup1\n        /* \"#utility.yul\":3943:3955   */\n      revert\n        /* \"#utility.yul\":3902:3957   */\n    tag_499:\n        /* \"#utility.yul\":3989:3991   */\n      dup2\n        /* \"#utility.yul\":3976:3992   */\n      calldataload\n        /* \"#utility.yul\":4011:4013   */\n      dup2\n        /* \"#utility.yul\":4007:4009   */\n      dup2\n        /* \"#utility.yul\":4004:4014   */\n      gt\n        /* \"#utility.yul\":4001:4037   */\n      iszero\n      tag_501\n      jumpi\n        /* \"#utility.yul\":4017:4035   */\n      tag_501\n      tag_402\n      jump\t// in\n    tag_501:\n        /* \"#utility.yul\":4092:4094   */\n      0x40\n        /* \"#utility.yul\":4086:4095   */\n      mload\n        /* \"#utility.yul\":4060:4062   */\n      0x1f\n        /* \"#utility.yul\":4146:4159   */\n      dup3\n      add\n      not(0x1f)\n        /* \"#utility.yul\":4142:4164   */\n      swap1\n      dup2\n      and\n        /* \"#utility.yul\":4166:4168   */\n      0x3f\n        /* \"#utility.yul\":4138:4169   */\n      add\n        /* \"#utility.yul\":4134:4174   */\n      and\n        /* \"#utility.yul\":4122:4175   */\n      dup2\n      add\n      swap1\n        /* \"#utility.yul\":4190:4208   */\n      dup4\n      dup3\n      gt\n        /* \"#utility.yul\":4210:4232   */\n      dup2\n      dup4\n      lt\n        /* \"#utility.yul\":4187:4233   */\n      or\n        /* \"#utility.yul\":4184:4256   */\n      iszero\n      tag_503\n      jumpi\n        /* \"#utility.yul\":4236:4254   */\n      tag_503\n      tag_402\n      jump\t// in\n    tag_503:\n        /* \"#utility.yul\":4276:4286   */\n      dup2\n        /* \"#utility.yul\":4272:4274   */\n      0x40\n        /* \"#utility.yul\":4265:4287   */\n      mstore\n        /* \"#utility.yul\":4311:4313   */\n      dup3\n        /* \"#utility.yul\":4303:4309   */\n      dup2\n        /* \"#utility.yul\":4296:4314   */\n      mstore\n        /* \"#utility.yul\":4351:4358   */\n      dup11\n        /* \"#utility.yul\":4346:4348   */\n      0x20\n        /* \"#utility.yul\":4341:4343   */\n      dup5\n        /* \"#utility.yul\":4337:4339   */\n      dup8\n        /* \"#utility.yul\":4333:4344   */\n      add\n        /* \"#utility.yul\":4329:4349   */\n      add\n        /* \"#utility.yul\":4326:4359   */\n      gt\n        /* \"#utility.yul\":4323:4376   */\n      iszero\n      tag_504\n      jumpi\n        /* \"#utility.yul\":4372:4373   */\n      0x00\n        /* \"#utility.yul\":4369:4370   */\n      dup1\n        /* \"#utility.yul\":4362:4374   */\n      revert\n        /* \"#utility.yul\":4323:4376   */\n    tag_504:\n        /* \"#utility.yul\":4428:4430   */\n      dup3\n        /* \"#utility.yul\":4423:4425   */\n      0x20\n        /* \"#utility.yul\":4419:4421   */\n      dup7\n        /* \"#utility.yul\":4415:4426   */\n      add\n        /* \"#utility.yul\":4410:4412   */\n      0x20\n        /* \"#utility.yul\":4402:4408   */\n      dup4\n        /* \"#utility.yul\":4398:4413   */\n      add\n        /* \"#utility.yul\":4385:4431   */\n      calldatacopy\n        /* \"#utility.yul\":4473:4474   */\n      0x00\n        /* \"#utility.yul\":4468:4470   */\n      0x20\n        /* \"#utility.yul\":4463:4465   */\n      dup5\n        /* \"#utility.yul\":4455:4461   */\n      dup4\n        /* \"#utility.yul\":4451:4466   */\n      add\n        /* \"#utility.yul\":4447:4471   */\n      add\n        /* \"#utility.yul\":4440:4475   */\n      mstore\n        /* \"#utility.yul\":4494:4500   */\n      dup1\n        /* \"#utility.yul\":4484:4500   */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":3368:4506   */\n      swap3\n      swap6\n      swap2\n      swap5\n      pop\n      swap3\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4511:4771   */\n    tag_171:\n        /* \"#utility.yul\":4579:4585   */\n      0x00\n        /* \"#utility.yul\":4587:4593   */\n      dup1\n        /* \"#utility.yul\":4640:4642   */\n      0x40\n        /* \"#utility.yul\":4628:4637   */\n      dup4\n        /* \"#utility.yul\":4619:4626   */\n      dup6\n        /* \"#utility.yul\":4615:4638   */\n      sub\n        /* \"#utility.yul\":4611:4643   */\n      slt\n        /* \"#utility.yul\":4608:4660   */\n      iszero\n      tag_506\n      jumpi\n        /* \"#utility.yul\":4656:4657   */\n      0x00\n        /* \"#utility.yul\":4653:4654   */\n      dup1\n        /* \"#utility.yul\":4646:4658   */\n      revert\n        /* \"#utility.yul\":4608:4660   */\n    tag_506:\n        /* \"#utility.yul\":4679:4708   */\n      tag_507\n        /* \"#utility.yul\":4698:4707   */\n      dup4\n        /* \"#utility.yul\":4679:4708   */\n      tag_456\n      jump\t// in\n    tag_507:\n        /* \"#utility.yul\":4669:4708   */\n      swap2\n      pop\n        /* \"#utility.yul\":4727:4765   */\n      tag_508\n        /* \"#utility.yul\":4761:4763   */\n      0x20\n        /* \"#utility.yul\":4750:4759   */\n      dup5\n        /* \"#utility.yul\":4746:4764   */\n      add\n        /* \"#utility.yul\":4727:4765   */\n      tag_456\n      jump\t// in\n    tag_508:\n        /* \"#utility.yul\":4717:4765   */\n      swap1\n      pop\n        /* \"#utility.yul\":4511:4771   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4776:5156   */\n    tag_187:\n        /* \"#utility.yul\":4855:4856   */\n      0x01\n        /* \"#utility.yul\":4851:4863   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":4898:4910   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":4919:4980   */\n      tag_510\n      jumpi\n        /* \"#utility.yul\":4973:4977   */\n      0x7f\n        /* \"#utility.yul\":4965:4971   */\n      dup3\n        /* \"#utility.yul\":4961:4978   */\n      and\n        /* \"#utility.yul\":4951:4978   */\n      swap2\n      pop\n        /* \"#utility.yul\":4919:4980   */\n    tag_510:\n        /* \"#utility.yul\":5026:5028   */\n      0x20\n        /* \"#utility.yul\":5018:5024   */\n      dup3\n        /* \"#utility.yul\":5015:5029   */\n      lt\n        /* \"#utility.yul\":4995:5013   */\n      dup2\n        /* \"#utility.yul\":4992:5030   */\n      sub\n        /* \"#utility.yul\":4989:5150   */\n      tag_511\n      jumpi\n        /* \"#utility.yul\":5072:5082   */\n      0x4e487b71\n        /* \"#utility.yul\":5067:5070   */\n      0xe0\n        /* \"#utility.yul\":5063:5083   */\n      shl\n        /* \"#utility.yul\":5060:5061   */\n      0x00\n        /* \"#utility.yul\":5053:5084   */\n      mstore\n        /* \"#utility.yul\":5107:5111   */\n      0x22\n        /* \"#utility.yul\":5104:5105   */\n      0x04\n        /* \"#utility.yul\":5097:5112   */\n      mstore\n        /* \"#utility.yul\":5135:5139   */\n      0x24\n        /* \"#utility.yul\":5132:5133   */\n      0x00\n        /* \"#utility.yul\":5125:5140   */\n      revert\n        /* \"#utility.yul\":4989:5150   */\n    tag_511:\n      pop\n        /* \"#utility.yul\":4776:5156   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5853:5980   */\n    tag_457:\n        /* \"#utility.yul\":5914:5924   */\n      0x4e487b71\n        /* \"#utility.yul\":5909:5912   */\n      0xe0\n        /* \"#utility.yul\":5905:5925   */\n      shl\n        /* \"#utility.yul\":5902:5903   */\n      0x00\n        /* \"#utility.yul\":5895:5926   */\n      mstore\n        /* \"#utility.yul\":5945:5949   */\n      0x11\n        /* \"#utility.yul\":5942:5943   */\n      0x04\n        /* \"#utility.yul\":5935:5950   */\n      mstore\n        /* \"#utility.yul\":5969:5973   */\n      0x24\n        /* \"#utility.yul\":5966:5967   */\n      0x00\n        /* \"#utility.yul\":5959:5974   */\n      revert\n        /* \"#utility.yul\":5985:6153   */\n    tag_228:\n        /* \"#utility.yul\":6058:6067   */\n      dup1\n      dup3\n      mul\n        /* \"#utility.yul\":6089:6098   */\n      dup2\n      iszero\n        /* \"#utility.yul\":6106:6121   */\n      dup3\n      dup3\n      div\n        /* \"#utility.yul\":6100:6122   */\n      dup5\n      eq\n        /* \"#utility.yul\":6086:6123   */\n      or\n        /* \"#utility.yul\":6076:6147   */\n      tag_181\n      jumpi\n        /* \"#utility.yul\":6127:6145   */\n      tag_181\n      tag_457\n      jump\t// in\n        /* \"#utility.yul\":6504:6629   */\n    tag_235:\n        /* \"#utility.yul\":6569:6578   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":6590:6600   */\n      dup1\n      dup3\n      gt\n        /* \"#utility.yul\":6587:6623   */\n      iszero\n      tag_181\n      jumpi\n        /* \"#utility.yul\":6603:6621   */\n      tag_181\n      tag_457\n      jump\t// in\n        /* \"#utility.yul\":7326:7454   */\n    tag_251:\n        /* \"#utility.yul\":7393:7402   */\n      dup2\n      dup2\n      sub\n        /* \"#utility.yul\":7414:7425   */\n      dup2\n      dup2\n      gt\n        /* \"#utility.yul\":7411:7448   */\n      iszero\n      tag_181\n      jumpi\n        /* \"#utility.yul\":7428:7446   */\n      tag_181\n      tag_457\n      jump\t// in\n        /* \"#utility.yul\":7459:7594   */\n    tag_253:\n        /* \"#utility.yul\":7498:7501   */\n      0x00\n        /* \"#utility.yul\":7519:7536   */\n      0x01\n      dup3\n      add\n        /* \"#utility.yul\":7516:7559   */\n      tag_529\n      jumpi\n        /* \"#utility.yul\":7539:7557   */\n      tag_529\n      tag_457\n      jump\t// in\n    tag_529:\n      pop\n        /* \"#utility.yul\":7586:7587   */\n      0x01\n        /* \"#utility.yul\":7575:7588   */\n      add\n      swap1\n        /* \"#utility.yul\":7459:7594   */\n      jump\t// out\n        /* \"#utility.yul\":7959:8455   */\n    tag_305:\n        /* \"#utility.yul\":8138:8141   */\n      0x00\n        /* \"#utility.yul\":8176:8182   */\n      dup4\n        /* \"#utility.yul\":8170:8183   */\n      mload\n        /* \"#utility.yul\":8192:8258   */\n      tag_532\n        /* \"#utility.yul\":8251:8257   */\n      dup2\n        /* \"#utility.yul\":8246:8249   */\n      dup5\n        /* \"#utility.yul\":8239:8243   */\n      0x20\n        /* \"#utility.yul\":8231:8237   */\n      dup9\n        /* \"#utility.yul\":8227:8244   */\n      add\n        /* \"#utility.yul\":8192:8258   */\n      tag_454\n      jump\t// in\n    tag_532:\n        /* \"#utility.yul\":8321:8334   */\n      dup4\n      mload\n        /* \"#utility.yul\":8280:8296   */\n      swap1\n      dup4\n      add\n      swap1\n        /* \"#utility.yul\":8343:8413   */\n      tag_533\n        /* \"#utility.yul\":8321:8334   */\n      dup2\n        /* \"#utility.yul\":8280:8296   */\n      dup4\n        /* \"#utility.yul\":8390:8394   */\n      0x20\n        /* \"#utility.yul\":8378:8395   */\n      dup9\n      add\n        /* \"#utility.yul\":8343:8413   */\n      tag_454\n      jump\t// in\n    tag_533:\n        /* \"#utility.yul\":8429:8449   */\n      add\n      swap5\n        /* \"#utility.yul\":7959:8455   */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10223:10712   */\n    tag_383:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":10492:10507   */\n      dup6\n      dup2\n      and\n        /* \"#utility.yul\":10474:10508   */\n      dup3\n      mstore\n        /* \"#utility.yul\":10544:10559   */\n      dup5\n      and\n        /* \"#utility.yul\":10539:10541   */\n      0x20\n        /* \"#utility.yul\":10524:10542   */\n      dup3\n      add\n        /* \"#utility.yul\":10517:10560   */\n      mstore\n        /* \"#utility.yul\":10591:10593   */\n      0x40\n        /* \"#utility.yul\":10576:10594   */\n      dup2\n      add\n        /* \"#utility.yul\":10569:10603   */\n      dup4\n      swap1\n      mstore\n        /* \"#utility.yul\":10639:10642   */\n      0x80\n        /* \"#utility.yul\":10634:10636   */\n      0x60\n        /* \"#utility.yul\":10619:10637   */\n      dup3\n      add\n        /* \"#utility.yul\":10612:10643   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":10417:10421   */\n      0x00\n      swap1\n        /* \"#utility.yul\":10660:10706   */\n      tag_540\n      swap1\n        /* \"#utility.yul\":10686:10705   */\n      dup4\n      add\n        /* \"#utility.yul\":10678:10684   */\n      dup5\n        /* \"#utility.yul\":10660:10706   */\n      tag_455\n      jump\t// in\n    tag_540:\n        /* \"#utility.yul\":10652:10706   */\n      swap7\n        /* \"#utility.yul\":10223:10712   */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10717:10966   */\n    tag_386:\n        /* \"#utility.yul\":10786:10792   */\n      0x00\n        /* \"#utility.yul\":10839:10841   */\n      0x20\n        /* \"#utility.yul\":10827:10836   */\n      dup3\n        /* \"#utility.yul\":10818:10825   */\n      dup5\n        /* \"#utility.yul\":10814:10837   */\n      sub\n        /* \"#utility.yul\":10810:10842   */\n      slt\n        /* \"#utility.yul\":10807:10859   */\n      iszero\n      tag_542\n      jumpi\n        /* \"#utility.yul\":10855:10856   */\n      0x00\n        /* \"#utility.yul\":10852:10853   */\n      dup1\n        /* \"#utility.yul\":10845:10857   */\n      revert\n        /* \"#utility.yul\":10807:10859   */\n    tag_542:\n        /* \"#utility.yul\":10887:10896   */\n      dup2\n        /* \"#utility.yul\":10881:10897   */\n      mload\n        /* \"#utility.yul\":10906:10936   */\n      tag_301\n        /* \"#utility.yul\":10930:10935   */\n      dup2\n        /* \"#utility.yul\":10906:10936   */\n      tag_453\n      jump\t// in\n    stop\n    data_bad8c5b7513efa3484aff4751176e1559e99e0aac6100695fa19afecc4f7431d 697066733a2f2f516d62736552544a5753734c666873695777754232523745744e39335478666f614d7a31533546587473464555422f\n\n    auxdata: 0xa2646970667358221220828fc8003228577cd24ee510aba51fdc6fa0ba9917fdf4227456a06df9a78d0064736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_1916": {
									"entryPoint": null,
									"id": 1916,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_2235": {
									"entryPoint": null,
									"id": 2235,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_23": {
									"entryPoint": null,
									"id": 23,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_msgSender_615": {
									"entryPoint": null,
									"id": 615,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_startTokenId_2244": {
									"entryPoint": null,
									"id": 2244,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_111": {
									"entryPoint": 173,
									"id": 111,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"array_dataslot_string_storage": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 624,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"clean_up_bytearray_end_slots_string_storage": {
									"entryPoint": 337,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
									"entryPoint": 420,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 277,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_used_part_and_set_length_of_short_byte_array": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x41": {
									"entryPoint": 255,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:2959:14",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:14",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "46:95:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "63:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "70:3:14",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "75:10:14",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "66:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "66:20:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "56:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "56:31:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "56:31:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "103:1:14",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "106:4:14",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "96:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "96:15:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "96:15:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "127:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "130:4:14",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "120:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "120:15:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "120:15:14"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "14:127:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "201:325:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "211:22:14",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "225:1:14",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "228:4:14"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "221:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "221:12:14"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "211:6:14"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "242:38:14",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "272:4:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "278:1:14",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "268:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "268:12:14"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "246:18:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "319:31:14",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "321:27:14",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "335:6:14"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "343:4:14",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "331:3:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "331:17:14"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "321:6:14"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "299:18:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "292:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "292:26:14"
															},
															"nodeType": "YulIf",
															"src": "289:61:14"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "409:111:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "430:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "437:3:14",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "442:10:14",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "433:3:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "433:20:14"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "423:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "423:31:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "423:31:14"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "474:1:14",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "477:4:14",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "467:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "467:15:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "467:15:14"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "502:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "505:4:14",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "495:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "495:15:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "495:15:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "365:18:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "388:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "396:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "385:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "385:14:14"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "362:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "362:38:14"
															},
															"nodeType": "YulIf",
															"src": "359:161:14"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "181:4:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "190:6:14",
														"type": ""
													}
												],
												"src": "146:380:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "587:65:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "604:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"name": "ptr",
																		"nodeType": "YulIdentifier",
																		"src": "607:3:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "597:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "597:14:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "597:14:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "620:26:14",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "638:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "641:4:14",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nodeType": "YulIdentifier",
																	"src": "628:9:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "628:18:14"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "620:4:14"
																}
															]
														}
													]
												},
												"name": "array_dataslot_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nodeType": "YulTypedName",
														"src": "570:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "578:4:14",
														"type": ""
													}
												],
												"src": "531:121:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "738:464:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "771:425:14",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "785:11:14",
																		"value": {
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "795:1:14",
																			"type": "",
																			"value": "0"
																		},
																		"variables": [
																			{
																				"name": "_1",
																				"nodeType": "YulTypedName",
																				"src": "789:2:14",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "816:2:14"
																				},
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "820:5:14"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "809:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "809:17:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "809:17:14"
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "839:31:14",
																		"value": {
																			"arguments": [
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "861:2:14"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "865:4:14",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "keccak256",
																				"nodeType": "YulIdentifier",
																				"src": "851:9:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "851:19:14"
																		},
																		"variables": [
																			{
																				"name": "data",
																				"nodeType": "YulTypedName",
																				"src": "843:4:14",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "883:57:14",
																		"value": {
																			"arguments": [
																				{
																					"name": "data",
																					"nodeType": "YulIdentifier",
																					"src": "906:4:14"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "916:1:14",
																							"type": "",
																							"value": "5"
																						},
																						{
																							"arguments": [
																								{
																									"name": "startIndex",
																									"nodeType": "YulIdentifier",
																									"src": "923:10:14"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "935:2:14",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "919:3:14"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "919:19:14"
																						}
																					],
																					"functionName": {
																						"name": "shr",
																						"nodeType": "YulIdentifier",
																						"src": "912:3:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "912:27:14"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "902:3:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "902:38:14"
																		},
																		"variables": [
																			{
																				"name": "deleteStart",
																				"nodeType": "YulTypedName",
																				"src": "887:11:14",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "977:23:14",
																			"statements": [
																				{
																					"nodeType": "YulAssignment",
																					"src": "979:19:14",
																					"value": {
																						"name": "data",
																						"nodeType": "YulIdentifier",
																						"src": "994:4:14"
																					},
																					"variableNames": [
																						{
																							"name": "deleteStart",
																							"nodeType": "YulIdentifier",
																							"src": "979:11:14"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "startIndex",
																					"nodeType": "YulIdentifier",
																					"src": "959:10:14"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "971:4:14",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nodeType": "YulIdentifier",
																				"src": "956:2:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "956:20:14"
																		},
																		"nodeType": "YulIf",
																		"src": "953:47:14"
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "1013:41:14",
																		"value": {
																			"arguments": [
																				{
																					"name": "data",
																					"nodeType": "YulIdentifier",
																					"src": "1027:4:14"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1037:1:14",
																							"type": "",
																							"value": "5"
																						},
																						{
																							"arguments": [
																								{
																									"name": "len",
																									"nodeType": "YulIdentifier",
																									"src": "1044:3:14"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "1049:2:14",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1040:3:14"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1040:12:14"
																						}
																					],
																					"functionName": {
																						"name": "shr",
																						"nodeType": "YulIdentifier",
																						"src": "1033:3:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1033:20:14"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1023:3:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1023:31:14"
																		},
																		"variables": [
																			{
																				"name": "_2",
																				"nodeType": "YulTypedName",
																				"src": "1017:2:14",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "1067:24:14",
																		"value": {
																			"name": "deleteStart",
																			"nodeType": "YulIdentifier",
																			"src": "1080:11:14"
																		},
																		"variables": [
																			{
																				"name": "start",
																				"nodeType": "YulTypedName",
																				"src": "1071:5:14",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "1165:21:14",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [
																							{
																								"name": "start",
																								"nodeType": "YulIdentifier",
																								"src": "1174:5:14"
																							},
																							{
																								"name": "_1",
																								"nodeType": "YulIdentifier",
																								"src": "1181:2:14"
																							}
																						],
																						"functionName": {
																							"name": "sstore",
																							"nodeType": "YulIdentifier",
																							"src": "1167:6:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1167:17:14"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "1167:17:14"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "start",
																					"nodeType": "YulIdentifier",
																					"src": "1115:5:14"
																				},
																				{
																					"name": "_2",
																					"nodeType": "YulIdentifier",
																					"src": "1122:2:14"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nodeType": "YulIdentifier",
																				"src": "1112:2:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1112:13:14"
																		},
																		"nodeType": "YulForLoop",
																		"post": {
																			"nodeType": "YulBlock",
																			"src": "1126:26:14",
																			"statements": [
																				{
																					"nodeType": "YulAssignment",
																					"src": "1128:22:14",
																					"value": {
																						"arguments": [
																							{
																								"name": "start",
																								"nodeType": "YulIdentifier",
																								"src": "1141:5:14"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1148:1:14",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "1137:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1137:13:14"
																					},
																					"variableNames": [
																						{
																							"name": "start",
																							"nodeType": "YulIdentifier",
																							"src": "1128:5:14"
																						}
																					]
																				}
																			]
																		},
																		"pre": {
																			"nodeType": "YulBlock",
																			"src": "1108:3:14",
																			"statements": []
																		},
																		"src": "1104:82:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "len",
																		"nodeType": "YulIdentifier",
																		"src": "754:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "759:2:14",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "751:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "751:11:14"
															},
															"nodeType": "YulIf",
															"src": "748:448:14"
														}
													]
												},
												"name": "clean_up_bytearray_end_slots_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "710:5:14",
														"type": ""
													},
													{
														"name": "len",
														"nodeType": "YulTypedName",
														"src": "717:3:14",
														"type": ""
													},
													{
														"name": "startIndex",
														"nodeType": "YulTypedName",
														"src": "722:10:14",
														"type": ""
													}
												],
												"src": "657:545:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1292:81:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1302:65:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nodeType": "YulIdentifier",
																				"src": "1317:4:14"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "1335:1:14",
																										"type": "",
																										"value": "3"
																									},
																									{
																										"name": "len",
																										"nodeType": "YulIdentifier",
																										"src": "1338:3:14"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "1331:3:14"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "1331:11:14"
																							},
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "1348:1:14",
																										"type": "",
																										"value": "0"
																									}
																								],
																								"functionName": {
																									"name": "not",
																									"nodeType": "YulIdentifier",
																									"src": "1344:3:14"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "1344:6:14"
																							}
																						],
																						"functionName": {
																							"name": "shr",
																							"nodeType": "YulIdentifier",
																							"src": "1327:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1327:24:14"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "1323:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1323:29:14"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1313:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1313:40:14"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1359:1:14",
																				"type": "",
																				"value": "1"
																			},
																			{
																				"name": "len",
																				"nodeType": "YulIdentifier",
																				"src": "1362:3:14"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "1355:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1355:11:14"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "1310:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1310:57:14"
															},
															"variableNames": [
																{
																	"name": "used",
																	"nodeType": "YulIdentifier",
																	"src": "1302:4:14"
																}
															]
														}
													]
												},
												"name": "extract_used_part_and_set_length_of_short_byte_array",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "1269:4:14",
														"type": ""
													},
													{
														"name": "len",
														"nodeType": "YulTypedName",
														"src": "1275:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "used",
														"nodeType": "YulTypedName",
														"src": "1283:4:14",
														"type": ""
													}
												],
												"src": "1207:166:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1474:1256:14",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1484:24:14",
															"value": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "1504:3:14"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1498:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1498:10:14"
															},
															"variables": [
																{
																	"name": "newLen",
																	"nodeType": "YulTypedName",
																	"src": "1488:6:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1551:22:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "1553:16:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1553:18:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1553:18:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "1523:6:14"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1539:2:14",
																						"type": "",
																						"value": "64"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1543:1:14",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nodeType": "YulIdentifier",
																					"src": "1535:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1535:10:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1547:1:14",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1531:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1531:18:14"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1520:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1520:30:14"
															},
															"nodeType": "YulIf",
															"src": "1517:56:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nodeType": "YulIdentifier",
																		"src": "1626:4:14"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "slot",
																						"nodeType": "YulIdentifier",
																						"src": "1664:4:14"
																					}
																				],
																				"functionName": {
																					"name": "sload",
																					"nodeType": "YulIdentifier",
																					"src": "1658:5:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1658:11:14"
																			}
																		],
																		"functionName": {
																			"name": "extract_byte_array_length",
																			"nodeType": "YulIdentifier",
																			"src": "1632:25:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1632:38:14"
																	},
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "1672:6:14"
																	}
																],
																"functionName": {
																	"name": "clean_up_bytearray_end_slots_string_storage",
																	"nodeType": "YulIdentifier",
																	"src": "1582:43:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1582:97:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1582:97:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1688:18:14",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1705:1:14",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "srcOffset",
																	"nodeType": "YulTypedName",
																	"src": "1692:9:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1715:23:14",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1734:4:14",
																"type": "",
																"value": "0x20"
															},
															"variables": [
																{
																	"name": "srcOffset_1",
																	"nodeType": "YulTypedName",
																	"src": "1719:11:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1747:24:14",
															"value": {
																"name": "srcOffset_1",
																"nodeType": "YulIdentifier",
																"src": "1760:11:14"
															},
															"variableNames": [
																{
																	"name": "srcOffset",
																	"nodeType": "YulIdentifier",
																	"src": "1747:9:14"
																}
															]
														},
														{
															"cases": [
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "1817:656:14",
																		"statements": [
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "1831:35:14",
																				"value": {
																					"arguments": [
																						{
																							"name": "newLen",
																							"nodeType": "YulIdentifier",
																							"src": "1850:6:14"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "1862:2:14",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nodeType": "YulIdentifier",
																								"src": "1858:3:14"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1858:7:14"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nodeType": "YulIdentifier",
																						"src": "1846:3:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1846:20:14"
																				},
																				"variables": [
																					{
																						"name": "loopEnd",
																						"nodeType": "YulTypedName",
																						"src": "1835:7:14",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "1879:49:14",
																				"value": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nodeType": "YulIdentifier",
																							"src": "1923:4:14"
																						}
																					],
																					"functionName": {
																						"name": "array_dataslot_string_storage",
																						"nodeType": "YulIdentifier",
																						"src": "1893:29:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1893:35:14"
																				},
																				"variables": [
																					{
																						"name": "dstPtr",
																						"nodeType": "YulTypedName",
																						"src": "1883:6:14",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "1941:10:14",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1950:1:14",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "i",
																						"nodeType": "YulTypedName",
																						"src": "1945:1:14",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "2028:172:14",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nodeType": "YulIdentifier",
																										"src": "2053:6:14"
																									},
																									{
																										"arguments": [
																											{
																												"arguments": [
																													{
																														"name": "src",
																														"nodeType": "YulIdentifier",
																														"src": "2071:3:14"
																													},
																													{
																														"name": "srcOffset",
																														"nodeType": "YulIdentifier",
																														"src": "2076:9:14"
																													}
																												],
																												"functionName": {
																													"name": "add",
																													"nodeType": "YulIdentifier",
																													"src": "2067:3:14"
																												},
																												"nodeType": "YulFunctionCall",
																												"src": "2067:19:14"
																											}
																										],
																										"functionName": {
																											"name": "mload",
																											"nodeType": "YulIdentifier",
																											"src": "2061:5:14"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "2061:26:14"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nodeType": "YulIdentifier",
																									"src": "2046:6:14"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "2046:42:14"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "2046:42:14"
																						},
																						{
																							"nodeType": "YulAssignment",
																							"src": "2105:24:14",
																							"value": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nodeType": "YulIdentifier",
																										"src": "2119:6:14"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "2127:1:14",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "2115:3:14"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "2115:14:14"
																							},
																							"variableNames": [
																								{
																									"name": "dstPtr",
																									"nodeType": "YulIdentifier",
																									"src": "2105:6:14"
																								}
																							]
																						},
																						{
																							"nodeType": "YulAssignment",
																							"src": "2146:40:14",
																							"value": {
																								"arguments": [
																									{
																										"name": "srcOffset",
																										"nodeType": "YulIdentifier",
																										"src": "2163:9:14"
																									},
																									{
																										"name": "srcOffset_1",
																										"nodeType": "YulIdentifier",
																										"src": "2174:11:14"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "2159:3:14"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "2159:27:14"
																							},
																							"variableNames": [
																								{
																									"name": "srcOffset",
																									"nodeType": "YulIdentifier",
																									"src": "2146:9:14"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "1975:1:14"
																						},
																						{
																							"name": "loopEnd",
																							"nodeType": "YulIdentifier",
																							"src": "1978:7:14"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nodeType": "YulIdentifier",
																						"src": "1972:2:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1972:14:14"
																				},
																				"nodeType": "YulForLoop",
																				"post": {
																					"nodeType": "YulBlock",
																					"src": "1987:28:14",
																					"statements": [
																						{
																							"nodeType": "YulAssignment",
																							"src": "1989:24:14",
																							"value": {
																								"arguments": [
																									{
																										"name": "i",
																										"nodeType": "YulIdentifier",
																										"src": "1998:1:14"
																									},
																									{
																										"name": "srcOffset_1",
																										"nodeType": "YulIdentifier",
																										"src": "2001:11:14"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "1994:3:14"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "1994:19:14"
																							},
																							"variableNames": [
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "1989:1:14"
																								}
																							]
																						}
																					]
																				},
																				"pre": {
																					"nodeType": "YulBlock",
																					"src": "1968:3:14",
																					"statements": []
																				},
																				"src": "1964:236:14"
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "2248:166:14",
																					"statements": [
																						{
																							"nodeType": "YulVariableDeclaration",
																							"src": "2266:43:14",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nodeType": "YulIdentifier",
																												"src": "2293:3:14"
																											},
																											{
																												"name": "srcOffset",
																												"nodeType": "YulIdentifier",
																												"src": "2298:9:14"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nodeType": "YulIdentifier",
																											"src": "2289:3:14"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "2289:19:14"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nodeType": "YulIdentifier",
																									"src": "2283:5:14"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "2283:26:14"
																							},
																							"variables": [
																								{
																									"name": "lastValue",
																									"nodeType": "YulTypedName",
																									"src": "2270:9:14",
																									"type": ""
																								}
																							]
																						},
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nodeType": "YulIdentifier",
																										"src": "2333:6:14"
																									},
																									{
																										"arguments": [
																											{
																												"name": "lastValue",
																												"nodeType": "YulIdentifier",
																												"src": "2345:9:14"
																											},
																											{
																												"arguments": [
																													{
																														"arguments": [
																															{
																																"arguments": [
																																	{
																																		"arguments": [
																																			{
																																				"kind": "number",
																																				"nodeType": "YulLiteral",
																																				"src": "2372:1:14",
																																				"type": "",
																																				"value": "3"
																																			},
																																			{
																																				"name": "newLen",
																																				"nodeType": "YulIdentifier",
																																				"src": "2375:6:14"
																																			}
																																		],
																																		"functionName": {
																																			"name": "shl",
																																			"nodeType": "YulIdentifier",
																																			"src": "2368:3:14"
																																		},
																																		"nodeType": "YulFunctionCall",
																																		"src": "2368:14:14"
																																	},
																																	{
																																		"kind": "number",
																																		"nodeType": "YulLiteral",
																																		"src": "2384:3:14",
																																		"type": "",
																																		"value": "248"
																																	}
																																],
																																"functionName": {
																																	"name": "and",
																																	"nodeType": "YulIdentifier",
																																	"src": "2364:3:14"
																																},
																																"nodeType": "YulFunctionCall",
																																"src": "2364:24:14"
																															},
																															{
																																"arguments": [
																																	{
																																		"kind": "number",
																																		"nodeType": "YulLiteral",
																																		"src": "2394:1:14",
																																		"type": "",
																																		"value": "0"
																																	}
																																],
																																"functionName": {
																																	"name": "not",
																																	"nodeType": "YulIdentifier",
																																	"src": "2390:3:14"
																																},
																																"nodeType": "YulFunctionCall",
																																"src": "2390:6:14"
																															}
																														],
																														"functionName": {
																															"name": "shr",
																															"nodeType": "YulIdentifier",
																															"src": "2360:3:14"
																														},
																														"nodeType": "YulFunctionCall",
																														"src": "2360:37:14"
																													}
																												],
																												"functionName": {
																													"name": "not",
																													"nodeType": "YulIdentifier",
																													"src": "2356:3:14"
																												},
																												"nodeType": "YulFunctionCall",
																												"src": "2356:42:14"
																											}
																										],
																										"functionName": {
																											"name": "and",
																											"nodeType": "YulIdentifier",
																											"src": "2341:3:14"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "2341:58:14"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nodeType": "YulIdentifier",
																									"src": "2326:6:14"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "2326:74:14"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "2326:74:14"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "loopEnd",
																							"nodeType": "YulIdentifier",
																							"src": "2219:7:14"
																						},
																						{
																							"name": "newLen",
																							"nodeType": "YulIdentifier",
																							"src": "2228:6:14"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nodeType": "YulIdentifier",
																						"src": "2216:2:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2216:19:14"
																				},
																				"nodeType": "YulIf",
																				"src": "2213:201:14"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nodeType": "YulIdentifier",
																							"src": "2434:4:14"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "2448:1:14",
																											"type": "",
																											"value": "1"
																										},
																										{
																											"name": "newLen",
																											"nodeType": "YulIdentifier",
																											"src": "2451:6:14"
																										}
																									],
																									"functionName": {
																										"name": "shl",
																										"nodeType": "YulIdentifier",
																										"src": "2444:3:14"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "2444:14:14"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "2460:1:14",
																									"type": "",
																									"value": "1"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "2440:3:14"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "2440:22:14"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nodeType": "YulIdentifier",
																						"src": "2427:6:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2427:36:14"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "2427:36:14"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "1810:663:14",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1815:1:14",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "2490:234:14",
																		"statements": [
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "2504:14:14",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2517:1:14",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "value",
																						"nodeType": "YulTypedName",
																						"src": "2508:5:14",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "2553:67:14",
																					"statements": [
																						{
																							"nodeType": "YulAssignment",
																							"src": "2571:35:14",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nodeType": "YulIdentifier",
																												"src": "2590:3:14"
																											},
																											{
																												"name": "srcOffset",
																												"nodeType": "YulIdentifier",
																												"src": "2595:9:14"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nodeType": "YulIdentifier",
																											"src": "2586:3:14"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "2586:19:14"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nodeType": "YulIdentifier",
																									"src": "2580:5:14"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "2580:26:14"
																							},
																							"variableNames": [
																								{
																									"name": "value",
																									"nodeType": "YulIdentifier",
																									"src": "2571:5:14"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"name": "newLen",
																					"nodeType": "YulIdentifier",
																					"src": "2534:6:14"
																				},
																				"nodeType": "YulIf",
																				"src": "2531:89:14"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nodeType": "YulIdentifier",
																							"src": "2640:4:14"
																						},
																						{
																							"arguments": [
																								{
																									"name": "value",
																									"nodeType": "YulIdentifier",
																									"src": "2699:5:14"
																								},
																								{
																									"name": "newLen",
																									"nodeType": "YulIdentifier",
																									"src": "2706:6:14"
																								}
																							],
																							"functionName": {
																								"name": "extract_used_part_and_set_length_of_short_byte_array",
																								"nodeType": "YulIdentifier",
																								"src": "2646:52:14"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "2646:67:14"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nodeType": "YulIdentifier",
																						"src": "2633:6:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2633:81:14"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "2633:81:14"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "2482:242:14",
																	"value": "default"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "1790:6:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1798:2:14",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1787:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1787:14:14"
															},
															"nodeType": "YulSwitch",
															"src": "1780:944:14"
														}
													]
												},
												"name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nodeType": "YulTypedName",
														"src": "1459:4:14",
														"type": ""
													},
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "1465:3:14",
														"type": ""
													}
												],
												"src": "1378:1352:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2783:174:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2793:16:14",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2804:1:14"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2807:1:14"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2800:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2800:9:14"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "2793:3:14"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2840:111:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2861:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2868:3:14",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2873:10:14",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "2864:3:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2864:20:14"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2854:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2854:31:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2854:31:14"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2905:1:14",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2908:4:14",
																					"type": "",
																					"value": "0x11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2898:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2898:15:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2898:15:14"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2933:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2936:4:14",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2926:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2926:15:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2926:15:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2824:1:14"
																	},
																	{
																		"name": "sum",
																		"nodeType": "YulIdentifier",
																		"src": "2827:3:14"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2821:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2821:10:14"
															},
															"nodeType": "YulIf",
															"src": "2818:133:14"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "2766:1:14",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "2769:1:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "2775:3:14",
														"type": ""
													}
												],
												"src": "2735:222:14"
											}
										]
									},
									"contents": "{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n}",
									"id": 14,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60806040523480156200001157600080fd5b506040518060400160405280600c81526020016b576562334275696c6465727360a01b8152506040518060400160405280600381526020016257453360e81b8152508160029081620000649190620001a4565b506003620000738282620001a4565b505060008055506200008533620000ad565b600a80546001600160a01b03191630179055620000a460b44262000270565b60095562000298565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200012a57607f821691505b6020821081036200014b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200019f57600081815260208120601f850160051c810160208610156200017a5750805b601f850160051c820191505b818110156200019b5782815560010162000186565b5050505b505050565b81516001600160401b03811115620001c057620001c0620000ff565b620001d881620001d1845462000115565b8462000151565b602080601f831160018114620002105760008415620001f75750858301515b600019600386901b1c1916600185901b1785556200019b565b600085815260208120601f198616915b82811015620002415788860151825594840194600190910190840162000220565b5085821015620002605787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808201808211156200029257634e487b7160e01b600052601160045260246000fd5b92915050565b611b3180620002a86000396000f3fe6080604052600436106101cd5760003560e01c806370a08231116100f7578063c23fcdef11610095578063d64297f911610064578063d64297f9146104fb578063e5496fc814610528578063e985e9c514610548578063f2fde38b1461056857600080fd5b8063c23fcdef14610481578063c285e107146104b1578063c87b56dd146104c6578063d304c4bc146104e657600080fd5b806395d89b41116100d157806395d89b4114610417578063a22cb4651461042c578063a6a3b5b41461044c578063b88d4fde1461046157600080fd5b806370a08231146103c4578063715018a6146103e45780638da5cb5b146103f957600080fd5b806323b872dd1161016f57806342842e0e1161013e57806342842e0e146103525780636352211e146103725780636817c76c146103925780636f1d10ce146103ae57600080fd5b806323b872dd146102ea578063278ecde11461030a57806331c864e81461032a5780633ccfd60b1461033d57600080fd5b8063081812fc116101ab578063081812fc14610257578063095ea7b31461028f5780630cb61f6c146102b157806318160ddd146102d157600080fd5b806301ffc9a7146101d257806304cd52941461020757806306fdde0314610235575b600080fd5b3480156101de57600080fd5b506101f26101ed3660046116ff565b610588565b60405190151581526020015b60405180910390f35b34801561021357600080fd5b5061022761022236600461171c565b6105da565b6040519081526020016101fe565b34801561024157600080fd5b5061024a610608565b6040516101fe9190611785565b34801561026357600080fd5b5061027761027236600461171c565b61069a565b6040516001600160a01b0390911681526020016101fe565b34801561029b57600080fd5b506102af6102aa3660046117b4565b6106de565b005b3480156102bd57600080fd5b50600a54610277906001600160a01b031681565b3480156102dd57600080fd5b5060015460005403610227565b3480156102f657600080fd5b506102af6103053660046117de565b61076b565b34801561031657600080fd5b506102af61032536600461171c565b610776565b6102af61033836600461171c565b610870565b34801561034957600080fd5b506102af6109e1565b34801561035e57600080fd5b506102af61036d3660046117de565b610a48565b34801561037e57600080fd5b5061027761038d36600461171c565b610a63565b34801561039e57600080fd5b50610227670de0b6b3a764000081565b3480156103ba57600080fd5b5061022760095481565b3480156103d057600080fd5b506102276103df36600461181a565b610a75565b3480156103f057600080fd5b506102af610ac4565b34801561040557600080fd5b506008546001600160a01b0316610277565b34801561042357600080fd5b5061024a610ad8565b34801561043857600080fd5b506102af610447366004611835565b610ae7565b34801561045857600080fd5b5061022760b481565b34801561046d57600080fd5b506102af61047c366004611887565b610b7c565b34801561048d57600080fd5b506101f261049c36600461171c565b600c6020526000908152604090205460ff1681565b3480156104bd57600080fd5b50610227606481565b3480156104d257600080fd5b5061024a6104e136600461171c565b610bcd565b3480156104f257600080fd5b50610227600581565b34801561050757600080fd5b5061022761051636600461171c565b600b6020526000908152604090205481565b34801561053457600080fd5b5061022761054336600461171c565b610c51565b34801561055457600080fd5b506101f2610563366004611963565b610c83565b34801561057457600080fd5b506102af61058336600461181a565b610cb1565b60006001600160e01b031982166380ac58cd60e01b14806105b957506001600160e01b03198216635b5e139f60e01b145b806105d457506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000818152600c602052604081205460ff16156105f957506000919050565b50670de0b6b3a7640000919050565b60606002805461061790611996565b80601f016020809104026020016040519081016040528092919081815260200182805461064390611996565b80156106905780601f1061066557610100808354040283529160200191610690565b820191906000526020600020905b81548152906001019060200180831161067357829003601f168201915b5050505050905090565b60006106a582610d27565b6106c2576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b60006106e982610a63565b9050806001600160a01b0316836001600160a01b03160361071d5760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b0382161480159061073d575061073b8133610c83565b155b1561075b576040516367d9dca160e11b815260040160405180910390fd5b610766838383610d52565b505050565b610766838383610dae565b61077f81610c51565b42106107cb5760405162461bcd60e51b81526020600482015260166024820152752932b33ab732102832b934b7b21022bc3834b932b21760511b60448201526064015b60405180910390fd5b6107d481610a63565b6001600160a01b0316336001600160a01b0316146108235760405162461bcd60e51b815260206004820152600c60248201526b139bdd081e5bdd5c8813919560a21b60448201526064016107c2565b600061082e826105da565b600a549091506108499033906001600160a01b031684610dae565b6000828152600c60205260409020805460ff1916600117905561086c3382610f9e565b5050565b61088281670de0b6b3a76400006119e6565b3410156108c55760405162461bcd60e51b81526020600482015260116024820152702737ba1032b737bab3b410333ab732399760791b60448201526064016107c2565b336000908152600560208190526040909120548290600160401b900467ffffffffffffffff166108f591906119fd565b11156109305760405162461bcd60e51b815260206004820152600a602482015269135a5b9d08131a5b5a5d60b21b60448201526064016107c2565b606461093b60005490565b11156109895760405162461bcd60e51b815260206004820152601860248201527f537570706c79204578636565642e20536f6c64206f75742e000000000000000060448201526064016107c2565b61099333826110b7565b61099e60b4426119fd565b600955600080546109b0908390611a10565b90505b60005481101561086c576009546000828152600b6020526040902055806109d981611a23565b9150506109b3565b6109e96110d1565b6009544211610a3a5760405162461bcd60e51b815260206004820152601f60248201527f49742773206e6f7420706173742074686520726566756e6420706572696f640060448201526064016107c2565b47610a453382610f9e565b50565b61076683838360405180602001604052806000815250610b7c565b6000610a6e8261112b565b5192915050565b60006001600160a01b038216610a9e576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b031660009081526005602052604090205467ffffffffffffffff1690565b610acc6110d1565b610ad66000611247565b565b60606003805461061790611996565b336001600160a01b03831603610b105760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610b87848484610dae565b6001600160a01b0383163b15158015610ba95750610ba784848484611299565b155b15610bc7576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b6060610bd882610d27565b610bf557604051630a14c4b560e41b815260040160405180910390fd5b6000610bff611384565b90508051600003610c1f5760405180602001604052806000815250610c4a565b80610c29846113a4565b604051602001610c3a929190611a3c565b6040516020818303038152906040525b9392505050565b6000818152600c602052604081205460ff1615610c7057506000919050565b506000908152600b602052604090205490565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b610cb96110d1565b6001600160a01b038116610d1e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107c2565b610a4581611247565b60008054821080156105d4575050600090815260046020526040902054600160e01b900460ff161590565b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000610db98261112b565b9050836001600160a01b031681600001516001600160a01b031614610df05760405162a1148160e81b815260040160405180910390fd5b6000336001600160a01b0386161480610e0e5750610e0e8533610c83565b80610e29575033610e1e8461069a565b6001600160a01b0316145b905080610e4957604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b038416610e7057604051633a954ecd60e21b815260040160405180910390fd5b610e7c60008487610d52565b6001600160a01b038581166000908152600560209081526040808320805467ffffffffffffffff1980821667ffffffffffffffff92831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600490945282852080546001600160e01b031916909417600160a01b42909216919091021783558701808452922080549193909116610f52576000548214610f52578054602086015167ffffffffffffffff16600160a01b026001600160e01b03199091166001600160a01b038a16171781555b50505082846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b5050505050565b80471015610fee5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016107c2565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461103b576040519150601f19603f3d011682016040523d82523d6000602084013e611040565b606091505b50509050806107665760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016107c2565b61086c828260405180602001604052806000815250611437565b6008546001600160a01b03163314610ad65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107c2565b60408051606081018252600080825260208201819052918101919091528160005481101561122e57600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b810467ffffffffffffffff1692820192909252600160e01b90910460ff1615159181018290529061122c5780516001600160a01b0316156111c2579392505050565b5060001901600081815260046020908152604091829020825160608101845290546001600160a01b038116808352600160a01b820467ffffffffffffffff1693830193909352600160e01b900460ff1615159281019290925215611227579392505050565b6111c2565b505b604051636f96cda160e11b815260040160405180910390fd5b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a02906112ce903390899088908890600401611a6b565b6020604051808303816000875af1925050508015611309575060408051601f3d908101601f1916820190925261130691810190611aa8565b60015b611367573d808015611337576040519150601f19603f3d011682016040523d82523d6000602084013e61133c565b606091505b50805160000361135f576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b6060604051806060016040528060368152602001611ac660369139905090565b606060006113b183611444565b600101905060008167ffffffffffffffff8111156113d1576113d1611871565b6040519080825280601f01601f1916602001820160405280156113fb576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461140557509392505050565b610766838383600161151c565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106114835772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106114af576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106114cd57662386f26fc10000830492506010015b6305f5e10083106114e5576305f5e100830492506008015b61271083106114f957612710830492506004015b6064831061150b576064830492506002015b600a83106105d45760010192915050565b6000546001600160a01b03851661154557604051622e076360e81b815260040160405180910390fd5b836000036115665760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b038516600081815260056020908152604080832080546fffffffffffffffffffffffffffffffff19811667ffffffffffffffff8083168c018116918217600160401b67ffffffffffffffff1990941690921783900481168c01811690920217909155858452600490925290912080546001600160e01b031916909217600160a01b42909216919091021790558080850183801561161357506001600160a01b0387163b15155b1561169b575b60405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a46116646000888480600101955088611299565b611681576040516368d2bf6b60e11b815260040160405180910390fd5b80820361161957826000541461169657600080fd5b6116e0565b5b6040516001830192906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a480820361169c575b50600055610f97565b6001600160e01b031981168114610a4557600080fd5b60006020828403121561171157600080fd5b8135610c4a816116e9565b60006020828403121561172e57600080fd5b5035919050565b60005b83811015611750578181015183820152602001611738565b50506000910152565b60008151808452611771816020860160208601611735565b601f01601f19169290920160200192915050565b602081526000610c4a6020830184611759565b80356001600160a01b03811681146117af57600080fd5b919050565b600080604083850312156117c757600080fd5b6117d083611798565b946020939093013593505050565b6000806000606084860312156117f357600080fd5b6117fc84611798565b925061180a60208501611798565b9150604084013590509250925092565b60006020828403121561182c57600080fd5b610c4a82611798565b6000806040838503121561184857600080fd5b61185183611798565b91506020830135801515811461186657600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561189d57600080fd5b6118a685611798565b93506118b460208601611798565b925060408501359150606085013567ffffffffffffffff808211156118d857600080fd5b818701915087601f8301126118ec57600080fd5b8135818111156118fe576118fe611871565b604051601f8201601f19908116603f0116810190838211818310171561192657611926611871565b816040528281528a602084870101111561193f57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561197657600080fd5b61197f83611798565b915061198d60208401611798565b90509250929050565b600181811c908216806119aa57607f821691505b6020821081036119ca57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176105d4576105d46119d0565b808201808211156105d4576105d46119d0565b818103818111156105d4576105d46119d0565b600060018201611a3557611a356119d0565b5060010190565b60008351611a4e818460208801611735565b835190830190611a62818360208801611735565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611a9e90830184611759565b9695505050505050565b600060208284031215611aba57600080fd5b8151610c4a816116e956fe697066733a2f2f516d62736552544a5753734c666873695777754232523745744e39335478666f614d7a31533546587473464555422fa2646970667358221220828fc8003228577cd24ee510aba51fdc6fa0ba9917fdf4227456a06df9a78d0064736f6c63430008120033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xC DUP2 MSTORE PUSH1 0x20 ADD PUSH12 0x576562334275696C64657273 PUSH1 0xA0 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x574533 PUSH1 0xE8 SHL DUP2 MSTORE POP DUP2 PUSH1 0x2 SWAP1 DUP2 PUSH3 0x64 SWAP2 SWAP1 PUSH3 0x1A4 JUMP JUMPDEST POP PUSH1 0x3 PUSH3 0x73 DUP3 DUP3 PUSH3 0x1A4 JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 SSTORE POP PUSH3 0x85 CALLER PUSH3 0xAD JUMP JUMPDEST PUSH1 0xA DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND ADDRESS OR SWAP1 SSTORE PUSH3 0xA4 PUSH1 0xB4 TIMESTAMP PUSH3 0x270 JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH3 0x298 JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x12A JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x14B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x19F JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x17A JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x19B JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x186 JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x1C0 JUMPI PUSH3 0x1C0 PUSH3 0xFF JUMP JUMPDEST PUSH3 0x1D8 DUP2 PUSH3 0x1D1 DUP5 SLOAD PUSH3 0x115 JUMP JUMPDEST DUP5 PUSH3 0x151 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x210 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x1F7 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x19B JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x241 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x220 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x260 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH3 0x292 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1B31 DUP1 PUSH3 0x2A8 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1CD JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0xC23FCDEF GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xD64297F9 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xD64297F9 EQ PUSH2 0x4FB JUMPI DUP1 PUSH4 0xE5496FC8 EQ PUSH2 0x528 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x548 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x568 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xC23FCDEF EQ PUSH2 0x481 JUMPI DUP1 PUSH4 0xC285E107 EQ PUSH2 0x4B1 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x4C6 JUMPI DUP1 PUSH4 0xD304C4BC EQ PUSH2 0x4E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95D89B41 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x417 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x42C JUMPI DUP1 PUSH4 0xA6A3B5B4 EQ PUSH2 0x44C JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x461 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x3C4 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x3E4 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x3F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x16F JUMPI DUP1 PUSH4 0x42842E0E GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x352 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x372 JUMPI DUP1 PUSH4 0x6817C76C EQ PUSH2 0x392 JUMPI DUP1 PUSH4 0x6F1D10CE EQ PUSH2 0x3AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD EQ PUSH2 0x2EA JUMPI DUP1 PUSH4 0x278ECDE1 EQ PUSH2 0x30A JUMPI DUP1 PUSH4 0x31C864E8 EQ PUSH2 0x32A JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x33D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x81812FC GT PUSH2 0x1AB JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x257 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x28F JUMPI DUP1 PUSH4 0xCB61F6C EQ PUSH2 0x2B1 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x2D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1D2 JUMPI DUP1 PUSH4 0x4CD5294 EQ PUSH2 0x207 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x235 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x1ED CALLDATASIZE PUSH1 0x4 PUSH2 0x16FF JUMP JUMPDEST PUSH2 0x588 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x213 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x227 PUSH2 0x222 CALLDATASIZE PUSH1 0x4 PUSH2 0x171C JUMP JUMPDEST PUSH2 0x5DA JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x241 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24A PUSH2 0x608 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FE SWAP2 SWAP1 PUSH2 0x1785 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x263 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x277 PUSH2 0x272 CALLDATASIZE PUSH1 0x4 PUSH2 0x171C JUMP JUMPDEST PUSH2 0x69A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x29B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AF PUSH2 0x2AA CALLDATASIZE PUSH1 0x4 PUSH2 0x17B4 JUMP JUMPDEST PUSH2 0x6DE JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xA SLOAD PUSH2 0x277 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH1 0x0 SLOAD SUB PUSH2 0x227 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AF PUSH2 0x305 CALLDATASIZE PUSH1 0x4 PUSH2 0x17DE JUMP JUMPDEST PUSH2 0x76B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x316 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AF PUSH2 0x325 CALLDATASIZE PUSH1 0x4 PUSH2 0x171C JUMP JUMPDEST PUSH2 0x776 JUMP JUMPDEST PUSH2 0x2AF PUSH2 0x338 CALLDATASIZE PUSH1 0x4 PUSH2 0x171C JUMP JUMPDEST PUSH2 0x870 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x349 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AF PUSH2 0x9E1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x35E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AF PUSH2 0x36D CALLDATASIZE PUSH1 0x4 PUSH2 0x17DE JUMP JUMPDEST PUSH2 0xA48 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x37E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x277 PUSH2 0x38D CALLDATASIZE PUSH1 0x4 PUSH2 0x171C JUMP JUMPDEST PUSH2 0xA63 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x227 PUSH8 0xDE0B6B3A7640000 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x227 PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x227 PUSH2 0x3DF CALLDATASIZE PUSH1 0x4 PUSH2 0x181A JUMP JUMPDEST PUSH2 0xA75 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AF PUSH2 0xAC4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x405 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x277 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x423 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24A PUSH2 0xAD8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x438 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AF PUSH2 0x447 CALLDATASIZE PUSH1 0x4 PUSH2 0x1835 JUMP JUMPDEST PUSH2 0xAE7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x458 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x227 PUSH1 0xB4 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x46D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AF PUSH2 0x47C CALLDATASIZE PUSH1 0x4 PUSH2 0x1887 JUMP JUMPDEST PUSH2 0xB7C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x48D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x49C CALLDATASIZE PUSH1 0x4 PUSH2 0x171C JUMP JUMPDEST PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x227 PUSH1 0x64 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24A PUSH2 0x4E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x171C JUMP JUMPDEST PUSH2 0xBCD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x227 PUSH1 0x5 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x507 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x227 PUSH2 0x516 CALLDATASIZE PUSH1 0x4 PUSH2 0x171C JUMP JUMPDEST PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x534 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x227 PUSH2 0x543 CALLDATASIZE PUSH1 0x4 PUSH2 0x171C JUMP JUMPDEST PUSH2 0xC51 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x554 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x563 CALLDATASIZE PUSH1 0x4 PUSH2 0x1963 JUMP JUMPDEST PUSH2 0xC83 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x574 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AF PUSH2 0x583 CALLDATASIZE PUSH1 0x4 PUSH2 0x181A JUMP JUMPDEST PUSH2 0xCB1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x5B9 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x5D4 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x5F9 JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST POP PUSH8 0xDE0B6B3A7640000 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x617 SWAP1 PUSH2 0x1996 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x643 SWAP1 PUSH2 0x1996 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x690 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x665 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x690 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x673 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6A5 DUP3 PUSH2 0xD27 JUMP JUMPDEST PUSH2 0x6C2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x33D1C039 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6E9 DUP3 PUSH2 0xA63 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x71D JUMPI PUSH1 0x40 MLOAD PUSH4 0x250FDEE3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 ISZERO SWAP1 PUSH2 0x73D JUMPI POP PUSH2 0x73B DUP2 CALLER PUSH2 0xC83 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x75B JUMPI PUSH1 0x40 MLOAD PUSH4 0x67D9DCA1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x766 DUP4 DUP4 DUP4 PUSH2 0xD52 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x766 DUP4 DUP4 DUP4 PUSH2 0xDAE JUMP JUMPDEST PUSH2 0x77F DUP2 PUSH2 0xC51 JUMP JUMPDEST TIMESTAMP LT PUSH2 0x7CB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x2932B33AB732102832B934B7B21022BC3834B932B217 PUSH1 0x51 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7D4 DUP2 PUSH2 0xA63 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x823 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x139BDD081E5BDD5C88139195 PUSH1 0xA2 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x7C2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x82E DUP3 PUSH2 0x5DA JUMP JUMPDEST PUSH1 0xA SLOAD SWAP1 SWAP2 POP PUSH2 0x849 SWAP1 CALLER SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH2 0xDAE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x86C CALLER DUP3 PUSH2 0xF9E JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x882 DUP2 PUSH8 0xDE0B6B3A7640000 PUSH2 0x19E6 JUMP JUMPDEST CALLVALUE LT ISZERO PUSH2 0x8C5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x2737BA1032B737BAB3B410333AB7323997 PUSH1 0x79 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x7C2 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD DUP3 SWAP1 PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH2 0x8F5 SWAP2 SWAP1 PUSH2 0x19FD JUMP JUMPDEST GT ISZERO PUSH2 0x930 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH10 0x135A5B9D08131A5B5A5D PUSH1 0xB2 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x7C2 JUMP JUMPDEST PUSH1 0x64 PUSH2 0x93B PUSH1 0x0 SLOAD SWAP1 JUMP JUMPDEST GT ISZERO PUSH2 0x989 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537570706C79204578636565642E20536F6C64206F75742E0000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x7C2 JUMP JUMPDEST PUSH2 0x993 CALLER DUP3 PUSH2 0x10B7 JUMP JUMPDEST PUSH2 0x99E PUSH1 0xB4 TIMESTAMP PUSH2 0x19FD JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH1 0x0 DUP1 SLOAD PUSH2 0x9B0 SWAP1 DUP4 SWAP1 PUSH2 0x1A10 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x0 SLOAD DUP2 LT ISZERO PUSH2 0x86C JUMPI PUSH1 0x9 SLOAD PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE DUP1 PUSH2 0x9D9 DUP2 PUSH2 0x1A23 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x9B3 JUMP JUMPDEST PUSH2 0x9E9 PUSH2 0x10D1 JUMP JUMPDEST PUSH1 0x9 SLOAD TIMESTAMP GT PUSH2 0xA3A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x49742773206E6F7420706173742074686520726566756E6420706572696F6400 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x7C2 JUMP JUMPDEST SELFBALANCE PUSH2 0xA45 CALLER DUP3 PUSH2 0xF9E JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x766 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xB7C JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA6E DUP3 PUSH2 0x112B JUMP JUMPDEST MLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xA9E JUMPI PUSH1 0x40 MLOAD PUSH4 0x23D3AD81 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0xACC PUSH2 0x10D1 JUMP JUMPDEST PUSH2 0xAD6 PUSH1 0x0 PUSH2 0x1247 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x617 SWAP1 PUSH2 0x1996 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SUB PUSH2 0xB10 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB06307DB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP1 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0xB87 DUP5 DUP5 DUP5 PUSH2 0xDAE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE ISZERO ISZERO DUP1 ISZERO PUSH2 0xBA9 JUMPI POP PUSH2 0xBA7 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1299 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0xBC7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xBD8 DUP3 PUSH2 0xD27 JUMP JUMPDEST PUSH2 0xBF5 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA14C4B5 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBFF PUSH2 0x1384 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0xC1F JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xC4A JUMP JUMPDEST DUP1 PUSH2 0xC29 DUP5 PUSH2 0x13A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xC3A SWAP3 SWAP2 SWAP1 PUSH2 0x1A3C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xC70 JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0xCB9 PUSH2 0x10D1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xD1E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x7C2 JUMP JUMPDEST PUSH2 0xA45 DUP2 PUSH2 0x1247 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP3 LT DUP1 ISZERO PUSH2 0x5D4 JUMPI POP POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP6 SWAP4 SWAP2 DUP6 AND SWAP2 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDB9 DUP3 PUSH2 0x112B JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xDF0 JUMPI PUSH1 0x40 MLOAD PUSH3 0xA11481 PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND EQ DUP1 PUSH2 0xE0E JUMPI POP PUSH2 0xE0E DUP6 CALLER PUSH2 0xC83 JUMP JUMPDEST DUP1 PUSH2 0xE29 JUMPI POP CALLER PUSH2 0xE1E DUP5 PUSH2 0x69A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP1 POP DUP1 PUSH2 0xE49 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2CE44B5F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0xE70 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3A954ECD PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xE7C PUSH1 0x0 DUP5 DUP8 PUSH2 0xD52 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT DUP1 DUP3 AND PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP4 AND PUSH1 0x0 NOT ADD DUP4 AND OR SWAP1 SWAP3 SSTORE DUP10 DUP7 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD SWAP4 DUP5 AND SWAP4 DUP4 AND PUSH1 0x1 SWAP1 DUP2 ADD DUP5 AND SWAP5 SWAP1 SWAP5 OR SWAP1 SSTORE DUP10 DUP7 MSTORE PUSH1 0x4 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP1 SWAP5 OR PUSH1 0x1 PUSH1 0xA0 SHL TIMESTAMP SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 MUL OR DUP4 SSTORE DUP8 ADD DUP1 DUP5 MSTORE SWAP3 KECCAK256 DUP1 SLOAD SWAP2 SWAP4 SWAP1 SWAP2 AND PUSH2 0xF52 JUMPI PUSH1 0x0 SLOAD DUP3 EQ PUSH2 0xF52 JUMPI DUP1 SLOAD PUSH1 0x20 DUP7 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND OR OR DUP2 SSTORE JUMPDEST POP POP POP DUP3 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP POP POP POP JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0xFEE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x7C2 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x103B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1040 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x766 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20756E61626C6520746F2073656E642076616C75652C2072 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6563697069656E74206D61792068617665207265766572746564000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x7C2 JUMP JUMPDEST PUSH2 0x86C DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1437 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xAD6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x7C2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 PUSH1 0x0 SLOAD DUP2 LT ISZERO PUSH2 0x122E JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE SWAP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0xA0 SHL DUP2 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 SWAP2 DIV PUSH1 0xFF AND ISZERO ISZERO SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 PUSH2 0x122C JUMPI DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x11C2 JUMPI SWAP4 SWAP3 POP POP POP JUMP JUMPDEST POP PUSH1 0x0 NOT ADD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE SWAP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP1 DUP4 MSTORE PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP4 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE ISZERO PUSH2 0x1227 JUMPI SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x11C2 JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6F96CDA1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x12CE SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1A6B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1309 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1306 SWAP2 DUP2 ADD SWAP1 PUSH2 0x1AA8 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1367 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1337 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x133C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x135F JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x36 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1AC6 PUSH1 0x36 SWAP2 CODECOPY SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x13B1 DUP4 PUSH2 0x1444 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x13D1 JUMPI PUSH2 0x13D1 PUSH2 0x1871 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x13FB JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x1405 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x766 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x151C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0x1483 JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x14AF JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x14CD JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x14E5 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x14F9 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x150B JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x5D4 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x1545 JUMPI PUSH1 0x40 MLOAD PUSH3 0x2E0763 PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 PUSH1 0x0 SUB PUSH2 0x1566 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB562E8DD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP2 AND PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP4 AND DUP13 ADD DUP2 AND SWAP2 DUP3 OR PUSH1 0x1 PUSH1 0x40 SHL PUSH8 0xFFFFFFFFFFFFFFFF NOT SWAP1 SWAP5 AND SWAP1 SWAP3 OR DUP4 SWAP1 DIV DUP2 AND DUP13 ADD DUP2 AND SWAP1 SWAP3 MUL OR SWAP1 SWAP2 SSTORE DUP6 DUP5 MSTORE PUSH1 0x4 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP1 SWAP3 OR PUSH1 0x1 PUSH1 0xA0 SHL TIMESTAMP SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 MUL OR SWAP1 SSTORE DUP1 DUP1 DUP6 ADD DUP4 DUP1 ISZERO PUSH2 0x1613 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND EXTCODESIZE ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x169B JUMPI JUMPDEST PUSH1 0x40 MLOAD DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 PUSH2 0x1664 PUSH1 0x0 DUP9 DUP5 DUP1 PUSH1 0x1 ADD SWAP6 POP DUP9 PUSH2 0x1299 JUMP JUMPDEST PUSH2 0x1681 JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP3 SUB PUSH2 0x1619 JUMPI DUP3 PUSH1 0x0 SLOAD EQ PUSH2 0x1696 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16E0 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 DUP4 ADD SWAP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 DUP1 DUP3 SUB PUSH2 0x169C JUMPI JUMPDEST POP PUSH1 0x0 SSTORE PUSH2 0xF97 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xA45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1711 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xC4A DUP2 PUSH2 0x16E9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x172E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1750 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1738 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1771 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1735 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xC4A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1759 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x17AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x17C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x17D0 DUP4 PUSH2 0x1798 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x17F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x17FC DUP5 PUSH2 0x1798 JUMP JUMPDEST SWAP3 POP PUSH2 0x180A PUSH1 0x20 DUP6 ADD PUSH2 0x1798 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x182C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC4A DUP3 PUSH2 0x1798 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1848 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1851 DUP4 PUSH2 0x1798 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1866 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x189D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x18A6 DUP6 PUSH2 0x1798 JUMP JUMPDEST SWAP4 POP PUSH2 0x18B4 PUSH1 0x20 DUP7 ADD PUSH2 0x1798 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x18D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x18EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x18FE JUMPI PUSH2 0x18FE PUSH2 0x1871 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x1926 JUMPI PUSH2 0x1926 PUSH2 0x1871 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x193F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1976 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x197F DUP4 PUSH2 0x1798 JUMP JUMPDEST SWAP2 POP PUSH2 0x198D PUSH1 0x20 DUP5 ADD PUSH2 0x1798 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x19AA JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x19CA JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x5D4 JUMPI PUSH2 0x5D4 PUSH2 0x19D0 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x5D4 JUMPI PUSH2 0x5D4 PUSH2 0x19D0 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x5D4 JUMPI PUSH2 0x5D4 PUSH2 0x19D0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x1A35 JUMPI PUSH2 0x1A35 PUSH2 0x19D0 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x1A4E DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x1735 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x1A62 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x1735 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1A9E SWAP1 DUP4 ADD DUP5 PUSH2 0x1759 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1ABA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xC4A DUP2 PUSH2 0x16E9 JUMP INVALID PUSH10 0x7066733A2F2F516D6273 PUSH6 0x52544A575373 0x4C PUSH7 0x68736957777542 ORIGIN MSTORE CALLDATACOPY GASLIMIT PUSH21 0x4E39335478666F614D7A3153354658747346455542 0x2F LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP3 DUP16 0xC8 STOP ORIGIN 0x28 JUMPI PUSH29 0xD24EE510ABA51FDC6FA0BA9917FDF4227456A06DF9A78D0064736F6C63 NUMBER STOP ADDMOD SLT STOP CALLER ",
							"sourceMap": "283:2640:11:-:0;;;865:152;;;;;;;;;;3413:154:12;;;;;;;;;;;;;-1:-1:-1;;;3413:154:12;;;;;;;;;;;;;;;;-1:-1:-1;;;3413:154:12;;;3487:5;3479;:13;;;;;;:::i;:::-;-1:-1:-1;3502:7:12;:17;3512:7;3502;:17;:::i;:::-;-1:-1:-1;;3715:7:12;3529:31;;-1:-1:-1;936:32:0;719:10:5;936:18:0;:32::i;:::-;920:13:11::1;:29:::0;;-1:-1:-1;;;;;;920:29:11::1;944:4;920:29;::::0;;980:30:::1;515:9;980:15;:30;:::i;:::-;959:18;:51:::0;283:2640;;2426:187:0;2518:6;;;-1:-1:-1;;;;;2534:17:0;;;-1:-1:-1;;;;;;2534:17:0;;;;;;;2566:40;;2518:6;;;2534:17;2518:6;;2566:40;;2499:16;;2566:40;2489:124;2426:187;:::o;14:127:14:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:380;225:1;221:12;;;;268;;;289:61;;343:4;335:6;331:17;321:27;;289:61;396:2;388:6;385:14;365:18;362:38;359:161;;442:10;437:3;433:20;430:1;423:31;477:4;474:1;467:15;505:4;502:1;495:15;359:161;;146:380;;;:::o;657:545::-;759:2;754:3;751:11;748:448;;;795:1;820:5;816:2;809:17;865:4;861:2;851:19;935:2;923:10;919:19;916:1;912:27;906:4;902:38;971:4;959:10;956:20;953:47;;;-1:-1:-1;994:4:14;953:47;1049:2;1044:3;1040:12;1037:1;1033:20;1027:4;1023:31;1013:41;;1104:82;1122:2;1115:5;1112:13;1104:82;;;1167:17;;;1148:1;1137:13;1104:82;;;1108:3;;;748:448;657:545;;;:::o;1378:1352::-;1498:10;;-1:-1:-1;;;;;1520:30:14;;1517:56;;;1553:18;;:::i;:::-;1582:97;1672:6;1632:38;1664:4;1658:11;1632:38;:::i;:::-;1626:4;1582:97;:::i;:::-;1734:4;;1798:2;1787:14;;1815:1;1810:663;;;;2517:1;2534:6;2531:89;;;-1:-1:-1;2586:19:14;;;2580:26;2531:89;-1:-1:-1;;1335:1:14;1331:11;;;1327:24;1323:29;1313:40;1359:1;1355:11;;;1310:57;2633:81;;1780:944;;1810:663;604:1;597:14;;;641:4;628:18;;-1:-1:-1;;1846:20:14;;;1964:236;1978:7;1975:1;1972:14;1964:236;;;2067:19;;;2061:26;2046:42;;2159:27;;;;2127:1;2115:14;;;;1994:19;;1964:236;;;1968:3;2228:6;2219:7;2216:19;2213:201;;;2289:19;;;2283:26;-1:-1:-1;;2372:1:14;2368:14;;;2384:3;2364:24;2360:37;2356:42;2341:58;2326:74;;2213:201;-1:-1:-1;;;;;2460:1:14;2444:14;;;2440:22;2427:36;;-1:-1:-1;1378:1352:14:o;2735:222::-;2800:9;;;2821:10;;;2818:133;;;2873:10;2868:3;2864:20;2861:1;2854:31;2908:4;2905:1;2898:15;2936:4;2933:1;2926:15;2818:133;2735:222;;;;:::o;:::-;283:2640:11;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_afterTokenTransfers_3440": {
									"entryPoint": null,
									"id": 3440,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_approve_3359": {
									"entryPoint": 3410,
									"id": 3359,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_baseURI_1925": {
									"entryPoint": 4996,
									"id": 1925,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_beforeTokenTransfers_3427": {
									"entryPoint": null,
									"id": 3427,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_checkContractOnERC721Received_3414": {
									"entryPoint": 4761,
									"id": 3414,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@_checkOwner_54": {
									"entryPoint": 4305,
									"id": 54,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_exists_2773": {
									"entryPoint": 3367,
									"id": 2773,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_mint_2972": {
									"entryPoint": 5404,
									"id": 2972,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_msgSender_615": {
									"entryPoint": null,
									"id": 615,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_numberMinted_2348": {
									"entryPoint": null,
									"id": 2348,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_ownershipOf_2469": {
									"entryPoint": 4395,
									"id": 2469,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_safeMint_2787": {
									"entryPoint": 4279,
									"id": 2787,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_safeMint_2805": {
									"entryPoint": 5175,
									"id": 2805,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_startTokenId_2244": {
									"entryPoint": null,
									"id": 2244,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_totalMinted_2272": {
									"entryPoint": null,
									"id": 2272,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_111": {
									"entryPoint": 4679,
									"id": 111,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_transfer_3142": {
									"entryPoint": 3502,
									"id": 3142,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@approve_2602": {
									"entryPoint": 1758,
									"id": 2602,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@balanceOf_2331": {
									"entryPoint": 2677,
									"id": 2331,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@getApproved_2624": {
									"entryPoint": 1690,
									"id": 2624,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@getRefundAmount_2086": {
									"entryPoint": 1498,
									"id": 2086,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@getRefundDeadline_2069": {
									"entryPoint": 3153,
									"id": 2069,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@hasRefunded_1894": {
									"entryPoint": null,
									"id": 1894,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@isApprovedForAll_2676": {
									"entryPoint": 3203,
									"id": 2676,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@isContract_291": {
									"entryPoint": null,
									"id": 291,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@log10_1593": {
									"entryPoint": 5188,
									"id": 1593,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@maxMintPerUser_1876": {
									"entryPoint": null,
									"id": 1876,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@maxMintSupply_1879": {
									"entryPoint": null,
									"id": 1879,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@mintPrice_1873": {
									"entryPoint": null,
									"id": 1873,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@name_2494": {
									"entryPoint": 1544,
									"id": 2494,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@ownerOf_2484": {
									"entryPoint": 2659,
									"id": 2484,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@owner_40": {
									"entryPoint": null,
									"id": 40,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@refundAddress_1886": {
									"entryPoint": null,
									"id": 1886,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@refundEndTimeStamp_1884": {
									"entryPoint": null,
									"id": 1884,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@refundEndTimestamps_1890": {
									"entryPoint": null,
									"id": 1890,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@refundPeriod_1882": {
									"entryPoint": null,
									"id": 1882,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@refund_2050": {
									"entryPoint": 1910,
									"id": 2050,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@renounceOwnership_68": {
									"entryPoint": 2756,
									"id": 68,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@safeMint_1994": {
									"entryPoint": 2160,
									"id": 1994,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@safeTransferFrom_2713": {
									"entryPoint": 2632,
									"id": 2713,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@safeTransferFrom_2749": {
									"entryPoint": 2940,
									"id": 2749,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@sendValue_325": {
									"entryPoint": 3998,
									"id": 325,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@setApprovalForAll_2658": {
									"entryPoint": 2791,
									"id": 2658,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@supportsInterface_2303": {
									"entryPoint": 1416,
									"id": 2303,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@supportsInterface_877": {
									"entryPoint": null,
									"id": 877,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@symbol_2504": {
									"entryPoint": 2776,
									"id": 2504,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@toString_684": {
									"entryPoint": 5028,
									"id": 684,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@tokenURI_2547": {
									"entryPoint": 3021,
									"id": 2547,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@totalSupply_2259": {
									"entryPoint": null,
									"id": 2259,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_2694": {
									"entryPoint": 1899,
									"id": 2694,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@transferOwnership_91": {
									"entryPoint": 3249,
									"id": 91,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@withdraw_2119": {
									"entryPoint": 2529,
									"id": 2119,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"abi_decode_address": {
									"entryPoint": 6040,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 6170,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 6499,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 6110,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr": {
									"entryPoint": 6279,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 4
								},
								"abi_decode_tuple_t_addresst_bool": {
									"entryPoint": 6197,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 6068,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_bytes4": {
									"entryPoint": 5887,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bytes4_fromMemory": {
									"entryPoint": 6824,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 5916,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_string": {
									"entryPoint": 5977,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 6716,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed": {
									"entryPoint": 6763,
									"id": null,
									"parameterSlots": 5,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 6021,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_0a40b5826414dc662e0159670f2c2438e459989a4ed127048ed58d338cd8012a__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_5d44bf458cb5c329d8f1e1f54ef008fff7d3ca1323049a1b56efa26acabe1561__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_6837646b67057675f05a4cd997fee2159138b7fc7f6519669f46d4a090b51e94__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_6a14f05d16a70fa284e3ee3d9e80d48c30ad433f09385779fd774cb37f61992c__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_724aa4705af32b8e74bc39ce7211a23369ff686bea75161374d1c30d7570994d__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_eb2116119b22855e950d27bdfd12d7b042d78f02cb28736b6189fd010760f8f2__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 6653,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 6630,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 6672,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"copy_memory_to_memory_with_cleanup": {
									"entryPoint": 5941,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 6550,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"increment_t_uint256": {
									"entryPoint": 6691,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 6608,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x12": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 6257,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_bytes4": {
									"entryPoint": 5865,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:11100:14",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:14",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "58:87:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "123:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "132:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "135:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "125:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "125:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "125:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "81:5:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "92:5:14"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "103:3:14",
																								"type": "",
																								"value": "224"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "108:10:14",
																								"type": "",
																								"value": "0xffffffff"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "99:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "99:20:14"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "88:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "88:32:14"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "78:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "78:43:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "71:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "71:51:14"
															},
															"nodeType": "YulIf",
															"src": "68:71:14"
														}
													]
												},
												"name": "validator_revert_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "47:5:14",
														"type": ""
													}
												],
												"src": "14:131:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "219:176:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "265:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "274:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "277:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "267:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "267:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "267:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "240:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "249:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "236:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "236:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "261:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "232:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "232:32:14"
															},
															"nodeType": "YulIf",
															"src": "229:52:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "290:36:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "316:9:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "303:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "303:23:14"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "294:5:14",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "359:5:14"
																	}
																],
																"functionName": {
																	"name": "validator_revert_bytes4",
																	"nodeType": "YulIdentifier",
																	"src": "335:23:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "335:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "335:30:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "374:15:14",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "384:5:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "374:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "185:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "196:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "208:6:14",
														"type": ""
													}
												],
												"src": "150:245:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "495:92:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "505:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "517:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "528:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "513:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "513:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "505:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "547:9:14"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "572:6:14"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "565:6:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "565:14:14"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "558:6:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "558:22:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "540:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "540:41:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "540:41:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "464:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "475:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "486:4:14",
														"type": ""
													}
												],
												"src": "400:187:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "662:110:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "708:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "717:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "720:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "710:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "710:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "710:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "683:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "692:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "679:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "679:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "704:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "675:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "675:32:14"
															},
															"nodeType": "YulIf",
															"src": "672:52:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "733:33:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "756:9:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "743:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "743:23:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "733:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "628:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "639:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "651:6:14",
														"type": ""
													}
												],
												"src": "592:180:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "878:76:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "888:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "900:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "911:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "896:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "896:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "888:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "930:9:14"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "941:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "923:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "923:25:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "923:25:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "847:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "858:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "869:4:14",
														"type": ""
													}
												],
												"src": "777:177:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1025:184:14",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1035:10:14",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1044:1:14",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "1039:1:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1104:63:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "1129:3:14"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "1134:1:14"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "1125:3:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1125:11:14"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "1148:3:14"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "1153:1:14"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1144:3:14"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1144:11:14"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "1138:5:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1138:18:14"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1118:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1118:39:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1118:39:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "1065:1:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1068:6:14"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "1062:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1062:13:14"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "1076:19:14",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1078:15:14",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "1087:1:14"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1090:2:14",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1083:3:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1083:10:14"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "1078:1:14"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "1058:3:14",
																"statements": []
															},
															"src": "1054:113:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nodeType": "YulIdentifier",
																				"src": "1187:3:14"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1192:6:14"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1183:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1183:16:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1201:1:14",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1176:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1176:27:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1176:27:14"
														}
													]
												},
												"name": "copy_memory_to_memory_with_cleanup",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "1003:3:14",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "1008:3:14",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1013:6:14",
														"type": ""
													}
												],
												"src": "959:250:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1264:221:14",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1274:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1294:5:14"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1288:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1288:12:14"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "1278:6:14",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1316:3:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1321:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1309:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1309:19:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1309:19:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1376:5:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1383:4:14",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1372:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1372:16:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "1394:3:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1399:4:14",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1390:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1390:14:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1406:6:14"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nodeType": "YulIdentifier",
																	"src": "1337:34:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1337:76:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1337:76:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1422:57:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "1437:3:14"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "1450:6:14"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1458:2:14",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "1446:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1446:15:14"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1467:2:14",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "1463:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1463:7:14"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "1442:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1442:29:14"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1433:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1433:39:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1474:4:14",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1429:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1429:50:14"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "1422:3:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_string",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1241:5:14",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "1248:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "1256:3:14",
														"type": ""
													}
												],
												"src": "1214:271:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1611:99:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1628:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1639:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1621:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1621:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1621:21:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1651:53:14",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1677:6:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1689:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1700:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1685:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1685:18:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_string",
																	"nodeType": "YulIdentifier",
																	"src": "1659:17:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1659:45:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1651:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1580:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1591:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1602:4:14",
														"type": ""
													}
												],
												"src": "1490:220:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1816:102:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1826:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1838:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1849:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1834:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1834:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1826:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1868:9:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1883:6:14"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1899:3:14",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1904:1:14",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "1895:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1895:11:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1908:1:14",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "1891:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1891:19:14"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1879:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1879:32:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1861:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1861:51:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1861:51:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1785:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1796:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1807:4:14",
														"type": ""
													}
												],
												"src": "1715:203:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1972:124:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1982:29:14",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "2004:6:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1991:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1991:20:14"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "1982:5:14"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2074:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2083:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2086:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2076:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2076:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2076:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2033:5:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "2044:5:14"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "2059:3:14",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "2064:1:14",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "2055:3:14"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "2055:11:14"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2068:1:14",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "2051:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2051:19:14"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "2040:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2040:31:14"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "2030:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2030:42:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2023:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2023:50:14"
															},
															"nodeType": "YulIf",
															"src": "2020:70:14"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1951:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1962:5:14",
														"type": ""
													}
												],
												"src": "1923:173:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2188:167:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2234:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2243:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2246:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2236:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2236:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2236:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2209:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2218:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2205:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2205:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2230:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2201:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2201:32:14"
															},
															"nodeType": "YulIf",
															"src": "2198:52:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2259:39:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2288:9:14"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2269:18:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2269:29:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2259:6:14"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2307:42:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2334:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2345:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2330:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2330:18:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2317:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2317:32:14"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2307:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2146:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2157:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2169:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2177:6:14",
														"type": ""
													}
												],
												"src": "2101:254:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2464:224:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2510:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2519:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2522:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2512:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2512:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2512:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2485:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2494:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2481:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2481:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2506:2:14",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2477:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2477:32:14"
															},
															"nodeType": "YulIf",
															"src": "2474:52:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2535:39:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2564:9:14"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2545:18:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2545:29:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2535:6:14"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2583:48:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2616:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2627:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2612:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2612:18:14"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2593:18:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2593:38:14"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2583:6:14"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2640:42:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2667:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2678:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2663:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2663:18:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2650:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2650:32:14"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "2640:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2414:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2425:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2437:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2445:6:14",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "2453:6:14",
														"type": ""
													}
												],
												"src": "2360:328:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2763:116:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2809:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2818:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2821:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2811:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2811:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2811:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2784:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2793:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2780:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2780:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2805:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2776:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2776:32:14"
															},
															"nodeType": "YulIf",
															"src": "2773:52:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2834:39:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2863:9:14"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2844:18:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2844:29:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2834:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2729:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2740:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2752:6:14",
														"type": ""
													}
												],
												"src": "2693:186:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2968:263:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3014:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3023:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3026:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3016:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3016:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3016:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2989:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2998:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2985:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2985:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3010:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2981:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2981:32:14"
															},
															"nodeType": "YulIf",
															"src": "2978:52:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3039:39:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3068:9:14"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "3049:18:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3049:29:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3039:6:14"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3087:45:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3117:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3128:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3113:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3113:18:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3100:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3100:32:14"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "3091:5:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3185:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3194:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3197:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3187:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3187:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3187:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3154:5:14"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "3175:5:14"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "3168:6:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3168:13:14"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "3161:6:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3161:21:14"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "3151:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3151:32:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3144:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3144:40:14"
															},
															"nodeType": "YulIf",
															"src": "3141:60:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3210:15:14",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "3220:5:14"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "3210:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2926:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2937:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2949:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2957:6:14",
														"type": ""
													}
												],
												"src": "2884:347:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3268:95:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3285:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3292:3:14",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3297:10:14",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "3288:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3288:20:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3278:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3278:31:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3278:31:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3325:1:14",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3328:4:14",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3318:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3318:15:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3318:15:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3349:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3352:4:14",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "3342:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3342:15:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3342:15:14"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "3236:127:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3498:1008:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3545:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3554:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3557:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3547:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3547:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3547:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3519:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3528:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3515:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3515:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3540:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3511:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3511:33:14"
															},
															"nodeType": "YulIf",
															"src": "3508:53:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3570:39:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3599:9:14"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "3580:18:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3580:29:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3570:6:14"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3618:48:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3651:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3662:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3647:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3647:18:14"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "3628:18:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3628:38:14"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "3618:6:14"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3675:42:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3702:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3713:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3698:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3698:18:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3685:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3685:32:14"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "3675:6:14"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3726:46:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3757:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3768:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3753:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3753:18:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3740:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3740:32:14"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "3730:6:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3781:28:14",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3791:18:14",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "3785:2:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3836:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3845:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3848:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3838:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3838:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3838:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3824:6:14"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "3832:2:14"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3821:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3821:14:14"
															},
															"nodeType": "YulIf",
															"src": "3818:34:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3861:32:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3875:9:14"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3886:6:14"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3871:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3871:22:14"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "3865:2:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3941:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3950:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3953:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3943:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3943:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3943:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "3920:2:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3924:4:14",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3916:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3916:13:14"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3931:7:14"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "3912:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3912:27:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3905:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3905:35:14"
															},
															"nodeType": "YulIf",
															"src": "3902:55:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3966:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "3989:2:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3976:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3976:16:14"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "3970:2:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4015:22:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "4017:16:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4017:18:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4017:18:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "4007:2:14"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "4011:2:14"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4004:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4004:10:14"
															},
															"nodeType": "YulIf",
															"src": "4001:36:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4046:17:14",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4060:2:14",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nodeType": "YulIdentifier",
																	"src": "4056:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4056:7:14"
															},
															"variables": [
																{
																	"name": "_4",
																	"nodeType": "YulTypedName",
																	"src": "4050:2:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4072:23:14",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4092:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4086:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4086:9:14"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "4076:6:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4104:71:14",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "4126:6:14"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"name": "_3",
																										"nodeType": "YulIdentifier",
																										"src": "4150:2:14"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "4154:4:14",
																										"type": "",
																										"value": "0x1f"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "4146:3:14"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "4146:13:14"
																							},
																							{
																								"name": "_4",
																								"nodeType": "YulIdentifier",
																								"src": "4161:2:14"
																							}
																						],
																						"functionName": {
																							"name": "and",
																							"nodeType": "YulIdentifier",
																							"src": "4142:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4142:22:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4166:2:14",
																						"type": "",
																						"value": "63"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4138:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4138:31:14"
																			},
																			{
																				"name": "_4",
																				"nodeType": "YulIdentifier",
																				"src": "4171:2:14"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4134:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4134:40:14"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4122:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4122:53:14"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "4108:10:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4234:22:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "4236:16:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4236:18:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4236:18:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "4193:10:14"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "4205:2:14"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "4190:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4190:18:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "4213:10:14"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "4225:6:14"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "4210:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4210:22:14"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "4187:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4187:46:14"
															},
															"nodeType": "YulIf",
															"src": "4184:72:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4272:2:14",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "4276:10:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4265:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4265:22:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4265:22:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "4303:6:14"
																	},
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "4311:2:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4296:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4296:18:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4296:18:14"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4360:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4369:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4372:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4362:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4362:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4362:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "4337:2:14"
																					},
																					{
																						"name": "_3",
																						"nodeType": "YulIdentifier",
																						"src": "4341:2:14"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4333:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4333:11:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4346:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4329:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4329:20:14"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "4351:7:14"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4326:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4326:33:14"
															},
															"nodeType": "YulIf",
															"src": "4323:53:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "4402:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4410:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4398:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4398:15:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "4419:2:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4423:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4415:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4415:11:14"
																	},
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "4428:2:14"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nodeType": "YulIdentifier",
																	"src": "4385:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4385:46:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4385:46:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memPtr",
																						"nodeType": "YulIdentifier",
																						"src": "4455:6:14"
																					},
																					{
																						"name": "_3",
																						"nodeType": "YulIdentifier",
																						"src": "4463:2:14"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4451:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4451:15:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4468:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4447:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4447:24:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4473:1:14",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4440:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4440:35:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4440:35:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4484:16:14",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "4494:6:14"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "4484:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3440:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3451:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3463:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3471:6:14",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "3479:6:14",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "3487:6:14",
														"type": ""
													}
												],
												"src": "3368:1138:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4598:173:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4644:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4653:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4656:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4646:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4646:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4646:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4619:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4628:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4615:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4615:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4640:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4611:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4611:32:14"
															},
															"nodeType": "YulIf",
															"src": "4608:52:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4669:39:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4698:9:14"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "4679:18:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4679:29:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "4669:6:14"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4717:48:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4750:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4761:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4746:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4746:18:14"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "4727:18:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4727:38:14"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "4717:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4556:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4567:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4579:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4587:6:14",
														"type": ""
													}
												],
												"src": "4511:260:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4831:325:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4841:22:14",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4855:1:14",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "4858:4:14"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "4851:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4851:12:14"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "4841:6:14"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4872:38:14",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "4902:4:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4908:1:14",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "4898:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4898:12:14"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "4876:18:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4949:31:14",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "4951:27:14",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "4965:6:14"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4973:4:14",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "4961:3:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4961:17:14"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "4951:6:14"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "4929:18:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4922:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4922:26:14"
															},
															"nodeType": "YulIf",
															"src": "4919:61:14"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5039:111:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5060:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5067:3:14",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5072:10:14",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "5063:3:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5063:20:14"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5053:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5053:31:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5053:31:14"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5104:1:14",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5107:4:14",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5097:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5097:15:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5097:15:14"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5132:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5135:4:14",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5125:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5125:15:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5125:15:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "4995:18:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "5018:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5026:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "5015:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5015:14:14"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "4992:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4992:38:14"
															},
															"nodeType": "YulIf",
															"src": "4989:161:14"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "4811:4:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "4820:6:14",
														"type": ""
													}
												],
												"src": "4776:380:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5335:172:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5352:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5363:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5345:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5345:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5345:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5386:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5397:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5382:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5382:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5402:2:14",
																		"type": "",
																		"value": "22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5375:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5375:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5375:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5425:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5436:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5421:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5421:18:14"
																	},
																	{
																		"hexValue": "526566756e6420506572696f6420457870697265642e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5441:24:14",
																		"type": "",
																		"value": "Refund Period Expired."
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5414:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5414:52:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5414:52:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5475:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5487:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5498:2:14",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5483:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5483:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5475:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_5d44bf458cb5c329d8f1e1f54ef008fff7d3ca1323049a1b56efa26acabe1561__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5312:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5326:4:14",
														"type": ""
													}
												],
												"src": "5161:346:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5686:162:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5703:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5714:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5696:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5696:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5696:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5737:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5748:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5733:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5733:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5753:2:14",
																		"type": "",
																		"value": "12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5726:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5726:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5726:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5776:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5787:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5772:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5772:18:14"
																	},
																	{
																		"hexValue": "4e6f7420796f7572204e4654",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5792:14:14",
																		"type": "",
																		"value": "Not your NFT"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5765:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5765:42:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5765:42:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5816:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5828:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5839:2:14",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5824:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5824:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5816:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_eb2116119b22855e950d27bdfd12d7b042d78f02cb28736b6189fd010760f8f2__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5663:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5677:4:14",
														"type": ""
													}
												],
												"src": "5512:336:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5885:95:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5902:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5909:3:14",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5914:10:14",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "5905:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5905:20:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5895:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5895:31:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5895:31:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5942:1:14",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5945:4:14",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5935:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5935:15:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5935:15:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5966:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5969:4:14",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "5959:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5959:15:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5959:15:14"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "5853:127:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6037:116:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6047:20:14",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "6062:1:14"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "6065:1:14"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "6058:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6058:9:14"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "6047:7:14"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6125:22:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "6127:16:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6127:18:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6127:18:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "6096:1:14"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "6089:6:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6089:9:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "y",
																						"nodeType": "YulIdentifier",
																						"src": "6103:1:14"
																					},
																					{
																						"arguments": [
																							{
																								"name": "product",
																								"nodeType": "YulIdentifier",
																								"src": "6110:7:14"
																							},
																							{
																								"name": "x",
																								"nodeType": "YulIdentifier",
																								"src": "6119:1:14"
																							}
																						],
																						"functionName": {
																							"name": "div",
																							"nodeType": "YulIdentifier",
																							"src": "6106:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6106:15:14"
																					}
																				],
																				"functionName": {
																					"name": "eq",
																					"nodeType": "YulIdentifier",
																					"src": "6100:2:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6100:22:14"
																			}
																		],
																		"functionName": {
																			"name": "or",
																			"nodeType": "YulIdentifier",
																			"src": "6086:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6086:37:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "6079:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6079:45:14"
															},
															"nodeType": "YulIf",
															"src": "6076:71:14"
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "6016:1:14",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "6019:1:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "6025:7:14",
														"type": ""
													}
												],
												"src": "5985:168:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6332:167:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6349:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6360:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6342:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6342:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6342:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6383:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6394:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6379:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6379:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6399:2:14",
																		"type": "",
																		"value": "17"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6372:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6372:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6372:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6422:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6433:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6418:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6418:18:14"
																	},
																	{
																		"hexValue": "4e6f7420656e6f7567682066756e64732e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6438:19:14",
																		"type": "",
																		"value": "Not enough funds."
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6411:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6411:47:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6411:47:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6467:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6479:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6490:2:14",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6475:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6475:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6467:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_6837646b67057675f05a4cd997fee2159138b7fc7f6519669f46d4a090b51e94__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6309:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6323:4:14",
														"type": ""
													}
												],
												"src": "6158:341:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6552:77:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6562:16:14",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "6573:1:14"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "6576:1:14"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6569:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6569:9:14"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "6562:3:14"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6601:22:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "6603:16:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6603:18:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6603:18:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "6593:1:14"
																	},
																	{
																		"name": "sum",
																		"nodeType": "YulIdentifier",
																		"src": "6596:3:14"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "6590:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6590:10:14"
															},
															"nodeType": "YulIf",
															"src": "6587:36:14"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "6535:1:14",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "6538:1:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "6544:3:14",
														"type": ""
													}
												],
												"src": "6504:125:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6808:160:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6825:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6836:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6818:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6818:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6818:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6859:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6870:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6855:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6855:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6875:2:14",
																		"type": "",
																		"value": "10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6848:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6848:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6848:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6898:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6909:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6894:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6894:18:14"
																	},
																	{
																		"hexValue": "4d696e74204c696d6974",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6914:12:14",
																		"type": "",
																		"value": "Mint Limit"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6887:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6887:40:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6887:40:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6936:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6948:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6959:2:14",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6944:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6944:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6936:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_6a14f05d16a70fa284e3ee3d9e80d48c30ad433f09385779fd774cb37f61992c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6785:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6799:4:14",
														"type": ""
													}
												],
												"src": "6634:334:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7147:174:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7164:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7175:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7157:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7157:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7157:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7198:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7209:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7194:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7194:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7214:2:14",
																		"type": "",
																		"value": "24"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7187:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7187:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7187:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7237:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7248:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7233:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7233:18:14"
																	},
																	{
																		"hexValue": "537570706c79204578636565642e20536f6c64206f75742e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7253:26:14",
																		"type": "",
																		"value": "Supply Exceed. Sold out."
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7226:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7226:54:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7226:54:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7289:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7301:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7312:2:14",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7297:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7297:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7289:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0a40b5826414dc662e0159670f2c2438e459989a4ed127048ed58d338cd8012a__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7124:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7138:4:14",
														"type": ""
													}
												],
												"src": "6973:348:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7375:79:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7385:17:14",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "7397:1:14"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "7400:1:14"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "7393:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7393:9:14"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "7385:4:14"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7426:22:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "7428:16:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7428:18:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7428:18:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "diff",
																		"nodeType": "YulIdentifier",
																		"src": "7417:4:14"
																	},
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "7423:1:14"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "7414:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7414:11:14"
															},
															"nodeType": "YulIf",
															"src": "7411:37:14"
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "7357:1:14",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "7360:1:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "7366:4:14",
														"type": ""
													}
												],
												"src": "7326:128:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7506:88:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7537:22:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "7539:16:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7539:18:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7539:18:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "7522:5:14"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7533:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "7529:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7529:6:14"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "7519:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7519:17:14"
															},
															"nodeType": "YulIf",
															"src": "7516:43:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7568:20:14",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "7579:5:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7586:1:14",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7575:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7575:13:14"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "7568:3:14"
																}
															]
														}
													]
												},
												"name": "increment_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "7488:5:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "7498:3:14",
														"type": ""
													}
												],
												"src": "7459:135:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7773:181:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7790:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7801:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7783:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7783:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7783:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7824:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7835:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7820:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7820:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7840:2:14",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7813:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7813:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7813:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7863:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7874:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7859:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7859:18:14"
																	},
																	{
																		"hexValue": "49742773206e6f7420706173742074686520726566756e6420706572696f64",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7879:33:14",
																		"type": "",
																		"value": "It's not past the refund period"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7852:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7852:61:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7852:61:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7922:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7934:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7945:2:14",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7930:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7930:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7922:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_724aa4705af32b8e74bc39ce7211a23369ff686bea75161374d1c30d7570994d__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7750:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7764:4:14",
														"type": ""
													}
												],
												"src": "7599:355:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8146:309:14",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8156:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "8176:6:14"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "8170:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8170:13:14"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "8160:6:14",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "8231:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8239:4:14",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8227:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8227:17:14"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8246:3:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "8251:6:14"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nodeType": "YulIdentifier",
																	"src": "8192:34:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8192:66:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8192:66:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8267:29:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8284:3:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "8289:6:14"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8280:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8280:16:14"
															},
															"variables": [
																{
																	"name": "end_1",
																	"nodeType": "YulTypedName",
																	"src": "8271:5:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8305:29:14",
															"value": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "8327:6:14"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "8321:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8321:13:14"
															},
															"variables": [
																{
																	"name": "length_1",
																	"nodeType": "YulTypedName",
																	"src": "8309:8:14",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "8382:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8390:4:14",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8378:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8378:17:14"
																	},
																	{
																		"name": "end_1",
																		"nodeType": "YulIdentifier",
																		"src": "8397:5:14"
																	},
																	{
																		"name": "length_1",
																		"nodeType": "YulIdentifier",
																		"src": "8404:8:14"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nodeType": "YulIdentifier",
																	"src": "8343:34:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8343:70:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8343:70:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8422:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "end_1",
																		"nodeType": "YulIdentifier",
																		"src": "8433:5:14"
																	},
																	{
																		"name": "length_1",
																		"nodeType": "YulIdentifier",
																		"src": "8440:8:14"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8429:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8429:20:14"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "8422:3:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "8114:3:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "8119:6:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "8127:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "8138:3:14",
														"type": ""
													}
												],
												"src": "7959:496:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8634:228:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8651:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8662:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8644:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8644:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8644:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8685:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8696:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8681:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8681:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8701:2:14",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8674:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8674:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8674:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8724:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8735:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8720:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8720:18:14"
																	},
																	{
																		"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8740:34:14",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8713:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8713:62:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8713:62:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8795:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8806:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8791:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8791:18:14"
																	},
																	{
																		"hexValue": "646472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8811:8:14",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8784:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8784:36:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8784:36:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8829:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8841:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8852:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8837:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8837:19:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8829:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8611:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8625:4:14",
														"type": ""
													}
												],
												"src": "8460:402:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9041:179:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9058:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9069:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9051:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9051:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9051:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9092:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9103:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9088:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9088:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9108:2:14",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9081:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9081:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9081:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9131:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9142:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9127:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9127:18:14"
																	},
																	{
																		"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9147:31:14",
																		"type": "",
																		"value": "Address: insufficient balance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9120:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9120:59:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9120:59:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9188:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9200:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9211:2:14",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9196:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9196:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9188:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9018:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9032:4:14",
														"type": ""
													}
												],
												"src": "8867:353:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9416:14:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9418:10:14",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "9425:3:14"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "9418:3:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "9400:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "9408:3:14",
														"type": ""
													}
												],
												"src": "9225:205:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9609:248:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9626:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9637:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9619:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9619:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9619:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9660:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9671:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9656:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9656:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9676:2:14",
																		"type": "",
																		"value": "58"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9649:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9649:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9649:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9699:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9710:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9695:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9695:18:14"
																	},
																	{
																		"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c2072",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9715:34:14",
																		"type": "",
																		"value": "Address: unable to send value, r"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9688:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9688:62:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9688:62:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9770:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9781:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9766:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9766:18:14"
																	},
																	{
																		"hexValue": "6563697069656e74206d61792068617665207265766572746564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9786:28:14",
																		"type": "",
																		"value": "ecipient may have reverted"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9759:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9759:56:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9759:56:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9824:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9836:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9847:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9832:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9832:19:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9824:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9586:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9600:4:14",
														"type": ""
													}
												],
												"src": "9435:422:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10036:182:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10053:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10064:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10046:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10046:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10046:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10087:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10098:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10083:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10083:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10103:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10076:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10076:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10076:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10126:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10137:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10122:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10122:18:14"
																	},
																	{
																		"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10142:34:14",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10115:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10115:62:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10115:62:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10186:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10198:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10209:2:14",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10194:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10194:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10186:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10013:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10027:4:14",
														"type": ""
													}
												],
												"src": "9862:356:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10426:286:14",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10436:29:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10454:3:14",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10459:1:14",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "10450:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10450:11:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10463:1:14",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "10446:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10446:19:14"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "10440:2:14",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10481:9:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "10496:6:14"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "10504:2:14"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "10492:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10492:15:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10474:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10474:34:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10474:34:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10528:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10539:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10524:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10524:18:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "10548:6:14"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "10556:2:14"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "10544:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10544:15:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10517:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10517:43:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10517:43:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10580:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10591:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10576:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10576:18:14"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "10596:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10569:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10569:34:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10569:34:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10623:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10634:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10619:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10619:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10639:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10612:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10612:31:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10612:31:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10652:54:14",
															"value": {
																"arguments": [
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "10678:6:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10690:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10701:3:14",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10686:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10686:19:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_string",
																	"nodeType": "YulIdentifier",
																	"src": "10660:17:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10660:46:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10652:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10371:9:14",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "10382:6:14",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "10390:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "10398:6:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "10406:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10417:4:14",
														"type": ""
													}
												],
												"src": "10223:489:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10797:169:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10843:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10852:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10855:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "10845:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10845:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10845:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "10818:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10827:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "10814:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10814:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10839:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "10810:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10810:32:14"
															},
															"nodeType": "YulIf",
															"src": "10807:52:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10868:29:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10887:9:14"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "10881:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10881:16:14"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "10872:5:14",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "10930:5:14"
																	}
																],
																"functionName": {
																	"name": "validator_revert_bytes4",
																	"nodeType": "YulIdentifier",
																	"src": "10906:23:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10906:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10906:30:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10945:15:14",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "10955:5:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "10945:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes4_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10763:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "10774:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "10786:6:14",
														"type": ""
													}
												],
												"src": "10717:249:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11003:95:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11020:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11027:3:14",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11032:10:14",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "11023:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11023:20:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11013:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11013:31:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11013:31:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11060:1:14",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11063:4:14",
																		"type": "",
																		"value": "0x12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11053:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11053:15:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11053:15:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11084:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11087:4:14",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "11077:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11077:15:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11077:15:14"
														}
													]
												},
												"name": "panic_error_0x12",
												"nodeType": "YulFunctionDefinition",
												"src": "10971:127:14"
											}
										]
									},
									"contents": "{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), 0)\n        value3 := memPtr\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_5d44bf458cb5c329d8f1e1f54ef008fff7d3ca1323049a1b56efa26acabe1561__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"Refund Period Expired.\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_eb2116119b22855e950d27bdfd12d7b042d78f02cb28736b6189fd010760f8f2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 12)\n        mstore(add(headStart, 64), \"Not your NFT\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_6837646b67057675f05a4cd997fee2159138b7fc7f6519669f46d4a090b51e94__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"Not enough funds.\")\n        tail := add(headStart, 96)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_6a14f05d16a70fa284e3ee3d9e80d48c30ad433f09385779fd774cb37f61992c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 10)\n        mstore(add(headStart, 64), \"Mint Limit\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_0a40b5826414dc662e0159670f2c2438e459989a4ed127048ed58d338cd8012a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"Supply Exceed. Sold out.\")\n        tail := add(headStart, 96)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_724aa4705af32b8e74bc39ce7211a23369ff686bea75161374d1c30d7570994d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"It's not past the refund period\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), end_1, length_1)\n        end := add(end_1, length_1)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: insufficient balance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 58)\n        mstore(add(headStart, 64), \"Address: unable to send value, r\")\n        mstore(add(headStart, 96), \"ecipient may have reverted\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n}",
									"id": 14,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052600436106101cd5760003560e01c806370a08231116100f7578063c23fcdef11610095578063d64297f911610064578063d64297f9146104fb578063e5496fc814610528578063e985e9c514610548578063f2fde38b1461056857600080fd5b8063c23fcdef14610481578063c285e107146104b1578063c87b56dd146104c6578063d304c4bc146104e657600080fd5b806395d89b41116100d157806395d89b4114610417578063a22cb4651461042c578063a6a3b5b41461044c578063b88d4fde1461046157600080fd5b806370a08231146103c4578063715018a6146103e45780638da5cb5b146103f957600080fd5b806323b872dd1161016f57806342842e0e1161013e57806342842e0e146103525780636352211e146103725780636817c76c146103925780636f1d10ce146103ae57600080fd5b806323b872dd146102ea578063278ecde11461030a57806331c864e81461032a5780633ccfd60b1461033d57600080fd5b8063081812fc116101ab578063081812fc14610257578063095ea7b31461028f5780630cb61f6c146102b157806318160ddd146102d157600080fd5b806301ffc9a7146101d257806304cd52941461020757806306fdde0314610235575b600080fd5b3480156101de57600080fd5b506101f26101ed3660046116ff565b610588565b60405190151581526020015b60405180910390f35b34801561021357600080fd5b5061022761022236600461171c565b6105da565b6040519081526020016101fe565b34801561024157600080fd5b5061024a610608565b6040516101fe9190611785565b34801561026357600080fd5b5061027761027236600461171c565b61069a565b6040516001600160a01b0390911681526020016101fe565b34801561029b57600080fd5b506102af6102aa3660046117b4565b6106de565b005b3480156102bd57600080fd5b50600a54610277906001600160a01b031681565b3480156102dd57600080fd5b5060015460005403610227565b3480156102f657600080fd5b506102af6103053660046117de565b61076b565b34801561031657600080fd5b506102af61032536600461171c565b610776565b6102af61033836600461171c565b610870565b34801561034957600080fd5b506102af6109e1565b34801561035e57600080fd5b506102af61036d3660046117de565b610a48565b34801561037e57600080fd5b5061027761038d36600461171c565b610a63565b34801561039e57600080fd5b50610227670de0b6b3a764000081565b3480156103ba57600080fd5b5061022760095481565b3480156103d057600080fd5b506102276103df36600461181a565b610a75565b3480156103f057600080fd5b506102af610ac4565b34801561040557600080fd5b506008546001600160a01b0316610277565b34801561042357600080fd5b5061024a610ad8565b34801561043857600080fd5b506102af610447366004611835565b610ae7565b34801561045857600080fd5b5061022760b481565b34801561046d57600080fd5b506102af61047c366004611887565b610b7c565b34801561048d57600080fd5b506101f261049c36600461171c565b600c6020526000908152604090205460ff1681565b3480156104bd57600080fd5b50610227606481565b3480156104d257600080fd5b5061024a6104e136600461171c565b610bcd565b3480156104f257600080fd5b50610227600581565b34801561050757600080fd5b5061022761051636600461171c565b600b6020526000908152604090205481565b34801561053457600080fd5b5061022761054336600461171c565b610c51565b34801561055457600080fd5b506101f2610563366004611963565b610c83565b34801561057457600080fd5b506102af61058336600461181a565b610cb1565b60006001600160e01b031982166380ac58cd60e01b14806105b957506001600160e01b03198216635b5e139f60e01b145b806105d457506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000818152600c602052604081205460ff16156105f957506000919050565b50670de0b6b3a7640000919050565b60606002805461061790611996565b80601f016020809104026020016040519081016040528092919081815260200182805461064390611996565b80156106905780601f1061066557610100808354040283529160200191610690565b820191906000526020600020905b81548152906001019060200180831161067357829003601f168201915b5050505050905090565b60006106a582610d27565b6106c2576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b60006106e982610a63565b9050806001600160a01b0316836001600160a01b03160361071d5760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b0382161480159061073d575061073b8133610c83565b155b1561075b576040516367d9dca160e11b815260040160405180910390fd5b610766838383610d52565b505050565b610766838383610dae565b61077f81610c51565b42106107cb5760405162461bcd60e51b81526020600482015260166024820152752932b33ab732102832b934b7b21022bc3834b932b21760511b60448201526064015b60405180910390fd5b6107d481610a63565b6001600160a01b0316336001600160a01b0316146108235760405162461bcd60e51b815260206004820152600c60248201526b139bdd081e5bdd5c8813919560a21b60448201526064016107c2565b600061082e826105da565b600a549091506108499033906001600160a01b031684610dae565b6000828152600c60205260409020805460ff1916600117905561086c3382610f9e565b5050565b61088281670de0b6b3a76400006119e6565b3410156108c55760405162461bcd60e51b81526020600482015260116024820152702737ba1032b737bab3b410333ab732399760791b60448201526064016107c2565b336000908152600560208190526040909120548290600160401b900467ffffffffffffffff166108f591906119fd565b11156109305760405162461bcd60e51b815260206004820152600a602482015269135a5b9d08131a5b5a5d60b21b60448201526064016107c2565b606461093b60005490565b11156109895760405162461bcd60e51b815260206004820152601860248201527f537570706c79204578636565642e20536f6c64206f75742e000000000000000060448201526064016107c2565b61099333826110b7565b61099e60b4426119fd565b600955600080546109b0908390611a10565b90505b60005481101561086c576009546000828152600b6020526040902055806109d981611a23565b9150506109b3565b6109e96110d1565b6009544211610a3a5760405162461bcd60e51b815260206004820152601f60248201527f49742773206e6f7420706173742074686520726566756e6420706572696f640060448201526064016107c2565b47610a453382610f9e565b50565b61076683838360405180602001604052806000815250610b7c565b6000610a6e8261112b565b5192915050565b60006001600160a01b038216610a9e576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b031660009081526005602052604090205467ffffffffffffffff1690565b610acc6110d1565b610ad66000611247565b565b60606003805461061790611996565b336001600160a01b03831603610b105760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610b87848484610dae565b6001600160a01b0383163b15158015610ba95750610ba784848484611299565b155b15610bc7576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b6060610bd882610d27565b610bf557604051630a14c4b560e41b815260040160405180910390fd5b6000610bff611384565b90508051600003610c1f5760405180602001604052806000815250610c4a565b80610c29846113a4565b604051602001610c3a929190611a3c565b6040516020818303038152906040525b9392505050565b6000818152600c602052604081205460ff1615610c7057506000919050565b506000908152600b602052604090205490565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b610cb96110d1565b6001600160a01b038116610d1e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107c2565b610a4581611247565b60008054821080156105d4575050600090815260046020526040902054600160e01b900460ff161590565b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000610db98261112b565b9050836001600160a01b031681600001516001600160a01b031614610df05760405162a1148160e81b815260040160405180910390fd5b6000336001600160a01b0386161480610e0e5750610e0e8533610c83565b80610e29575033610e1e8461069a565b6001600160a01b0316145b905080610e4957604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b038416610e7057604051633a954ecd60e21b815260040160405180910390fd5b610e7c60008487610d52565b6001600160a01b038581166000908152600560209081526040808320805467ffffffffffffffff1980821667ffffffffffffffff92831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600490945282852080546001600160e01b031916909417600160a01b42909216919091021783558701808452922080549193909116610f52576000548214610f52578054602086015167ffffffffffffffff16600160a01b026001600160e01b03199091166001600160a01b038a16171781555b50505082846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b5050505050565b80471015610fee5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016107c2565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461103b576040519150601f19603f3d011682016040523d82523d6000602084013e611040565b606091505b50509050806107665760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016107c2565b61086c828260405180602001604052806000815250611437565b6008546001600160a01b03163314610ad65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107c2565b60408051606081018252600080825260208201819052918101919091528160005481101561122e57600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b810467ffffffffffffffff1692820192909252600160e01b90910460ff1615159181018290529061122c5780516001600160a01b0316156111c2579392505050565b5060001901600081815260046020908152604091829020825160608101845290546001600160a01b038116808352600160a01b820467ffffffffffffffff1693830193909352600160e01b900460ff1615159281019290925215611227579392505050565b6111c2565b505b604051636f96cda160e11b815260040160405180910390fd5b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a02906112ce903390899088908890600401611a6b565b6020604051808303816000875af1925050508015611309575060408051601f3d908101601f1916820190925261130691810190611aa8565b60015b611367573d808015611337576040519150601f19603f3d011682016040523d82523d6000602084013e61133c565b606091505b50805160000361135f576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b6060604051806060016040528060368152602001611ac660369139905090565b606060006113b183611444565b600101905060008167ffffffffffffffff8111156113d1576113d1611871565b6040519080825280601f01601f1916602001820160405280156113fb576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461140557509392505050565b610766838383600161151c565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106114835772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106114af576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106114cd57662386f26fc10000830492506010015b6305f5e10083106114e5576305f5e100830492506008015b61271083106114f957612710830492506004015b6064831061150b576064830492506002015b600a83106105d45760010192915050565b6000546001600160a01b03851661154557604051622e076360e81b815260040160405180910390fd5b836000036115665760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b038516600081815260056020908152604080832080546fffffffffffffffffffffffffffffffff19811667ffffffffffffffff8083168c018116918217600160401b67ffffffffffffffff1990941690921783900481168c01811690920217909155858452600490925290912080546001600160e01b031916909217600160a01b42909216919091021790558080850183801561161357506001600160a01b0387163b15155b1561169b575b60405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a46116646000888480600101955088611299565b611681576040516368d2bf6b60e11b815260040160405180910390fd5b80820361161957826000541461169657600080fd5b6116e0565b5b6040516001830192906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a480820361169c575b50600055610f97565b6001600160e01b031981168114610a4557600080fd5b60006020828403121561171157600080fd5b8135610c4a816116e9565b60006020828403121561172e57600080fd5b5035919050565b60005b83811015611750578181015183820152602001611738565b50506000910152565b60008151808452611771816020860160208601611735565b601f01601f19169290920160200192915050565b602081526000610c4a6020830184611759565b80356001600160a01b03811681146117af57600080fd5b919050565b600080604083850312156117c757600080fd5b6117d083611798565b946020939093013593505050565b6000806000606084860312156117f357600080fd5b6117fc84611798565b925061180a60208501611798565b9150604084013590509250925092565b60006020828403121561182c57600080fd5b610c4a82611798565b6000806040838503121561184857600080fd5b61185183611798565b91506020830135801515811461186657600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561189d57600080fd5b6118a685611798565b93506118b460208601611798565b925060408501359150606085013567ffffffffffffffff808211156118d857600080fd5b818701915087601f8301126118ec57600080fd5b8135818111156118fe576118fe611871565b604051601f8201601f19908116603f0116810190838211818310171561192657611926611871565b816040528281528a602084870101111561193f57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561197657600080fd5b61197f83611798565b915061198d60208401611798565b90509250929050565b600181811c908216806119aa57607f821691505b6020821081036119ca57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176105d4576105d46119d0565b808201808211156105d4576105d46119d0565b818103818111156105d4576105d46119d0565b600060018201611a3557611a356119d0565b5060010190565b60008351611a4e818460208801611735565b835190830190611a62818360208801611735565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611a9e90830184611759565b9695505050505050565b600060208284031215611aba57600080fd5b8151610c4a816116e956fe697066733a2f2f516d62736552544a5753734c666873695777754232523745744e39335478666f614d7a31533546587473464555422fa2646970667358221220828fc8003228577cd24ee510aba51fdc6fa0ba9917fdf4227456a06df9a78d0064736f6c63430008120033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1CD JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0xC23FCDEF GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xD64297F9 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xD64297F9 EQ PUSH2 0x4FB JUMPI DUP1 PUSH4 0xE5496FC8 EQ PUSH2 0x528 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x548 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x568 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xC23FCDEF EQ PUSH2 0x481 JUMPI DUP1 PUSH4 0xC285E107 EQ PUSH2 0x4B1 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x4C6 JUMPI DUP1 PUSH4 0xD304C4BC EQ PUSH2 0x4E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95D89B41 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x417 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x42C JUMPI DUP1 PUSH4 0xA6A3B5B4 EQ PUSH2 0x44C JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x461 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x3C4 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x3E4 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x3F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x16F JUMPI DUP1 PUSH4 0x42842E0E GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x352 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x372 JUMPI DUP1 PUSH4 0x6817C76C EQ PUSH2 0x392 JUMPI DUP1 PUSH4 0x6F1D10CE EQ PUSH2 0x3AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD EQ PUSH2 0x2EA JUMPI DUP1 PUSH4 0x278ECDE1 EQ PUSH2 0x30A JUMPI DUP1 PUSH4 0x31C864E8 EQ PUSH2 0x32A JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x33D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x81812FC GT PUSH2 0x1AB JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x257 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x28F JUMPI DUP1 PUSH4 0xCB61F6C EQ PUSH2 0x2B1 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x2D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1D2 JUMPI DUP1 PUSH4 0x4CD5294 EQ PUSH2 0x207 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x235 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x1ED CALLDATASIZE PUSH1 0x4 PUSH2 0x16FF JUMP JUMPDEST PUSH2 0x588 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x213 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x227 PUSH2 0x222 CALLDATASIZE PUSH1 0x4 PUSH2 0x171C JUMP JUMPDEST PUSH2 0x5DA JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x241 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24A PUSH2 0x608 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FE SWAP2 SWAP1 PUSH2 0x1785 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x263 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x277 PUSH2 0x272 CALLDATASIZE PUSH1 0x4 PUSH2 0x171C JUMP JUMPDEST PUSH2 0x69A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x29B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AF PUSH2 0x2AA CALLDATASIZE PUSH1 0x4 PUSH2 0x17B4 JUMP JUMPDEST PUSH2 0x6DE JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xA SLOAD PUSH2 0x277 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH1 0x0 SLOAD SUB PUSH2 0x227 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AF PUSH2 0x305 CALLDATASIZE PUSH1 0x4 PUSH2 0x17DE JUMP JUMPDEST PUSH2 0x76B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x316 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AF PUSH2 0x325 CALLDATASIZE PUSH1 0x4 PUSH2 0x171C JUMP JUMPDEST PUSH2 0x776 JUMP JUMPDEST PUSH2 0x2AF PUSH2 0x338 CALLDATASIZE PUSH1 0x4 PUSH2 0x171C JUMP JUMPDEST PUSH2 0x870 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x349 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AF PUSH2 0x9E1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x35E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AF PUSH2 0x36D CALLDATASIZE PUSH1 0x4 PUSH2 0x17DE JUMP JUMPDEST PUSH2 0xA48 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x37E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x277 PUSH2 0x38D CALLDATASIZE PUSH1 0x4 PUSH2 0x171C JUMP JUMPDEST PUSH2 0xA63 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x227 PUSH8 0xDE0B6B3A7640000 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x227 PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x227 PUSH2 0x3DF CALLDATASIZE PUSH1 0x4 PUSH2 0x181A JUMP JUMPDEST PUSH2 0xA75 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AF PUSH2 0xAC4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x405 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x277 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x423 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24A PUSH2 0xAD8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x438 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AF PUSH2 0x447 CALLDATASIZE PUSH1 0x4 PUSH2 0x1835 JUMP JUMPDEST PUSH2 0xAE7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x458 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x227 PUSH1 0xB4 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x46D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AF PUSH2 0x47C CALLDATASIZE PUSH1 0x4 PUSH2 0x1887 JUMP JUMPDEST PUSH2 0xB7C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x48D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x49C CALLDATASIZE PUSH1 0x4 PUSH2 0x171C JUMP JUMPDEST PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x227 PUSH1 0x64 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24A PUSH2 0x4E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x171C JUMP JUMPDEST PUSH2 0xBCD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x227 PUSH1 0x5 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x507 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x227 PUSH2 0x516 CALLDATASIZE PUSH1 0x4 PUSH2 0x171C JUMP JUMPDEST PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x534 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x227 PUSH2 0x543 CALLDATASIZE PUSH1 0x4 PUSH2 0x171C JUMP JUMPDEST PUSH2 0xC51 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x554 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x563 CALLDATASIZE PUSH1 0x4 PUSH2 0x1963 JUMP JUMPDEST PUSH2 0xC83 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x574 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AF PUSH2 0x583 CALLDATASIZE PUSH1 0x4 PUSH2 0x181A JUMP JUMPDEST PUSH2 0xCB1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x5B9 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x5D4 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x5F9 JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST POP PUSH8 0xDE0B6B3A7640000 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x617 SWAP1 PUSH2 0x1996 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x643 SWAP1 PUSH2 0x1996 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x690 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x665 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x690 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x673 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6A5 DUP3 PUSH2 0xD27 JUMP JUMPDEST PUSH2 0x6C2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x33D1C039 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6E9 DUP3 PUSH2 0xA63 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x71D JUMPI PUSH1 0x40 MLOAD PUSH4 0x250FDEE3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 ISZERO SWAP1 PUSH2 0x73D JUMPI POP PUSH2 0x73B DUP2 CALLER PUSH2 0xC83 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x75B JUMPI PUSH1 0x40 MLOAD PUSH4 0x67D9DCA1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x766 DUP4 DUP4 DUP4 PUSH2 0xD52 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x766 DUP4 DUP4 DUP4 PUSH2 0xDAE JUMP JUMPDEST PUSH2 0x77F DUP2 PUSH2 0xC51 JUMP JUMPDEST TIMESTAMP LT PUSH2 0x7CB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x2932B33AB732102832B934B7B21022BC3834B932B217 PUSH1 0x51 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7D4 DUP2 PUSH2 0xA63 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x823 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x139BDD081E5BDD5C88139195 PUSH1 0xA2 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x7C2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x82E DUP3 PUSH2 0x5DA JUMP JUMPDEST PUSH1 0xA SLOAD SWAP1 SWAP2 POP PUSH2 0x849 SWAP1 CALLER SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH2 0xDAE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x86C CALLER DUP3 PUSH2 0xF9E JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x882 DUP2 PUSH8 0xDE0B6B3A7640000 PUSH2 0x19E6 JUMP JUMPDEST CALLVALUE LT ISZERO PUSH2 0x8C5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x2737BA1032B737BAB3B410333AB7323997 PUSH1 0x79 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x7C2 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD DUP3 SWAP1 PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH2 0x8F5 SWAP2 SWAP1 PUSH2 0x19FD JUMP JUMPDEST GT ISZERO PUSH2 0x930 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH10 0x135A5B9D08131A5B5A5D PUSH1 0xB2 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x7C2 JUMP JUMPDEST PUSH1 0x64 PUSH2 0x93B PUSH1 0x0 SLOAD SWAP1 JUMP JUMPDEST GT ISZERO PUSH2 0x989 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537570706C79204578636565642E20536F6C64206F75742E0000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x7C2 JUMP JUMPDEST PUSH2 0x993 CALLER DUP3 PUSH2 0x10B7 JUMP JUMPDEST PUSH2 0x99E PUSH1 0xB4 TIMESTAMP PUSH2 0x19FD JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH1 0x0 DUP1 SLOAD PUSH2 0x9B0 SWAP1 DUP4 SWAP1 PUSH2 0x1A10 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x0 SLOAD DUP2 LT ISZERO PUSH2 0x86C JUMPI PUSH1 0x9 SLOAD PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE DUP1 PUSH2 0x9D9 DUP2 PUSH2 0x1A23 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x9B3 JUMP JUMPDEST PUSH2 0x9E9 PUSH2 0x10D1 JUMP JUMPDEST PUSH1 0x9 SLOAD TIMESTAMP GT PUSH2 0xA3A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x49742773206E6F7420706173742074686520726566756E6420706572696F6400 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x7C2 JUMP JUMPDEST SELFBALANCE PUSH2 0xA45 CALLER DUP3 PUSH2 0xF9E JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x766 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xB7C JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA6E DUP3 PUSH2 0x112B JUMP JUMPDEST MLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xA9E JUMPI PUSH1 0x40 MLOAD PUSH4 0x23D3AD81 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0xACC PUSH2 0x10D1 JUMP JUMPDEST PUSH2 0xAD6 PUSH1 0x0 PUSH2 0x1247 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x617 SWAP1 PUSH2 0x1996 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SUB PUSH2 0xB10 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB06307DB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP1 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0xB87 DUP5 DUP5 DUP5 PUSH2 0xDAE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE ISZERO ISZERO DUP1 ISZERO PUSH2 0xBA9 JUMPI POP PUSH2 0xBA7 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1299 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0xBC7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xBD8 DUP3 PUSH2 0xD27 JUMP JUMPDEST PUSH2 0xBF5 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA14C4B5 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBFF PUSH2 0x1384 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0xC1F JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xC4A JUMP JUMPDEST DUP1 PUSH2 0xC29 DUP5 PUSH2 0x13A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xC3A SWAP3 SWAP2 SWAP1 PUSH2 0x1A3C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xC70 JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0xCB9 PUSH2 0x10D1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xD1E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x7C2 JUMP JUMPDEST PUSH2 0xA45 DUP2 PUSH2 0x1247 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP3 LT DUP1 ISZERO PUSH2 0x5D4 JUMPI POP POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP6 SWAP4 SWAP2 DUP6 AND SWAP2 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDB9 DUP3 PUSH2 0x112B JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xDF0 JUMPI PUSH1 0x40 MLOAD PUSH3 0xA11481 PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND EQ DUP1 PUSH2 0xE0E JUMPI POP PUSH2 0xE0E DUP6 CALLER PUSH2 0xC83 JUMP JUMPDEST DUP1 PUSH2 0xE29 JUMPI POP CALLER PUSH2 0xE1E DUP5 PUSH2 0x69A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP1 POP DUP1 PUSH2 0xE49 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2CE44B5F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0xE70 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3A954ECD PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xE7C PUSH1 0x0 DUP5 DUP8 PUSH2 0xD52 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT DUP1 DUP3 AND PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP4 AND PUSH1 0x0 NOT ADD DUP4 AND OR SWAP1 SWAP3 SSTORE DUP10 DUP7 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD SWAP4 DUP5 AND SWAP4 DUP4 AND PUSH1 0x1 SWAP1 DUP2 ADD DUP5 AND SWAP5 SWAP1 SWAP5 OR SWAP1 SSTORE DUP10 DUP7 MSTORE PUSH1 0x4 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP1 SWAP5 OR PUSH1 0x1 PUSH1 0xA0 SHL TIMESTAMP SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 MUL OR DUP4 SSTORE DUP8 ADD DUP1 DUP5 MSTORE SWAP3 KECCAK256 DUP1 SLOAD SWAP2 SWAP4 SWAP1 SWAP2 AND PUSH2 0xF52 JUMPI PUSH1 0x0 SLOAD DUP3 EQ PUSH2 0xF52 JUMPI DUP1 SLOAD PUSH1 0x20 DUP7 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND OR OR DUP2 SSTORE JUMPDEST POP POP POP DUP3 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP POP POP POP JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0xFEE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x7C2 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x103B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1040 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x766 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20756E61626C6520746F2073656E642076616C75652C2072 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6563697069656E74206D61792068617665207265766572746564000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x7C2 JUMP JUMPDEST PUSH2 0x86C DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1437 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xAD6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x7C2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 PUSH1 0x0 SLOAD DUP2 LT ISZERO PUSH2 0x122E JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE SWAP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0xA0 SHL DUP2 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 SWAP2 DIV PUSH1 0xFF AND ISZERO ISZERO SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 PUSH2 0x122C JUMPI DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x11C2 JUMPI SWAP4 SWAP3 POP POP POP JUMP JUMPDEST POP PUSH1 0x0 NOT ADD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE SWAP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP1 DUP4 MSTORE PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP4 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE ISZERO PUSH2 0x1227 JUMPI SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x11C2 JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6F96CDA1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x12CE SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1A6B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1309 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1306 SWAP2 DUP2 ADD SWAP1 PUSH2 0x1AA8 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1367 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1337 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x133C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x135F JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x36 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1AC6 PUSH1 0x36 SWAP2 CODECOPY SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x13B1 DUP4 PUSH2 0x1444 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x13D1 JUMPI PUSH2 0x13D1 PUSH2 0x1871 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x13FB JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x1405 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x766 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x151C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0x1483 JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x14AF JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x14CD JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x14E5 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x14F9 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x150B JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x5D4 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x1545 JUMPI PUSH1 0x40 MLOAD PUSH3 0x2E0763 PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 PUSH1 0x0 SUB PUSH2 0x1566 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB562E8DD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP2 AND PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP4 AND DUP13 ADD DUP2 AND SWAP2 DUP3 OR PUSH1 0x1 PUSH1 0x40 SHL PUSH8 0xFFFFFFFFFFFFFFFF NOT SWAP1 SWAP5 AND SWAP1 SWAP3 OR DUP4 SWAP1 DIV DUP2 AND DUP13 ADD DUP2 AND SWAP1 SWAP3 MUL OR SWAP1 SWAP2 SSTORE DUP6 DUP5 MSTORE PUSH1 0x4 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP1 SWAP3 OR PUSH1 0x1 PUSH1 0xA0 SHL TIMESTAMP SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 MUL OR SWAP1 SSTORE DUP1 DUP1 DUP6 ADD DUP4 DUP1 ISZERO PUSH2 0x1613 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND EXTCODESIZE ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x169B JUMPI JUMPDEST PUSH1 0x40 MLOAD DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 PUSH2 0x1664 PUSH1 0x0 DUP9 DUP5 DUP1 PUSH1 0x1 ADD SWAP6 POP DUP9 PUSH2 0x1299 JUMP JUMPDEST PUSH2 0x1681 JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP3 SUB PUSH2 0x1619 JUMPI DUP3 PUSH1 0x0 SLOAD EQ PUSH2 0x1696 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16E0 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 DUP4 ADD SWAP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 DUP1 DUP3 SUB PUSH2 0x169C JUMPI JUMPDEST POP PUSH1 0x0 SSTORE PUSH2 0xF97 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xA45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1711 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xC4A DUP2 PUSH2 0x16E9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x172E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1750 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1738 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1771 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1735 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xC4A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1759 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x17AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x17C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x17D0 DUP4 PUSH2 0x1798 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x17F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x17FC DUP5 PUSH2 0x1798 JUMP JUMPDEST SWAP3 POP PUSH2 0x180A PUSH1 0x20 DUP6 ADD PUSH2 0x1798 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x182C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC4A DUP3 PUSH2 0x1798 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1848 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1851 DUP4 PUSH2 0x1798 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1866 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x189D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x18A6 DUP6 PUSH2 0x1798 JUMP JUMPDEST SWAP4 POP PUSH2 0x18B4 PUSH1 0x20 DUP7 ADD PUSH2 0x1798 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x18D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x18EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x18FE JUMPI PUSH2 0x18FE PUSH2 0x1871 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x1926 JUMPI PUSH2 0x1926 PUSH2 0x1871 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x193F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1976 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x197F DUP4 PUSH2 0x1798 JUMP JUMPDEST SWAP2 POP PUSH2 0x198D PUSH1 0x20 DUP5 ADD PUSH2 0x1798 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x19AA JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x19CA JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x5D4 JUMPI PUSH2 0x5D4 PUSH2 0x19D0 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x5D4 JUMPI PUSH2 0x5D4 PUSH2 0x19D0 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x5D4 JUMPI PUSH2 0x5D4 PUSH2 0x19D0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x1A35 JUMPI PUSH2 0x1A35 PUSH2 0x19D0 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x1A4E DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x1735 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x1A62 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x1735 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1A9E SWAP1 DUP4 ADD DUP5 PUSH2 0x1759 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1ABA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xC4A DUP2 PUSH2 0x16E9 JUMP INVALID PUSH10 0x7066733A2F2F516D6273 PUSH6 0x52544A575373 0x4C PUSH7 0x68736957777542 ORIGIN MSTORE CALLDATACOPY GASLIMIT PUSH21 0x4E39335478666F614D7A3153354658747346455542 0x2F LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP3 DUP16 0xC8 STOP ORIGIN 0x28 JUMPI PUSH29 0xD24EE510ABA51FDC6FA0BA9917FDF4227456A06DF9A78D0064736F6C63 NUMBER STOP ADDMOD SLT STOP CALLER ",
							"sourceMap": "283:2640:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4607:300:12;;;;;;;;;;-1:-1:-1;4607:300:12;;;;;:::i;:::-;;:::i;:::-;;;565:14:14;;558:22;540:41;;528:2;513:18;4607:300:12;;;;;;;;2466:171:11;;;;;;;;;;-1:-1:-1;2466:171:11;;;;;:::i;:::-;;:::i;:::-;;;923:25:14;;;911:2;896:18;2466:171:11;777:177:14;7635:98:12;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;9091:200::-;;;;;;;;;;-1:-1:-1;9091:200:12;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1879:32:14;;;1861:51;;1849:2;1834:18;9091:200:12;1715:203:14;8668:362:12;;;;;;;;;;-1:-1:-1;8668:362:12;;;;;:::i;:::-;;:::i;:::-;;570:28:11;;;;;;;;;;-1:-1:-1;570:28:11;;;;-1:-1:-1;;;;;570:28:11;;;3878:297:12;;;;;;;;;;-1:-1:-1;4128:12:12;;3922:7;4112:13;:28;3878:297;;9930:164;;;;;;;;;;-1:-1:-1;9930:164:12;;;;;:::i;:::-;;:::i;1724:538:11:-;;;;;;;;;;-1:-1:-1;1724:538:11;;;;;:::i;:::-;;:::i;1176:542::-;;;;;;:::i;:::-;;:::i;2643:278::-;;;;;;;;;;;;;:::i;10160:179:12:-;;;;;;;;;;-1:-1:-1;10160:179:12;;;;;:::i;:::-;;:::i;7450:123::-;;;;;;;;;;-1:-1:-1;7450:123:12;;;;;:::i;:::-;;:::i;332:43:11:-;;;;;;;;;;;;368:7;332:43;;530:33;;;;;;;;;;;;;;;;4966:203:12;;;;;;;;;;-1:-1:-1;4966:203:12;;;;;:::i;:::-;;:::i;1824:101:0:-;;;;;;;;;;;;;:::i;1201:85::-;;;;;;;;;;-1:-1:-1;1273:6:0;;-1:-1:-1;;;;;1273:6:0;1201:85;;7797:102:12;;;;;;;;;;;;;:::i;9358:282::-;;;;;;;;;;-1:-1:-1;9358:282:12;;;;;:::i;:::-;;:::i;479:45:11:-;;;;;;;;;;;;515:9;479:45;;10405:359:12;;;;;;;;;;-1:-1:-1;10405:359:12;;;;;:::i;:::-;;:::i;815:43:11:-;;;;;;;;;;-1:-1:-1;815:43:11;;;;;:::i;:::-;;;;;;;;;;;;;;;;429;;;;;;;;;;;;469:3;429:43;;7965:313:12;;;;;;;;;;-1:-1:-1;7965:313:12;;;;;:::i;:::-;;:::i;381:42:11:-;;;;;;;;;;;;422:1;381:42;;651:54;;;;;;;;;;-1:-1:-1;651:54:11;;;;;:::i;:::-;;;;;;;;;;;;;;2268:192;;;;;;;;;;-1:-1:-1;2268:192:11;;;;;:::i;:::-;;:::i;9706:162:12:-;;;;;;;;;;-1:-1:-1;9706:162:12;;;;;:::i;:::-;;:::i;2074:198:0:-;;;;;;;;;;-1:-1:-1;2074:198:0;;;;;:::i;:::-;;:::i;4607:300:12:-;4709:4;-1:-1:-1;;;;;;4744:40:12;;-1:-1:-1;;;4744:40:12;;:104;;-1:-1:-1;;;;;;;4800:48:12;;-1:-1:-1;;;4800:48:12;4744:104;:156;;;-1:-1:-1;;;;;;;;;;937:40:7;;;4864:36:12;4725:175;4607:300;-1:-1:-1;;4607:300:12:o;2466:171:11:-;2528:7;2550:20;;;:11;:20;;;;;;;;2547:58;;;-1:-1:-1;2593:1:11;;2466:171;-1:-1:-1;2466:171:11:o;2547:58::-;-1:-1:-1;368:7:11;;2466:171;-1:-1:-1;2466:171:11:o;7635:98:12:-;7689:13;7721:5;7714:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7635:98;:::o;9091:200::-;9159:7;9183:16;9191:7;9183;:16::i;:::-;9178:64;;9208:34;;-1:-1:-1;;;9208:34:12;;;;;;;;;;;9178:64;-1:-1:-1;9260:24:12;;;;:15;:24;;;;;;-1:-1:-1;;;;;9260:24:12;;9091:200::o;8668:362::-;8740:13;8756:24;8772:7;8756:15;:24::i;:::-;8740:40;;8800:5;-1:-1:-1;;;;;8794:11:12;:2;-1:-1:-1;;;;;8794:11:12;;8790:48;;8814:24;;-1:-1:-1;;;8814:24:12;;;;;;;;;;;8790:48;719:10:5;-1:-1:-1;;;;;8853:21:12;;;;;;:63;;-1:-1:-1;8879:37:12;8896:5;719:10:5;9706:162:12;:::i;8879:37::-;8878:38;8853:63;8849:136;;;8939:35;;-1:-1:-1;;;8939:35:12;;;;;;;;;;;8849:136;8995:28;9004:2;9008:7;9017:5;8995:8;:28::i;:::-;8730:300;8668:362;;:::o;9930:164::-;10059:28;10069:4;10075:2;10079:7;10059:9;:28::i;1724:538:11:-;1802:26;1820:7;1802:17;:26::i;:::-;1784:15;:44;1776:79;;;;-1:-1:-1;;;1776:79:11;;5363:2:14;1776:79:11;;;5345:21:14;5402:2;5382:18;;;5375:30;-1:-1:-1;;;5421:18:14;;;5414:52;5483:18;;1776:79:11;;;;;;;;;1918:16;1926:7;1918;:16::i;:::-;-1:-1:-1;;;;;1904:30:11;:10;-1:-1:-1;;;;;1904:30:11;;1896:55;;;;-1:-1:-1;;;1896:55:11;;5714:2:14;1896:55:11;;;5696:21:14;5753:2;5733:18;;;5726:30;-1:-1:-1;;;5772:18:14;;;5765:42;5824:18;;1896:55:11;5512:336:14;1896:55:11;1961:20;1984:24;2000:7;1984:15;:24::i;:::-;2078:13;;1961:47;;-1:-1:-1;2056:45:11;;2066:10;;-1:-1:-1;;;;;2078:13:11;2093:7;2056:9;:45::i;:::-;2137:20;;;;:11;:20;;;;;:27;;-1:-1:-1;;2137:27:11;2160:4;2137:27;;;2203:52;2229:10;2242:12;2203:17;:52::i;:::-;1766:496;1724:538;:::o;1176:542::-;1258:20;1270:8;368:7;1258:20;:::i;:::-;1245:9;:33;;1237:63;;;;-1:-1:-1;;;1237:63:11;;6360:2:14;1237:63:11;;;6342:21:14;6399:2;6379:18;;;6372:30;-1:-1:-1;;;6418:18:14;;;6411:47;6475:18;;1237:63:11;6158:341:14;1237:63:11;1332:10;5307:7:12;5341:19;;;422:1:11;5341:19:12;;;;;;;;:32;1347:8:11;;-1:-1:-1;;;5341:32:12;;;;1318:37:11;;;;:::i;:::-;:55;;1310:78;;;;-1:-1:-1;;;1310:78:11;;6836:2:14;1310:78:11;;;6818:21:14;6875:2;6855:18;;;6848:30;-1:-1:-1;;;6894:18:14;;;6887:40;6944:18;;1310:78:11;6634:334:14;1310:78:11;469:3;1406:14;4310:7:12;4492:13;;4263:277;1406:14:11;:31;;1398:68;;;;-1:-1:-1;;;1398:68:11;;7175:2:14;1398:68:11;;;7157:21:14;7214:2;7194:18;;;7187:30;7253:26;7233:18;;;7226:54;7297:18;;1398:68:11;6973:348:14;1398:68:11;1477:31;1487:10;1499:8;1477:9;:31::i;:::-;1539:30;515:9;1539:15;:30;:::i;:::-;1518:18;:51;1583:9;1593:13;;:24;;1609:8;;1593:24;:::i;:::-;1583:34;;1579:132;1623:13;;1619:1;:17;1579:132;;;1682:18;;1657:22;;;;:19;:22;;;;;:43;1677:1;1638:3;1677:1;1638:3;:::i;:::-;;;;1579:132;;2643:278;1094:13:0;:11;:13::i;:::-;2718:18:11::1;;2700:15;:36;2692:80;;;::::0;-1:-1:-1;;;2692:80:11;;7801:2:14;2692:80:11::1;::::0;::::1;7783:21:14::0;7840:2;7820:18;;;7813:30;7879:33;7859:18;;;7852:61;7930:18;;2692:80:11::1;7599:355:14::0;2692:80:11::1;2800:21;2867:47;2893:10;2800:21:::0;2867:17:::1;:47::i;:::-;2682:239;2643:278::o:0;10160:179:12:-;10293:39;10310:4;10316:2;10320:7;10293:39;;;;;;;;;;;;:16;:39::i;7450:123::-;7514:7;7540:21;7553:7;7540:12;:21::i;:::-;:26;;7450:123;-1:-1:-1;;7450:123:12:o;4966:203::-;5030:7;-1:-1:-1;;;;;5053:19:12;;5049:60;;5081:28;;-1:-1:-1;;;5081:28:12;;;;;;;;;;;5049:60;-1:-1:-1;;;;;;5134:19:12;;;;;:12;:19;;;;;:27;;;;4966:203::o;1824:101:0:-;1094:13;:11;:13::i;:::-;1888:30:::1;1915:1;1888:18;:30::i;:::-;1824:101::o:0;7797:102:12:-;7853:13;7885:7;7878:14;;;;;:::i;9358:282::-;719:10:5;-1:-1:-1;;;;;9456:24:12;;;9452:54;;9489:17;;-1:-1:-1;;;9489:17:12;;;;;;;;;;;9452:54;719:10:5;9517:32:12;;;;:18;:32;;;;;;;;-1:-1:-1;;;;;9517:42:12;;;;;;;;;;;;:53;;-1:-1:-1;;9517:53:12;;;;;;;;;;9585:48;;540:41:14;;;9517:42:12;;719:10:5;9585:48:12;;513:18:14;9585:48:12;;;;;;;9358:282;;:::o;10405:359::-;10566:28;10576:4;10582:2;10586:7;10566:9;:28::i;:::-;-1:-1:-1;;;;;10608:13:12;;1702:19:4;:23;;10608:76:12;;;;;10628:56;10659:4;10665:2;10669:7;10678:5;10628:30;:56::i;:::-;10627:57;10608:76;10604:154;;;10707:40;;-1:-1:-1;;;10707:40:12;;;;;;;;;;;10604:154;10405:359;;;;:::o;7965:313::-;8038:13;8068:16;8076:7;8068;:16::i;:::-;8063:59;;8093:29;;-1:-1:-1;;;8093:29:12;;;;;;;;;;;8063:59;8133:21;8157:10;:8;:10::i;:::-;8133:34;;8190:7;8184:21;8209:1;8184:26;:87;;;;;;;;;;;;;;;;;8237:7;8246:18;:7;:16;:18::i;:::-;8220:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;8184:87;8177:94;7965:313;-1:-1:-1;;;7965:313:12:o;2268:192:11:-;2332:7;2354:20;;;:11;:20;;;;;;;;2351:58;;;-1:-1:-1;2397:1:11;;2268:192;-1:-1:-1;2268:192:11:o;2351:58::-;-1:-1:-1;2425:28:11;;;;:19;:28;;;;;;;2268:192::o;9706:162:12:-;-1:-1:-1;;;;;9826:25:12;;;9803:4;9826:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;9706:162::o;2074:198:0:-;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2162:22:0;::::1;2154:73;;;::::0;-1:-1:-1;;;2154:73:0;;8662:2:14;2154:73:0::1;::::0;::::1;8644:21:14::0;8701:2;8681:18;;;8674:30;8740:34;8720:18;;;8713:62;-1:-1:-1;;;8791:18:14;;;8784:36;8837:19;;2154:73:0::1;8460:402:14::0;2154:73:0::1;2237:28;2256:8;2237:18;:28::i;11010:184:12:-:0;11067:4;11130:13;;11120:7;:23;11090:97;;;;-1:-1:-1;;11160:20:12;;;;:11;:20;;;;;:27;-1:-1:-1;;;11160:27:12;;;;11159:28;;11010:184::o;18963:190::-;19074:24;;;;:15;:24;;;;;;:29;;-1:-1:-1;;;;;;19074:29:12;-1:-1:-1;;;;;19074:29:12;;;;;;;;;19118:28;;19074:24;;19118:28;;;;;;;18963:190;;;:::o;14032:2083::-;14143:35;14181:21;14194:7;14181:12;:21::i;:::-;14143:59;;14239:4;-1:-1:-1;;;;;14217:26:12;:13;:18;;;-1:-1:-1;;;;;14217:26:12;;14213:67;;14252:28;;-1:-1:-1;;;14252:28:12;;;;;;;;;;;14213:67;14291:22;719:10:5;-1:-1:-1;;;;;14317:20:12;;;;:72;;-1:-1:-1;14353:36:12;14370:4;719:10:5;9706:162:12;:::i;14353:36::-;14317:124;;;-1:-1:-1;719:10:5;14405:20:12;14417:7;14405:11;:20::i;:::-;-1:-1:-1;;;;;14405:36:12;;14317:124;14291:151;;14458:17;14453:66;;14484:35;;-1:-1:-1;;;14484:35:12;;;;;;;;;;;14453:66;-1:-1:-1;;;;;14533:16:12;;14529:52;;14558:23;;-1:-1:-1;;;14558:23:12;;;;;;;;;;;14529:52;14697:35;14714:1;14718:7;14727:4;14697:8;:35::i;:::-;-1:-1:-1;;;;;15022:18:12;;;;;;;:12;:18;;;;;;;;:31;;-1:-1:-1;;15022:31:12;;;;;;;-1:-1:-1;;15022:31:12;;;;;;;15067:16;;;;;;;;;:29;;;;;;;;-1:-1:-1;15067:29:12;;;;;;;;;;;15145:20;;;:11;:20;;;;;;15179:18;;-1:-1:-1;;;;;;15211:49:12;;;;-1:-1:-1;;;15244:15:12;15211:49;;;;;;;;;;15530:11;;15589:24;;;;;15631:13;;15145:20;;15589:24;;15631:13;15627:377;;15838:13;;15823:11;:28;15819:171;;15875:20;;15943:28;;;;15917:54;;-1:-1:-1;;;15917:54:12;-1:-1:-1;;;;;;15917:54:12;;;-1:-1:-1;;;;;15875:20:12;;15917:54;;;;15819:171;14998:1016;;;16048:7;16044:2;-1:-1:-1;;;;;16029:27:12;16038:4;-1:-1:-1;;;;;16029:27:12;;;;;;;;;;;16066:42;14133:1982;;14032:2083;;;:::o;2647:312:4:-;2761:6;2736:21;:31;;2728:73;;;;-1:-1:-1;;;2728:73:4;;9069:2:14;2728:73:4;;;9051:21:14;9108:2;9088:18;;;9081:30;9147:31;9127:18;;;9120:59;9196:18;;2728:73:4;8867:353:14;2728:73:4;2813:12;2831:9;-1:-1:-1;;;;;2831:14:4;2853:6;2831:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2812:52;;;2882:7;2874:78;;;;-1:-1:-1;;;2874:78:4;;9637:2:14;2874:78:4;;;9619:21:14;9676:2;9656:18;;;9649:30;9715:34;9695:18;;;9688:62;9786:28;9766:18;;;9759:56;9832:19;;2874:78:4;9435:422:14;11200:102:12;11268:27;11278:2;11282:8;11268:27;;;;;;;;;;;;:9;:27::i;1359:130:0:-;1273:6;;-1:-1:-1;;;;;1273:6:0;719:10:5;1422:23:0;1414:68;;;;-1:-1:-1;;;1414:68:0;;10064:2:14;1414:68:0;;;10046:21:14;;;10083:18;;;10076:30;10142:34;10122:18;;;10115:62;10194:18;;1414:68:0;9862:356:14;6309:1084:12;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;6419:7:12;6499:13;;6492:4;:20;6461:868;;;6532:31;6566:17;;;:11;:17;;;;;;;;;6532:51;;;;;;;;;-1:-1:-1;;;;;6532:51:12;;;;-1:-1:-1;;;6532:51:12;;;;;;;;;;;-1:-1:-1;;;6532:51:12;;;;;;;;;;;;;;6601:714;;6650:14;;-1:-1:-1;;;;;6650:28:12;;6646:99;;6713:9;6309:1084;-1:-1:-1;;;6309:1084:12:o;6646:99::-;-1:-1:-1;;;7081:6:12;7125:17;;;;:11;:17;;;;;;;;;7113:29;;;;;;;;;-1:-1:-1;;;;;7113:29:12;;;;;-1:-1:-1;;;7113:29:12;;;;;;;;;;;-1:-1:-1;;;7113:29:12;;;;;;;;;;;;;7172:28;7168:107;;7239:9;6309:1084;-1:-1:-1;;;6309:1084:12:o;7168:107::-;7042:255;;;6514:815;6461:868;7355:31;;-1:-1:-1;;;7355:31:12;;;;;;;;;;;2426:187:0;2518:6;;;-1:-1:-1;;;;;2534:17:0;;;-1:-1:-1;;;;;;2534:17:0;;;;;;;2566:40;;2518:6;;;2534:17;2518:6;;2566:40;;2499:16;;2566:40;2489:124;2426:187;:::o;19634:651:12:-;19813:72;;-1:-1:-1;;;19813:72:12;;19793:4;;-1:-1:-1;;;;;19813:36:12;;;;;:72;;719:10:5;;19864:4:12;;19870:7;;19879:5;;19813:72;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;19813:72:12;;;;;;;;-1:-1:-1;;19813:72:12;;;;;;;;;;;;:::i;:::-;;;19809:470;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20044:6;:13;20061:1;20044:18;20040:229;;20089:40;;-1:-1:-1;;;20089:40:12;;;;;;;;;;;20040:229;20229:6;20223:13;20214:6;20210:2;20206:15;20199:38;19809:470;-1:-1:-1;;;;;;19931:55:12;-1:-1:-1;;;19931:55:12;;-1:-1:-1;19634:651:12;;;;;;:::o;1023:147:11:-;1075:13;1100:63;;;;;;;;;;;;;;;;;;;1023:147;:::o;447:696:6:-;503:13;552:14;569:17;580:5;569:10;:17::i;:::-;589:1;569:21;552:38;;604:20;638:6;627:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;627:18:6;-1:-1:-1;604:41:6;-1:-1:-1;765:28:6;;;781:2;765:28;820:280;-1:-1:-1;;851:5:6;-1:-1:-1;;;985:2:6;974:14;;969:30;851:5;956:44;1044:2;1035:11;;;-1:-1:-1;1064:21:6;820:280;1064:21;-1:-1:-1;1120:6:6;447:696;-1:-1:-1;;;447:696:6:o;11653:157:12:-;11771:32;11777:2;11781:8;11791:5;11798:4;11771:5;:32::i;10139:916:9:-;10192:7;;-1:-1:-1;;;10267:17:9;;10263:103;;-1:-1:-1;;;10304:17:9;;;-1:-1:-1;10349:2:9;10339:12;10263:103;10392:8;10383:5;:17;10379:103;;10429:8;10420:17;;;-1:-1:-1;10465:2:9;10455:12;10379:103;10508:8;10499:5;:17;10495:103;;10545:8;10536:17;;;-1:-1:-1;10581:2:9;10571:12;10495:103;10624:7;10615:5;:16;10611:100;;10660:7;10651:16;;;-1:-1:-1;10695:1:9;10685:11;10611:100;10737:7;10728:5;:16;10724:100;;10773:7;10764:16;;;-1:-1:-1;10808:1:9;10798:11;10724:100;10850:7;10841:5;:16;10837:100;;10886:7;10877:16;;;-1:-1:-1;10921:1:9;10911:11;10837:100;10963:7;10954:5;:16;10950:66;;11000:1;10990:11;11042:6;10139:916;-1:-1:-1;;10139:916:9:o;12057:1733:12:-;12190:20;12213:13;-1:-1:-1;;;;;12240:16:12;;12236:48;;12265:19;;-1:-1:-1;;;12265:19:12;;;;;;;;;;;12236:48;12298:8;12310:1;12298:13;12294:44;;12320:18;;-1:-1:-1;;;12320:18:12;;;;;;;;;;;12294:44;-1:-1:-1;;;;;12681:16:12;;;;;;:12;:16;;;;;;;;:44;;-1:-1:-1;;12739:49:12;;12681:44;;;;;;;;12739:49;;;-1:-1:-1;;;;;12681:44:12;;;;;;12739:49;;;;;;;;;;;;;;;;12803:25;;;:11;:25;;;;;;:35;;-1:-1:-1;;;;;;12852:66:12;;;;-1:-1:-1;;;12902:15:12;12852:66;;;;;;;;;;12803:25;12996:23;;;13038:4;:23;;;;-1:-1:-1;;;;;;13046:13:12;;1702:19:4;:23;;13046:15:12;13034:628;;;13081:309;13111:38;;13136:12;;-1:-1:-1;;;;;13111:38:12;;;13128:1;;13111:38;;13128:1;;13111:38;13176:69;13215:1;13219:2;13223:14;;;;;;13239:5;13176:30;:69::i;:::-;13171:172;;13280:40;;-1:-1:-1;;;13280:40:12;;;;;;;;;;;13171:172;13385:3;13369:12;:19;13081:309;;13469:12;13452:13;;:29;13448:43;;13483:8;;;13448:43;13034:628;;;13530:118;13560:40;;13585:14;;;;;-1:-1:-1;;;;;13560:40:12;;;13577:1;;13560:40;;13577:1;;13560:40;13643:3;13627:12;:19;13530:118;;13034:628;-1:-1:-1;13675:13:12;:28;13723:60;10405:359;14:131:14;-1:-1:-1;;;;;;88:32:14;;78:43;;68:71;;135:1;132;125:12;150:245;208:6;261:2;249:9;240:7;236:23;232:32;229:52;;;277:1;274;267:12;229:52;316:9;303:23;335:30;359:5;335:30;:::i;592:180::-;651:6;704:2;692:9;683:7;679:23;675:32;672:52;;;720:1;717;710:12;672:52;-1:-1:-1;743:23:14;;592:180;-1:-1:-1;592:180:14:o;959:250::-;1044:1;1054:113;1068:6;1065:1;1062:13;1054:113;;;1144:11;;;1138:18;1125:11;;;1118:39;1090:2;1083:10;1054:113;;;-1:-1:-1;;1201:1:14;1183:16;;1176:27;959:250::o;1214:271::-;1256:3;1294:5;1288:12;1321:6;1316:3;1309:19;1337:76;1406:6;1399:4;1394:3;1390:14;1383:4;1376:5;1372:16;1337:76;:::i;:::-;1467:2;1446:15;-1:-1:-1;;1442:29:14;1433:39;;;;1474:4;1429:50;;1214:271;-1:-1:-1;;1214:271:14:o;1490:220::-;1639:2;1628:9;1621:21;1602:4;1659:45;1700:2;1689:9;1685:18;1677:6;1659:45;:::i;1923:173::-;1991:20;;-1:-1:-1;;;;;2040:31:14;;2030:42;;2020:70;;2086:1;2083;2076:12;2020:70;1923:173;;;:::o;2101:254::-;2169:6;2177;2230:2;2218:9;2209:7;2205:23;2201:32;2198:52;;;2246:1;2243;2236:12;2198:52;2269:29;2288:9;2269:29;:::i;:::-;2259:39;2345:2;2330:18;;;;2317:32;;-1:-1:-1;;;2101:254:14:o;2360:328::-;2437:6;2445;2453;2506:2;2494:9;2485:7;2481:23;2477:32;2474:52;;;2522:1;2519;2512:12;2474:52;2545:29;2564:9;2545:29;:::i;:::-;2535:39;;2593:38;2627:2;2616:9;2612:18;2593:38;:::i;:::-;2583:48;;2678:2;2667:9;2663:18;2650:32;2640:42;;2360:328;;;;;:::o;2693:186::-;2752:6;2805:2;2793:9;2784:7;2780:23;2776:32;2773:52;;;2821:1;2818;2811:12;2773:52;2844:29;2863:9;2844:29;:::i;2884:347::-;2949:6;2957;3010:2;2998:9;2989:7;2985:23;2981:32;2978:52;;;3026:1;3023;3016:12;2978:52;3049:29;3068:9;3049:29;:::i;:::-;3039:39;;3128:2;3117:9;3113:18;3100:32;3175:5;3168:13;3161:21;3154:5;3151:32;3141:60;;3197:1;3194;3187:12;3141:60;3220:5;3210:15;;;2884:347;;;;;:::o;3236:127::-;3297:10;3292:3;3288:20;3285:1;3278:31;3328:4;3325:1;3318:15;3352:4;3349:1;3342:15;3368:1138;3463:6;3471;3479;3487;3540:3;3528:9;3519:7;3515:23;3511:33;3508:53;;;3557:1;3554;3547:12;3508:53;3580:29;3599:9;3580:29;:::i;:::-;3570:39;;3628:38;3662:2;3651:9;3647:18;3628:38;:::i;:::-;3618:48;;3713:2;3702:9;3698:18;3685:32;3675:42;;3768:2;3757:9;3753:18;3740:32;3791:18;3832:2;3824:6;3821:14;3818:34;;;3848:1;3845;3838:12;3818:34;3886:6;3875:9;3871:22;3861:32;;3931:7;3924:4;3920:2;3916:13;3912:27;3902:55;;3953:1;3950;3943:12;3902:55;3989:2;3976:16;4011:2;4007;4004:10;4001:36;;;4017:18;;:::i;:::-;4092:2;4086:9;4060:2;4146:13;;-1:-1:-1;;4142:22:14;;;4166:2;4138:31;4134:40;4122:53;;;4190:18;;;4210:22;;;4187:46;4184:72;;;4236:18;;:::i;:::-;4276:10;4272:2;4265:22;4311:2;4303:6;4296:18;4351:7;4346:2;4341;4337;4333:11;4329:20;4326:33;4323:53;;;4372:1;4369;4362:12;4323:53;4428:2;4423;4419;4415:11;4410:2;4402:6;4398:15;4385:46;4473:1;4468:2;4463;4455:6;4451:15;4447:24;4440:35;4494:6;4484:16;;;;;;;3368:1138;;;;;;;:::o;4511:260::-;4579:6;4587;4640:2;4628:9;4619:7;4615:23;4611:32;4608:52;;;4656:1;4653;4646:12;4608:52;4679:29;4698:9;4679:29;:::i;:::-;4669:39;;4727:38;4761:2;4750:9;4746:18;4727:38;:::i;:::-;4717:48;;4511:260;;;;;:::o;4776:380::-;4855:1;4851:12;;;;4898;;;4919:61;;4973:4;4965:6;4961:17;4951:27;;4919:61;5026:2;5018:6;5015:14;4995:18;4992:38;4989:161;;5072:10;5067:3;5063:20;5060:1;5053:31;5107:4;5104:1;5097:15;5135:4;5132:1;5125:15;4989:161;;4776:380;;;:::o;5853:127::-;5914:10;5909:3;5905:20;5902:1;5895:31;5945:4;5942:1;5935:15;5969:4;5966:1;5959:15;5985:168;6058:9;;;6089;;6106:15;;;6100:22;;6086:37;6076:71;;6127:18;;:::i;6504:125::-;6569:9;;;6590:10;;;6587:36;;;6603:18;;:::i;7326:128::-;7393:9;;;7414:11;;;7411:37;;;7428:18;;:::i;7459:135::-;7498:3;7519:17;;;7516:43;;7539:18;;:::i;:::-;-1:-1:-1;7586:1:14;7575:13;;7459:135::o;7959:496::-;8138:3;8176:6;8170:13;8192:66;8251:6;8246:3;8239:4;8231:6;8227:17;8192:66;:::i;:::-;8321:13;;8280:16;;;;8343:70;8321:13;8280:16;8390:4;8378:17;;8343:70;:::i;:::-;8429:20;;7959:496;-1:-1:-1;;;;7959:496:14:o;10223:489::-;-1:-1:-1;;;;;10492:15:14;;;10474:34;;10544:15;;10539:2;10524:18;;10517:43;10591:2;10576:18;;10569:34;;;10639:3;10634:2;10619:18;;10612:31;;;10417:4;;10660:46;;10686:19;;10678:6;10660:46;:::i;:::-;10652:54;10223:489;-1:-1:-1;;;;;;10223:489:14:o;10717:249::-;10786:6;10839:2;10827:9;10818:7;10814:23;10810:32;10807:52;;;10855:1;10852;10845:12;10807:52;10887:9;10881:16;10906:30;10930:5;10906:30;:::i"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1392200",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"approve(address,uint256)": "infinite",
								"balanceOf(address)": "2641",
								"getApproved(uint256)": "6914",
								"getRefundAmount(uint256)": "2552",
								"getRefundDeadline(uint256)": "4710",
								"hasRefunded(uint256)": "2484",
								"isApprovedForAll(address,address)": "infinite",
								"maxMintPerUser()": "306",
								"maxMintSupply()": "262",
								"mintPrice()": "284",
								"name()": "infinite",
								"owner()": "2421",
								"ownerOf(uint256)": "infinite",
								"refund(uint256)": "infinite",
								"refundAddress()": "2427",
								"refundEndTimeStamp()": "2406",
								"refundEndTimestamps(uint256)": "2482",
								"refundPeriod()": "284",
								"renounceOwnership()": "infinite",
								"safeMint(uint256)": "infinite",
								"safeTransferFrom(address,address,uint256)": "infinite",
								"safeTransferFrom(address,address,uint256,bytes)": "infinite",
								"setApprovalForAll(address,bool)": "26692",
								"supportsInterface(bytes4)": "557",
								"symbol()": "infinite",
								"tokenURI(uint256)": "infinite",
								"totalSupply()": "4510",
								"transferFrom(address,address,uint256)": "infinite",
								"transferOwnership(address)": "28446",
								"withdraw()": "infinite"
							},
							"internal": {
								"_baseURI()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 283,
									"end": 2923,
									"name": "PUSH",
									"source": 11,
									"value": "80"
								},
								{
									"begin": 283,
									"end": 2923,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 283,
									"end": 2923,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 865,
									"end": 1017,
									"name": "CALLVALUE",
									"source": 11
								},
								{
									"begin": 865,
									"end": 1017,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 865,
									"end": 1017,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 865,
									"end": 1017,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 865,
									"end": 1017,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 865,
									"end": 1017,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 865,
									"end": 1017,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 865,
									"end": 1017,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 865,
									"end": 1017,
									"name": "tag",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 865,
									"end": 1017,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 865,
									"end": 1017,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "PUSH",
									"source": 12,
									"value": "C"
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "576562334275696C64657273"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "PUSH",
									"source": 12,
									"value": "3"
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "574533"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E8"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3487,
									"end": 3492,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 3479,
									"end": 3484,
									"name": "PUSH",
									"source": 12,
									"value": "2"
								},
								{
									"begin": 3479,
									"end": 3492,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 3479,
									"end": 3492,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 3479,
									"end": 3492,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "6"
								},
								{
									"begin": 3479,
									"end": 3492,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 3479,
									"end": 3492,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 3479,
									"end": 3492,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "7"
								},
								{
									"begin": 3479,
									"end": 3492,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 3479,
									"end": 3492,
									"name": "tag",
									"source": 12,
									"value": "6"
								},
								{
									"begin": 3479,
									"end": 3492,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3502,
									"end": 3509,
									"name": "PUSH",
									"source": 12,
									"value": "3"
								},
								{
									"begin": 3502,
									"end": 3519,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "8"
								},
								{
									"begin": 3512,
									"end": 3519,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 3502,
									"end": 3509,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 3502,
									"end": 3519,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "7"
								},
								{
									"begin": 3502,
									"end": 3519,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 3502,
									"end": 3519,
									"name": "tag",
									"source": 12,
									"value": "8"
								},
								{
									"begin": 3502,
									"end": 3519,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3715,
									"end": 3722,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 3529,
									"end": 3560,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 3529,
									"end": 3560,
									"name": "SSTORE",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 936,
									"end": 968,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "12"
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 5
								},
								{
									"begin": 936,
									"end": 954,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "15"
								},
								{
									"begin": 936,
									"end": 968,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 936,
									"end": 968,
									"name": "tag",
									"source": 0,
									"value": "12"
								},
								{
									"begin": 936,
									"end": 968,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 920,
									"end": 933,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 11,
									"value": "A"
								},
								{
									"begin": 920,
									"end": 949,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 920,
									"end": 949,
									"name": "SLOAD",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 920,
									"end": 949,
									"modifierDepth": 1,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 944,
									"end": 948,
									"modifierDepth": 1,
									"name": "ADDRESS",
									"source": 11
								},
								{
									"begin": 920,
									"end": 949,
									"modifierDepth": 1,
									"name": "OR",
									"source": 11
								},
								{
									"begin": 920,
									"end": 949,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 920,
									"end": 949,
									"name": "SSTORE",
									"source": 11
								},
								{
									"begin": 980,
									"end": 1010,
									"modifierDepth": 1,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "17"
								},
								{
									"begin": 515,
									"end": 524,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 11,
									"value": "B4"
								},
								{
									"begin": 980,
									"end": 995,
									"modifierDepth": 1,
									"name": "TIMESTAMP",
									"source": 11
								},
								{
									"begin": 980,
									"end": 1010,
									"modifierDepth": 1,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "18"
								},
								{
									"begin": 980,
									"end": 1010,
									"jumpType": "[in]",
									"modifierDepth": 1,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 980,
									"end": 1010,
									"modifierDepth": 1,
									"name": "tag",
									"source": 11,
									"value": "17"
								},
								{
									"begin": 980,
									"end": 1010,
									"modifierDepth": 1,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 959,
									"end": 977,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 11,
									"value": "9"
								},
								{
									"begin": 959,
									"end": 1010,
									"name": "SSTORE",
									"source": 11
								},
								{
									"begin": 283,
									"end": 2923,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "28"
								},
								{
									"begin": 283,
									"end": 2923,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 2426,
									"end": 2613,
									"name": "tag",
									"source": 0,
									"value": "15"
								},
								{
									"begin": 2426,
									"end": 2613,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2518,
									"end": 2524,
									"name": "PUSH",
									"source": 0,
									"value": "8"
								},
								{
									"begin": 2518,
									"end": 2524,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2518,
									"end": 2524,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 2534,
									"end": 2551,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2534,
									"end": 2551,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2534,
									"end": 2551,
									"name": "AND",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2534,
									"end": 2551,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2534,
									"end": 2551,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2534,
									"end": 2551,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2534,
									"end": 2551,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 2534,
									"end": 2551,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2534,
									"end": 2551,
									"name": "SWAP4",
									"source": 0
								},
								{
									"begin": 2534,
									"end": 2551,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 2566,
									"end": 2606,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2566,
									"end": 2606,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2518,
									"end": 2524,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2518,
									"end": 2524,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2518,
									"end": 2524,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2534,
									"end": 2551,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2518,
									"end": 2524,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 2518,
									"end": 2524,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2566,
									"end": 2606,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 2566,
									"end": 2606,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2499,
									"end": 2515,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2499,
									"end": 2515,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2566,
									"end": 2606,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 2489,
									"end": 2613,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2426,
									"end": 2613,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2426,
									"end": 2613,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 14,
									"end": 141,
									"name": "tag",
									"source": 14,
									"value": "23"
								},
								{
									"begin": 14,
									"end": 141,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 75,
									"end": 85,
									"name": "PUSH",
									"source": 14,
									"value": "4E487B71"
								},
								{
									"begin": 70,
									"end": 73,
									"name": "PUSH",
									"source": 14,
									"value": "E0"
								},
								{
									"begin": 66,
									"end": 86,
									"name": "SHL",
									"source": 14
								},
								{
									"begin": 63,
									"end": 64,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 56,
									"end": 87,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 106,
									"end": 110,
									"name": "PUSH",
									"source": 14,
									"value": "41"
								},
								{
									"begin": 103,
									"end": 104,
									"name": "PUSH",
									"source": 14,
									"value": "4"
								},
								{
									"begin": 96,
									"end": 111,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 130,
									"end": 134,
									"name": "PUSH",
									"source": 14,
									"value": "24"
								},
								{
									"begin": 127,
									"end": 128,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 120,
									"end": 135,
									"name": "REVERT",
									"source": 14
								},
								{
									"begin": 146,
									"end": 526,
									"name": "tag",
									"source": 14,
									"value": "24"
								},
								{
									"begin": 146,
									"end": 526,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 225,
									"end": 226,
									"name": "PUSH",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 221,
									"end": 233,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 221,
									"end": 233,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 221,
									"end": 233,
									"name": "SHR",
									"source": 14
								},
								{
									"begin": 221,
									"end": 233,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 268,
									"end": 280,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 268,
									"end": 280,
									"name": "AND",
									"source": 14
								},
								{
									"begin": 268,
									"end": 280,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 289,
									"end": 350,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "31"
								},
								{
									"begin": 289,
									"end": 350,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 343,
									"end": 347,
									"name": "PUSH",
									"source": 14,
									"value": "7F"
								},
								{
									"begin": 335,
									"end": 341,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 331,
									"end": 348,
									"name": "AND",
									"source": 14
								},
								{
									"begin": 321,
									"end": 348,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 321,
									"end": 348,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 289,
									"end": 350,
									"name": "tag",
									"source": 14,
									"value": "31"
								},
								{
									"begin": 289,
									"end": 350,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 396,
									"end": 398,
									"name": "PUSH",
									"source": 14,
									"value": "20"
								},
								{
									"begin": 388,
									"end": 394,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 385,
									"end": 399,
									"name": "LT",
									"source": 14
								},
								{
									"begin": 365,
									"end": 383,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 362,
									"end": 400,
									"name": "SUB",
									"source": 14
								},
								{
									"begin": 359,
									"end": 520,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "32"
								},
								{
									"begin": 359,
									"end": 520,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 442,
									"end": 452,
									"name": "PUSH",
									"source": 14,
									"value": "4E487B71"
								},
								{
									"begin": 437,
									"end": 440,
									"name": "PUSH",
									"source": 14,
									"value": "E0"
								},
								{
									"begin": 433,
									"end": 453,
									"name": "SHL",
									"source": 14
								},
								{
									"begin": 430,
									"end": 431,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 423,
									"end": 454,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 477,
									"end": 481,
									"name": "PUSH",
									"source": 14,
									"value": "22"
								},
								{
									"begin": 474,
									"end": 475,
									"name": "PUSH",
									"source": 14,
									"value": "4"
								},
								{
									"begin": 467,
									"end": 482,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 505,
									"end": 509,
									"name": "PUSH",
									"source": 14,
									"value": "24"
								},
								{
									"begin": 502,
									"end": 503,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 495,
									"end": 510,
									"name": "REVERT",
									"source": 14
								},
								{
									"begin": 359,
									"end": 520,
									"name": "tag",
									"source": 14,
									"value": "32"
								},
								{
									"begin": 359,
									"end": 520,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 359,
									"end": 520,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 146,
									"end": 526,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 146,
									"end": 526,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 146,
									"end": 526,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 146,
									"end": 526,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 657,
									"end": 1202,
									"name": "tag",
									"source": 14,
									"value": "26"
								},
								{
									"begin": 657,
									"end": 1202,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 759,
									"end": 761,
									"name": "PUSH",
									"source": 14,
									"value": "1F"
								},
								{
									"begin": 754,
									"end": 757,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 751,
									"end": 762,
									"name": "GT",
									"source": 14
								},
								{
									"begin": 748,
									"end": 1196,
									"name": "ISZERO",
									"source": 14
								},
								{
									"begin": 748,
									"end": 1196,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "35"
								},
								{
									"begin": 748,
									"end": 1196,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 795,
									"end": 796,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 820,
									"end": 825,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 816,
									"end": 818,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 809,
									"end": 826,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 865,
									"end": 869,
									"name": "PUSH",
									"source": 14,
									"value": "20"
								},
								{
									"begin": 861,
									"end": 863,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 851,
									"end": 870,
									"name": "KECCAK256",
									"source": 14
								},
								{
									"begin": 935,
									"end": 937,
									"name": "PUSH",
									"source": 14,
									"value": "1F"
								},
								{
									"begin": 923,
									"end": 933,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 919,
									"end": 938,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 916,
									"end": 917,
									"name": "PUSH",
									"source": 14,
									"value": "5"
								},
								{
									"begin": 912,
									"end": 939,
									"name": "SHR",
									"source": 14
								},
								{
									"begin": 906,
									"end": 910,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 902,
									"end": 940,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 971,
									"end": 975,
									"name": "PUSH",
									"source": 14,
									"value": "20"
								},
								{
									"begin": 959,
									"end": 969,
									"name": "DUP7",
									"source": 14
								},
								{
									"begin": 956,
									"end": 976,
									"name": "LT",
									"source": 14
								},
								{
									"begin": 953,
									"end": 1000,
									"name": "ISZERO",
									"source": 14
								},
								{
									"begin": 953,
									"end": 1000,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "36"
								},
								{
									"begin": 953,
									"end": 1000,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 994,
									"end": 998,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 953,
									"end": 1000,
									"name": "tag",
									"source": 14,
									"value": "36"
								},
								{
									"begin": 953,
									"end": 1000,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1049,
									"end": 1051,
									"name": "PUSH",
									"source": 14,
									"value": "1F"
								},
								{
									"begin": 1044,
									"end": 1047,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 1040,
									"end": 1052,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 1037,
									"end": 1038,
									"name": "PUSH",
									"source": 14,
									"value": "5"
								},
								{
									"begin": 1033,
									"end": 1053,
									"name": "SHR",
									"source": 14
								},
								{
									"begin": 1027,
									"end": 1031,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 1023,
									"end": 1054,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 1013,
									"end": 1054,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 1013,
									"end": 1054,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 1104,
									"end": 1186,
									"name": "tag",
									"source": 14,
									"value": "37"
								},
								{
									"begin": 1104,
									"end": 1186,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1122,
									"end": 1124,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 1115,
									"end": 1120,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 1112,
									"end": 1125,
									"name": "LT",
									"source": 14
								},
								{
									"begin": 1104,
									"end": 1186,
									"name": "ISZERO",
									"source": 14
								},
								{
									"begin": 1104,
									"end": 1186,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "39"
								},
								{
									"begin": 1104,
									"end": 1186,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 1167,
									"end": 1184,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 1167,
									"end": 1184,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 1167,
									"end": 1184,
									"name": "SSTORE",
									"source": 14
								},
								{
									"begin": 1148,
									"end": 1149,
									"name": "PUSH",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 1137,
									"end": 1150,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 1104,
									"end": 1186,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "37"
								},
								{
									"begin": 1104,
									"end": 1186,
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 1104,
									"end": 1186,
									"name": "tag",
									"source": 14,
									"value": "39"
								},
								{
									"begin": 1104,
									"end": 1186,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1108,
									"end": 1111,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 1108,
									"end": 1111,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 1108,
									"end": 1111,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 748,
									"end": 1196,
									"name": "tag",
									"source": 14,
									"value": "35"
								},
								{
									"begin": 748,
									"end": 1196,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 657,
									"end": 1202,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 657,
									"end": 1202,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 657,
									"end": 1202,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 657,
									"end": 1202,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 1378,
									"end": 2730,
									"name": "tag",
									"source": 14,
									"value": "7"
								},
								{
									"begin": 1378,
									"end": 2730,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1498,
									"end": 1508,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 1498,
									"end": 1508,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1520,
									"end": 1550,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 1520,
									"end": 1550,
									"name": "GT",
									"source": 14
								},
								{
									"begin": 1517,
									"end": 1573,
									"name": "ISZERO",
									"source": 14
								},
								{
									"begin": 1517,
									"end": 1573,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "43"
								},
								{
									"begin": 1517,
									"end": 1573,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 1553,
									"end": 1571,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "43"
								},
								{
									"begin": 1553,
									"end": 1571,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "23"
								},
								{
									"begin": 1553,
									"end": 1571,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 1553,
									"end": 1571,
									"name": "tag",
									"source": 14,
									"value": "43"
								},
								{
									"begin": 1553,
									"end": 1571,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1582,
									"end": 1679,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "44"
								},
								{
									"begin": 1672,
									"end": 1678,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 1632,
									"end": 1670,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "45"
								},
								{
									"begin": 1664,
									"end": 1668,
									"name": "DUP5",
									"source": 14
								},
								{
									"begin": 1658,
									"end": 1669,
									"name": "SLOAD",
									"source": 14
								},
								{
									"begin": 1632,
									"end": 1670,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "24"
								},
								{
									"begin": 1632,
									"end": 1670,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 1632,
									"end": 1670,
									"name": "tag",
									"source": 14,
									"value": "45"
								},
								{
									"begin": 1632,
									"end": 1670,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1626,
									"end": 1630,
									"name": "DUP5",
									"source": 14
								},
								{
									"begin": 1582,
									"end": 1679,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "26"
								},
								{
									"begin": 1582,
									"end": 1679,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 1582,
									"end": 1679,
									"name": "tag",
									"source": 14,
									"value": "44"
								},
								{
									"begin": 1582,
									"end": 1679,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1734,
									"end": 1738,
									"name": "PUSH",
									"source": 14,
									"value": "20"
								},
								{
									"begin": 1734,
									"end": 1738,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 1798,
									"end": 1800,
									"name": "PUSH",
									"source": 14,
									"value": "1F"
								},
								{
									"begin": 1787,
									"end": 1801,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 1787,
									"end": 1801,
									"name": "GT",
									"source": 14
								},
								{
									"begin": 1815,
									"end": 1816,
									"name": "PUSH",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 1810,
									"end": 2473,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 1810,
									"end": 2473,
									"name": "EQ",
									"source": 14
								},
								{
									"begin": 1810,
									"end": 2473,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "47"
								},
								{
									"begin": 1810,
									"end": 2473,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 2517,
									"end": 2518,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 2534,
									"end": 2540,
									"name": "DUP5",
									"source": 14
								},
								{
									"begin": 2531,
									"end": 2620,
									"name": "ISZERO",
									"source": 14
								},
								{
									"begin": 2531,
									"end": 2620,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "48"
								},
								{
									"begin": 2531,
									"end": 2620,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2586,
									"end": 2605,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 2586,
									"end": 2605,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 2586,
									"end": 2605,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 2580,
									"end": 2606,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 2531,
									"end": 2620,
									"name": "tag",
									"source": 14,
									"value": "48"
								},
								{
									"begin": 2531,
									"end": 2620,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1335,
									"end": 1336,
									"name": "PUSH",
									"source": 14,
									"value": "3"
								},
								{
									"begin": 1331,
									"end": 1342,
									"name": "DUP7",
									"source": 14
								},
								{
									"begin": 1331,
									"end": 1342,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 1331,
									"end": 1342,
									"name": "SHL",
									"source": 14
								},
								{
									"begin": 1327,
									"end": 1351,
									"name": "SHR",
									"source": 14
								},
								{
									"begin": 1323,
									"end": 1352,
									"name": "NOT",
									"source": 14
								},
								{
									"begin": 1313,
									"end": 1353,
									"name": "AND",
									"source": 14
								},
								{
									"begin": 1359,
									"end": 1360,
									"name": "PUSH",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 1355,
									"end": 1366,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 1355,
									"end": 1366,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 1355,
									"end": 1366,
									"name": "SHL",
									"source": 14
								},
								{
									"begin": 1310,
									"end": 1367,
									"name": "OR",
									"source": 14
								},
								{
									"begin": 2633,
									"end": 2714,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 2633,
									"end": 2714,
									"name": "SSTORE",
									"source": 14
								},
								{
									"begin": 1780,
									"end": 2724,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "39"
								},
								{
									"begin": 1780,
									"end": 2724,
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 1810,
									"end": 2473,
									"name": "tag",
									"source": 14,
									"value": "47"
								},
								{
									"begin": 1810,
									"end": 2473,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 604,
									"end": 605,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 597,
									"end": 611,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 597,
									"end": 611,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 597,
									"end": 611,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 641,
									"end": 645,
									"name": "PUSH",
									"source": 14,
									"value": "20"
								},
								{
									"begin": 628,
									"end": 646,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 628,
									"end": 646,
									"name": "KECCAK256",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1846,
									"end": 1866,
									"name": "DUP7",
									"source": 14
								},
								{
									"begin": 1846,
									"end": 1866,
									"name": "AND",
									"source": 14
								},
								{
									"begin": 1846,
									"end": 1866,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 1964,
									"end": 2200,
									"name": "tag",
									"source": 14,
									"value": "51"
								},
								{
									"begin": 1964,
									"end": 2200,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1978,
									"end": 1985,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 1975,
									"end": 1976,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 1972,
									"end": 1986,
									"name": "LT",
									"source": 14
								},
								{
									"begin": 1964,
									"end": 2200,
									"name": "ISZERO",
									"source": 14
								},
								{
									"begin": 1964,
									"end": 2200,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "53"
								},
								{
									"begin": 1964,
									"end": 2200,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 2067,
									"end": 2086,
									"name": "DUP9",
									"source": 14
								},
								{
									"begin": 2067,
									"end": 2086,
									"name": "DUP7",
									"source": 14
								},
								{
									"begin": 2067,
									"end": 2086,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 2061,
									"end": 2087,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 2046,
									"end": 2088,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 2046,
									"end": 2088,
									"name": "SSTORE",
									"source": 14
								},
								{
									"begin": 2159,
									"end": 2186,
									"name": "SWAP5",
									"source": 14
								},
								{
									"begin": 2159,
									"end": 2186,
									"name": "DUP5",
									"source": 14
								},
								{
									"begin": 2159,
									"end": 2186,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 2159,
									"end": 2186,
									"name": "SWAP5",
									"source": 14
								},
								{
									"begin": 2127,
									"end": 2128,
									"name": "PUSH",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 2115,
									"end": 2129,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 2115,
									"end": 2129,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 2115,
									"end": 2129,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 2115,
									"end": 2129,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 1994,
									"end": 2013,
									"name": "DUP5",
									"source": 14
								},
								{
									"begin": 1994,
									"end": 2013,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 1964,
									"end": 2200,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "51"
								},
								{
									"begin": 1964,
									"end": 2200,
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 1964,
									"end": 2200,
									"name": "tag",
									"source": 14,
									"value": "53"
								},
								{
									"begin": 1964,
									"end": 2200,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1968,
									"end": 1971,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 2228,
									"end": 2234,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 2219,
									"end": 2226,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 2216,
									"end": 2235,
									"name": "LT",
									"source": 14
								},
								{
									"begin": 2213,
									"end": 2414,
									"name": "ISZERO",
									"source": 14
								},
								{
									"begin": 2213,
									"end": 2414,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "54"
								},
								{
									"begin": 2213,
									"end": 2414,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 2289,
									"end": 2308,
									"name": "DUP8",
									"source": 14
								},
								{
									"begin": 2289,
									"end": 2308,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 2289,
									"end": 2308,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 2283,
									"end": 2309,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2372,
									"end": 2373,
									"name": "PUSH",
									"source": 14,
									"value": "3"
								},
								{
									"begin": 2368,
									"end": 2382,
									"name": "DUP9",
									"source": 14
								},
								{
									"begin": 2368,
									"end": 2382,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 2368,
									"end": 2382,
									"name": "SHL",
									"source": 14
								},
								{
									"begin": 2384,
									"end": 2387,
									"name": "PUSH",
									"source": 14,
									"value": "F8"
								},
								{
									"begin": 2364,
									"end": 2388,
									"name": "AND",
									"source": 14
								},
								{
									"begin": 2360,
									"end": 2397,
									"name": "SHR",
									"source": 14
								},
								{
									"begin": 2356,
									"end": 2398,
									"name": "NOT",
									"source": 14
								},
								{
									"begin": 2341,
									"end": 2399,
									"name": "AND",
									"source": 14
								},
								{
									"begin": 2326,
									"end": 2400,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 2326,
									"end": 2400,
									"name": "SSTORE",
									"source": 14
								},
								{
									"begin": 2213,
									"end": 2414,
									"name": "tag",
									"source": 14,
									"value": "54"
								},
								{
									"begin": 2213,
									"end": 2414,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2460,
									"end": 2461,
									"name": "PUSH",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 2444,
									"end": 2458,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 2444,
									"end": 2458,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 2444,
									"end": 2458,
									"name": "SHL",
									"source": 14
								},
								{
									"begin": 2440,
									"end": 2462,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 2427,
									"end": 2463,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 2427,
									"end": 2463,
									"name": "SSTORE",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1378,
									"end": 2730,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 2735,
									"end": 2957,
									"name": "tag",
									"source": 14,
									"value": "18"
								},
								{
									"begin": 2735,
									"end": 2957,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 2800,
									"end": 2809,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 2800,
									"end": 2809,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 2800,
									"end": 2809,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 2821,
									"end": 2831,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 2821,
									"end": 2831,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 2821,
									"end": 2831,
									"name": "GT",
									"source": 14
								},
								{
									"begin": 2818,
									"end": 2951,
									"name": "ISZERO",
									"source": 14
								},
								{
									"begin": 2818,
									"end": 2951,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "56"
								},
								{
									"begin": 2818,
									"end": 2951,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 2873,
									"end": 2883,
									"name": "PUSH",
									"source": 14,
									"value": "4E487B71"
								},
								{
									"begin": 2868,
									"end": 2871,
									"name": "PUSH",
									"source": 14,
									"value": "E0"
								},
								{
									"begin": 2864,
									"end": 2884,
									"name": "SHL",
									"source": 14
								},
								{
									"begin": 2861,
									"end": 2862,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 2854,
									"end": 2885,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 2908,
									"end": 2912,
									"name": "PUSH",
									"source": 14,
									"value": "11"
								},
								{
									"begin": 2905,
									"end": 2906,
									"name": "PUSH",
									"source": 14,
									"value": "4"
								},
								{
									"begin": 2898,
									"end": 2913,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 2936,
									"end": 2940,
									"name": "PUSH",
									"source": 14,
									"value": "24"
								},
								{
									"begin": 2933,
									"end": 2934,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 2926,
									"end": 2941,
									"name": "REVERT",
									"source": 14
								},
								{
									"begin": 2818,
									"end": 2951,
									"name": "tag",
									"source": 14,
									"value": "56"
								},
								{
									"begin": 2818,
									"end": 2951,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 2735,
									"end": 2957,
									"name": "SWAP3",
									"source": 14
								},
								{
									"begin": 2735,
									"end": 2957,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 2735,
									"end": 2957,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 2735,
									"end": 2957,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 2735,
									"end": 2957,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 2735,
									"end": 2957,
									"name": "tag",
									"source": 14,
									"value": "28"
								},
								{
									"begin": 2735,
									"end": 2957,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 283,
									"end": 2923,
									"name": "PUSH #[$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 283,
									"end": 2923,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 283,
									"end": 2923,
									"name": "PUSH [$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 283,
									"end": 2923,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 283,
									"end": 2923,
									"name": "CODECOPY",
									"source": 11
								},
								{
									"begin": 283,
									"end": 2923,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 283,
									"end": 2923,
									"name": "RETURN",
									"source": 11
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220828fc8003228577cd24ee510aba51fdc6fa0ba9917fdf4227456a06df9a78d0064736f6c63430008120033",
									".code": [
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "SHR",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "70A08231"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "32"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "C23FCDEF"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "33"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "D64297F9"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "34"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "D64297F9"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "28"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "E5496FC8"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "29"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "E985E9C5"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "30"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "F2FDE38B"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "31"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "tag",
											"source": 11,
											"value": "34"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "C23FCDEF"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "C285E107"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "25"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "C87B56DD"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "26"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "D304C4BC"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "27"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "tag",
											"source": 11,
											"value": "33"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "95D89B41"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "35"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "95D89B41"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "A22CB465"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "21"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "A6A3B5B4"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "22"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "B88D4FDE"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "23"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "tag",
											"source": 11,
											"value": "35"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "70A08231"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "17"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "715018A6"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "18"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "8DA5CB5B"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "19"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "tag",
											"source": 11,
											"value": "32"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "23B872DD"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "36"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "42842E0E"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "37"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "42842E0E"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "13"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "6352211E"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "14"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "6817C76C"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "15"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "6F1D10CE"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "16"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "tag",
											"source": 11,
											"value": "37"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "23B872DD"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "9"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "278ECDE1"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "10"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "31C864E8"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "11"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "3CCFD60B"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "12"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "tag",
											"source": 11,
											"value": "36"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "81812FC"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "38"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "81812FC"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "5"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "95EA7B3"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "6"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "CB61F6C"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "7"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "18160DDD"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "8"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "tag",
											"source": 11,
											"value": "38"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "1FFC9A7"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "4CD5294"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "6FDDE03"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "tag",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 283,
											"end": 2923,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "tag",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "39"
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "tag",
											"source": 12,
											"value": "39"
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "41"
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "42"
										},
										{
											"begin": 4607,
											"end": 4907,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "tag",
											"source": 12,
											"value": "41"
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "43"
										},
										{
											"begin": 4607,
											"end": 4907,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "tag",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 565,
											"end": 579,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 565,
											"end": 579,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 558,
											"end": 580,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 540,
											"end": 581,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 540,
											"end": 581,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 528,
											"end": 530,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 513,
											"end": 531,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "tag",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "RETURN",
											"source": 12
										},
										{
											"begin": 2466,
											"end": 2637,
											"name": "tag",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 2466,
											"end": 2637,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2466,
											"end": 2637,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 2466,
											"end": 2637,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2466,
											"end": 2637,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2466,
											"end": 2637,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "46"
										},
										{
											"begin": 2466,
											"end": 2637,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2466,
											"end": 2637,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2466,
											"end": 2637,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2466,
											"end": 2637,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 2466,
											"end": 2637,
											"name": "tag",
											"source": 11,
											"value": "46"
										},
										{
											"begin": 2466,
											"end": 2637,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2466,
											"end": 2637,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "47"
										},
										{
											"begin": 2466,
											"end": 2637,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "48"
										},
										{
											"begin": 2466,
											"end": 2637,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 2466,
											"end": 2637,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 2466,
											"end": 2637,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "49"
										},
										{
											"begin": 2466,
											"end": 2637,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2466,
											"end": 2637,
											"name": "tag",
											"source": 11,
											"value": "48"
										},
										{
											"begin": 2466,
											"end": 2637,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2466,
											"end": 2637,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "50"
										},
										{
											"begin": 2466,
											"end": 2637,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2466,
											"end": 2637,
											"name": "tag",
											"source": 11,
											"value": "47"
										},
										{
											"begin": 2466,
											"end": 2637,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2466,
											"end": 2637,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2466,
											"end": 2637,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 923,
											"end": 948,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 923,
											"end": 948,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 923,
											"end": 948,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 911,
											"end": 913,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 896,
											"end": 914,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2466,
											"end": 2637,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 777,
											"end": 954,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7635,
											"end": 7733,
											"name": "tag",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7635,
											"end": 7733,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7635,
											"end": 7733,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 7635,
											"end": 7733,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7635,
											"end": 7733,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7635,
											"end": 7733,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "53"
										},
										{
											"begin": 7635,
											"end": 7733,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7635,
											"end": 7733,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7635,
											"end": 7733,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7635,
											"end": 7733,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 7635,
											"end": 7733,
											"name": "tag",
											"source": 12,
											"value": "53"
										},
										{
											"begin": 7635,
											"end": 7733,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7635,
											"end": 7733,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7635,
											"end": 7733,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "54"
										},
										{
											"begin": 7635,
											"end": 7733,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "55"
										},
										{
											"begin": 7635,
											"end": 7733,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7635,
											"end": 7733,
											"name": "tag",
											"source": 12,
											"value": "54"
										},
										{
											"begin": 7635,
											"end": 7733,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7635,
											"end": 7733,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7635,
											"end": 7733,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 7635,
											"end": 7733,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 7635,
											"end": 7733,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7635,
											"end": 7733,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7635,
											"end": 7733,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "57"
										},
										{
											"begin": 7635,
											"end": 7733,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "tag",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "58"
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "tag",
											"source": 12,
											"value": "58"
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "59"
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "49"
										},
										{
											"begin": 9091,
											"end": 9291,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "tag",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "61"
										},
										{
											"begin": 9091,
											"end": 9291,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "tag",
											"source": 12,
											"value": "59"
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1879,
											"end": 1911,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1879,
											"end": 1911,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 1879,
											"end": 1911,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1861,
											"end": 1912,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1861,
											"end": 1912,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1849,
											"end": 1851,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1834,
											"end": 1852,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 1715,
											"end": 1918,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "tag",
											"source": 12,
											"value": "6"
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "tag",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "65"
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "66"
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "67"
										},
										{
											"begin": 8668,
											"end": 9030,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "tag",
											"source": 12,
											"value": "66"
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "68"
										},
										{
											"begin": 8668,
											"end": 9030,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "tag",
											"source": 12,
											"value": "65"
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "STOP",
											"source": 12
										},
										{
											"begin": 570,
											"end": 598,
											"name": "tag",
											"source": 11,
											"value": "7"
										},
										{
											"begin": 570,
											"end": 598,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 570,
											"end": 598,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 570,
											"end": 598,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 570,
											"end": 598,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 570,
											"end": 598,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "69"
										},
										{
											"begin": 570,
											"end": 598,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 570,
											"end": 598,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 570,
											"end": 598,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 570,
											"end": 598,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 570,
											"end": 598,
											"name": "tag",
											"source": 11,
											"value": "69"
										},
										{
											"begin": 570,
											"end": 598,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 570,
											"end": 598,
											"name": "PUSH",
											"source": 11,
											"value": "A"
										},
										{
											"begin": 570,
											"end": 598,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 570,
											"end": 598,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "59"
										},
										{
											"begin": 570,
											"end": 598,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 570,
											"end": 598,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 570,
											"end": 598,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 570,
											"end": 598,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3878,
											"end": 4175,
											"name": "tag",
											"source": 12,
											"value": "8"
										},
										{
											"begin": 3878,
											"end": 4175,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3878,
											"end": 4175,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 3878,
											"end": 4175,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3878,
											"end": 4175,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3878,
											"end": 4175,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "73"
										},
										{
											"begin": 3878,
											"end": 4175,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3878,
											"end": 4175,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3878,
											"end": 4175,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3878,
											"end": 4175,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 3878,
											"end": 4175,
											"name": "tag",
											"source": 12,
											"value": "73"
										},
										{
											"begin": 3878,
											"end": 4175,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4128,
											"end": 4140,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 4128,
											"end": 4140,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 3922,
											"end": 3929,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4112,
											"end": 4125,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 4112,
											"end": 4140,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 3878,
											"end": 4175,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "47"
										},
										{
											"begin": 3878,
											"end": 4175,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9930,
											"end": 10094,
											"name": "tag",
											"source": 12,
											"value": "9"
										},
										{
											"begin": 9930,
											"end": 10094,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9930,
											"end": 10094,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 9930,
											"end": 10094,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9930,
											"end": 10094,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 9930,
											"end": 10094,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "77"
										},
										{
											"begin": 9930,
											"end": 10094,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 9930,
											"end": 10094,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9930,
											"end": 10094,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9930,
											"end": 10094,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 9930,
											"end": 10094,
											"name": "tag",
											"source": 12,
											"value": "77"
										},
										{
											"begin": 9930,
											"end": 10094,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9930,
											"end": 10094,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "65"
										},
										{
											"begin": 9930,
											"end": 10094,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "79"
										},
										{
											"begin": 9930,
											"end": 10094,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 9930,
											"end": 10094,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 9930,
											"end": 10094,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 9930,
											"end": 10094,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9930,
											"end": 10094,
											"name": "tag",
											"source": 12,
											"value": "79"
										},
										{
											"begin": 9930,
											"end": 10094,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9930,
											"end": 10094,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "81"
										},
										{
											"begin": 9930,
											"end": 10094,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1724,
											"end": 2262,
											"name": "tag",
											"source": 11,
											"value": "10"
										},
										{
											"begin": 1724,
											"end": 2262,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1724,
											"end": 2262,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 1724,
											"end": 2262,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1724,
											"end": 2262,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1724,
											"end": 2262,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "82"
										},
										{
											"begin": 1724,
											"end": 2262,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1724,
											"end": 2262,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1724,
											"end": 2262,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1724,
											"end": 2262,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1724,
											"end": 2262,
											"name": "tag",
											"source": 11,
											"value": "82"
										},
										{
											"begin": 1724,
											"end": 2262,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1724,
											"end": 2262,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "65"
										},
										{
											"begin": 1724,
											"end": 2262,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "84"
										},
										{
											"begin": 1724,
											"end": 2262,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 1724,
											"end": 2262,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1724,
											"end": 2262,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "49"
										},
										{
											"begin": 1724,
											"end": 2262,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1724,
											"end": 2262,
											"name": "tag",
											"source": 11,
											"value": "84"
										},
										{
											"begin": 1724,
											"end": 2262,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1724,
											"end": 2262,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "85"
										},
										{
											"begin": 1724,
											"end": 2262,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1176,
											"end": 1718,
											"name": "tag",
											"source": 11,
											"value": "11"
										},
										{
											"begin": 1176,
											"end": 1718,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1176,
											"end": 1718,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "65"
										},
										{
											"begin": 1176,
											"end": 1718,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "87"
										},
										{
											"begin": 1176,
											"end": 1718,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 1176,
											"end": 1718,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1176,
											"end": 1718,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "49"
										},
										{
											"begin": 1176,
											"end": 1718,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1176,
											"end": 1718,
											"name": "tag",
											"source": 11,
											"value": "87"
										},
										{
											"begin": 1176,
											"end": 1718,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1176,
											"end": 1718,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "88"
										},
										{
											"begin": 1176,
											"end": 1718,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2643,
											"end": 2921,
											"name": "tag",
											"source": 11,
											"value": "12"
										},
										{
											"begin": 2643,
											"end": 2921,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2643,
											"end": 2921,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 2643,
											"end": 2921,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2643,
											"end": 2921,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2643,
											"end": 2921,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "89"
										},
										{
											"begin": 2643,
											"end": 2921,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2643,
											"end": 2921,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2643,
											"end": 2921,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2643,
											"end": 2921,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 2643,
											"end": 2921,
											"name": "tag",
											"source": 11,
											"value": "89"
										},
										{
											"begin": 2643,
											"end": 2921,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2643,
											"end": 2921,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2643,
											"end": 2921,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "65"
										},
										{
											"begin": 2643,
											"end": 2921,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "91"
										},
										{
											"begin": 2643,
											"end": 2921,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 10160,
											"end": 10339,
											"name": "tag",
											"source": 12,
											"value": "13"
										},
										{
											"begin": 10160,
											"end": 10339,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10160,
											"end": 10339,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 10160,
											"end": 10339,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10160,
											"end": 10339,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 10160,
											"end": 10339,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "92"
										},
										{
											"begin": 10160,
											"end": 10339,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 10160,
											"end": 10339,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 10160,
											"end": 10339,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10160,
											"end": 10339,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 10160,
											"end": 10339,
											"name": "tag",
											"source": 12,
											"value": "92"
										},
										{
											"begin": 10160,
											"end": 10339,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10160,
											"end": 10339,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "65"
										},
										{
											"begin": 10160,
											"end": 10339,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "94"
										},
										{
											"begin": 10160,
											"end": 10339,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 10160,
											"end": 10339,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 10160,
											"end": 10339,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 10160,
											"end": 10339,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 10160,
											"end": 10339,
											"name": "tag",
											"source": 12,
											"value": "94"
										},
										{
											"begin": 10160,
											"end": 10339,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10160,
											"end": 10339,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "95"
										},
										{
											"begin": 10160,
											"end": 10339,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7450,
											"end": 7573,
											"name": "tag",
											"source": 12,
											"value": "14"
										},
										{
											"begin": 7450,
											"end": 7573,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7450,
											"end": 7573,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 7450,
											"end": 7573,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7450,
											"end": 7573,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7450,
											"end": 7573,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "96"
										},
										{
											"begin": 7450,
											"end": 7573,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7450,
											"end": 7573,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7450,
											"end": 7573,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7450,
											"end": 7573,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 7450,
											"end": 7573,
											"name": "tag",
											"source": 12,
											"value": "96"
										},
										{
											"begin": 7450,
											"end": 7573,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7450,
											"end": 7573,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "59"
										},
										{
											"begin": 7450,
											"end": 7573,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "98"
										},
										{
											"begin": 7450,
											"end": 7573,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 7450,
											"end": 7573,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7450,
											"end": 7573,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "49"
										},
										{
											"begin": 7450,
											"end": 7573,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7450,
											"end": 7573,
											"name": "tag",
											"source": 12,
											"value": "98"
										},
										{
											"begin": 7450,
											"end": 7573,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7450,
											"end": 7573,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "99"
										},
										{
											"begin": 7450,
											"end": 7573,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 332,
											"end": 375,
											"name": "tag",
											"source": 11,
											"value": "15"
										},
										{
											"begin": 332,
											"end": 375,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 332,
											"end": 375,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 332,
											"end": 375,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 332,
											"end": 375,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 332,
											"end": 375,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "101"
										},
										{
											"begin": 332,
											"end": 375,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 332,
											"end": 375,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 332,
											"end": 375,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 332,
											"end": 375,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 332,
											"end": 375,
											"name": "tag",
											"source": 11,
											"value": "101"
										},
										{
											"begin": 332,
											"end": 375,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 332,
											"end": 375,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 332,
											"end": 375,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "47"
										},
										{
											"begin": 368,
											"end": 375,
											"name": "PUSH",
											"source": 11,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 332,
											"end": 375,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 332,
											"end": 375,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 530,
											"end": 563,
											"name": "tag",
											"source": 11,
											"value": "16"
										},
										{
											"begin": 530,
											"end": 563,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 530,
											"end": 563,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 530,
											"end": 563,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 530,
											"end": 563,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 530,
											"end": 563,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "105"
										},
										{
											"begin": 530,
											"end": 563,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 530,
											"end": 563,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 563,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 530,
											"end": 563,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 530,
											"end": 563,
											"name": "tag",
											"source": 11,
											"value": "105"
										},
										{
											"begin": 530,
											"end": 563,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 530,
											"end": 563,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 530,
											"end": 563,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "47"
										},
										{
											"begin": 530,
											"end": 563,
											"name": "PUSH",
											"source": 11,
											"value": "9"
										},
										{
											"begin": 530,
											"end": 563,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 530,
											"end": 563,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 530,
											"end": 563,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4966,
											"end": 5169,
											"name": "tag",
											"source": 12,
											"value": "17"
										},
										{
											"begin": 4966,
											"end": 5169,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4966,
											"end": 5169,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 4966,
											"end": 5169,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4966,
											"end": 5169,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 4966,
											"end": 5169,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "109"
										},
										{
											"begin": 4966,
											"end": 5169,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 4966,
											"end": 5169,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4966,
											"end": 5169,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4966,
											"end": 5169,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 4966,
											"end": 5169,
											"name": "tag",
											"source": 12,
											"value": "109"
										},
										{
											"begin": 4966,
											"end": 5169,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4966,
											"end": 5169,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "47"
										},
										{
											"begin": 4966,
											"end": 5169,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "111"
										},
										{
											"begin": 4966,
											"end": 5169,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 4966,
											"end": 5169,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 4966,
											"end": 5169,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "112"
										},
										{
											"begin": 4966,
											"end": 5169,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4966,
											"end": 5169,
											"name": "tag",
											"source": 12,
											"value": "111"
										},
										{
											"begin": 4966,
											"end": 5169,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4966,
											"end": 5169,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "113"
										},
										{
											"begin": 4966,
											"end": 5169,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1824,
											"end": 1925,
											"name": "tag",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 1824,
											"end": 1925,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1824,
											"end": 1925,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 1824,
											"end": 1925,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1824,
											"end": 1925,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1824,
											"end": 1925,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 1824,
											"end": 1925,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1824,
											"end": 1925,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1824,
											"end": 1925,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1824,
											"end": 1925,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1824,
											"end": 1925,
											"name": "tag",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 1824,
											"end": 1925,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1824,
											"end": 1925,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1824,
											"end": 1925,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 1824,
											"end": 1925,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 1824,
											"end": 1925,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "tag",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "tag",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "PUSH",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "59"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7797,
											"end": 7899,
											"name": "tag",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 7797,
											"end": 7899,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7797,
											"end": 7899,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 7797,
											"end": 7899,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7797,
											"end": 7899,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7797,
											"end": 7899,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "122"
										},
										{
											"begin": 7797,
											"end": 7899,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7797,
											"end": 7899,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7797,
											"end": 7899,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7797,
											"end": 7899,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 7797,
											"end": 7899,
											"name": "tag",
											"source": 12,
											"value": "122"
										},
										{
											"begin": 7797,
											"end": 7899,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7797,
											"end": 7899,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7797,
											"end": 7899,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "54"
										},
										{
											"begin": 7797,
											"end": 7899,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "124"
										},
										{
											"begin": 7797,
											"end": 7899,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9358,
											"end": 9640,
											"name": "tag",
											"source": 12,
											"value": "21"
										},
										{
											"begin": 9358,
											"end": 9640,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9358,
											"end": 9640,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 9358,
											"end": 9640,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9358,
											"end": 9640,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 9358,
											"end": 9640,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "126"
										},
										{
											"begin": 9358,
											"end": 9640,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 9358,
											"end": 9640,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9358,
											"end": 9640,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9358,
											"end": 9640,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 9358,
											"end": 9640,
											"name": "tag",
											"source": 12,
											"value": "126"
										},
										{
											"begin": 9358,
											"end": 9640,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9358,
											"end": 9640,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "65"
										},
										{
											"begin": 9358,
											"end": 9640,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "128"
										},
										{
											"begin": 9358,
											"end": 9640,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 9358,
											"end": 9640,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 9358,
											"end": 9640,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "129"
										},
										{
											"begin": 9358,
											"end": 9640,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9358,
											"end": 9640,
											"name": "tag",
											"source": 12,
											"value": "128"
										},
										{
											"begin": 9358,
											"end": 9640,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9358,
											"end": 9640,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "130"
										},
										{
											"begin": 9358,
											"end": 9640,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 479,
											"end": 524,
											"name": "tag",
											"source": 11,
											"value": "22"
										},
										{
											"begin": 479,
											"end": 524,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 479,
											"end": 524,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 479,
											"end": 524,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 479,
											"end": 524,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 479,
											"end": 524,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "131"
										},
										{
											"begin": 479,
											"end": 524,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 479,
											"end": 524,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 479,
											"end": 524,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 479,
											"end": 524,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 479,
											"end": 524,
											"name": "tag",
											"source": 11,
											"value": "131"
										},
										{
											"begin": 479,
											"end": 524,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 479,
											"end": 524,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 479,
											"end": 524,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "47"
										},
										{
											"begin": 515,
											"end": 524,
											"name": "PUSH",
											"source": 11,
											"value": "B4"
										},
										{
											"begin": 479,
											"end": 524,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 479,
											"end": 524,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "tag",
											"source": 12,
											"value": "23"
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "135"
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "tag",
											"source": 12,
											"value": "135"
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "65"
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "137"
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "138"
										},
										{
											"begin": 10405,
											"end": 10764,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "tag",
											"source": 12,
											"value": "137"
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "139"
										},
										{
											"begin": 10405,
											"end": 10764,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 815,
											"end": 858,
											"name": "tag",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 815,
											"end": 858,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 815,
											"end": 858,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 815,
											"end": 858,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 815,
											"end": 858,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 815,
											"end": 858,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "140"
										},
										{
											"begin": 815,
											"end": 858,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 815,
											"end": 858,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 815,
											"end": 858,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 815,
											"end": 858,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 815,
											"end": 858,
											"name": "tag",
											"source": 11,
											"value": "140"
										},
										{
											"begin": 815,
											"end": 858,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 815,
											"end": 858,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 815,
											"end": 858,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "142"
										},
										{
											"begin": 815,
											"end": 858,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 815,
											"end": 858,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 815,
											"end": 858,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "49"
										},
										{
											"begin": 815,
											"end": 858,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 815,
											"end": 858,
											"name": "tag",
											"source": 11,
											"value": "142"
										},
										{
											"begin": 815,
											"end": 858,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 815,
											"end": 858,
											"name": "PUSH",
											"source": 11,
											"value": "C"
										},
										{
											"begin": 815,
											"end": 858,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 815,
											"end": 858,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 815,
											"end": 858,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 815,
											"end": 858,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 815,
											"end": 858,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 815,
											"end": 858,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 815,
											"end": 858,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 815,
											"end": 858,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 815,
											"end": 858,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 815,
											"end": 858,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 815,
											"end": 858,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 815,
											"end": 858,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 815,
											"end": 858,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 815,
											"end": 858,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 429,
											"end": 472,
											"name": "tag",
											"source": 11,
											"value": "25"
										},
										{
											"begin": 429,
											"end": 472,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 429,
											"end": 472,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 429,
											"end": 472,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 429,
											"end": 472,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 429,
											"end": 472,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "145"
										},
										{
											"begin": 429,
											"end": 472,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 429,
											"end": 472,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 429,
											"end": 472,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 429,
											"end": 472,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 429,
											"end": 472,
											"name": "tag",
											"source": 11,
											"value": "145"
										},
										{
											"begin": 429,
											"end": 472,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 429,
											"end": 472,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 429,
											"end": 472,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "47"
										},
										{
											"begin": 469,
											"end": 472,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 429,
											"end": 472,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 429,
											"end": 472,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7965,
											"end": 8278,
											"name": "tag",
											"source": 12,
											"value": "26"
										},
										{
											"begin": 7965,
											"end": 8278,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7965,
											"end": 8278,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 7965,
											"end": 8278,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7965,
											"end": 8278,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7965,
											"end": 8278,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "149"
										},
										{
											"begin": 7965,
											"end": 8278,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7965,
											"end": 8278,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7965,
											"end": 8278,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7965,
											"end": 8278,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 7965,
											"end": 8278,
											"name": "tag",
											"source": 12,
											"value": "149"
										},
										{
											"begin": 7965,
											"end": 8278,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7965,
											"end": 8278,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "54"
										},
										{
											"begin": 7965,
											"end": 8278,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "151"
										},
										{
											"begin": 7965,
											"end": 8278,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 7965,
											"end": 8278,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7965,
											"end": 8278,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "49"
										},
										{
											"begin": 7965,
											"end": 8278,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7965,
											"end": 8278,
											"name": "tag",
											"source": 12,
											"value": "151"
										},
										{
											"begin": 7965,
											"end": 8278,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7965,
											"end": 8278,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "152"
										},
										{
											"begin": 7965,
											"end": 8278,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 381,
											"end": 423,
											"name": "tag",
											"source": 11,
											"value": "27"
										},
										{
											"begin": 381,
											"end": 423,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 381,
											"end": 423,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 381,
											"end": 423,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 381,
											"end": 423,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 381,
											"end": 423,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "154"
										},
										{
											"begin": 381,
											"end": 423,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 381,
											"end": 423,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 381,
											"end": 423,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 381,
											"end": 423,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 381,
											"end": 423,
											"name": "tag",
											"source": 11,
											"value": "154"
										},
										{
											"begin": 381,
											"end": 423,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 381,
											"end": 423,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 381,
											"end": 423,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "47"
										},
										{
											"begin": 422,
											"end": 423,
											"name": "PUSH",
											"source": 11,
											"value": "5"
										},
										{
											"begin": 381,
											"end": 423,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 381,
											"end": 423,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 651,
											"end": 705,
											"name": "tag",
											"source": 11,
											"value": "28"
										},
										{
											"begin": 651,
											"end": 705,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 651,
											"end": 705,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 651,
											"end": 705,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 651,
											"end": 705,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 651,
											"end": 705,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "158"
										},
										{
											"begin": 651,
											"end": 705,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 651,
											"end": 705,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 651,
											"end": 705,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 651,
											"end": 705,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 651,
											"end": 705,
											"name": "tag",
											"source": 11,
											"value": "158"
										},
										{
											"begin": 651,
											"end": 705,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 651,
											"end": 705,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "47"
										},
										{
											"begin": 651,
											"end": 705,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "160"
										},
										{
											"begin": 651,
											"end": 705,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 651,
											"end": 705,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 651,
											"end": 705,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "49"
										},
										{
											"begin": 651,
											"end": 705,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 651,
											"end": 705,
											"name": "tag",
											"source": 11,
											"value": "160"
										},
										{
											"begin": 651,
											"end": 705,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 651,
											"end": 705,
											"name": "PUSH",
											"source": 11,
											"value": "B"
										},
										{
											"begin": 651,
											"end": 705,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 651,
											"end": 705,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 651,
											"end": 705,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 651,
											"end": 705,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 651,
											"end": 705,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 651,
											"end": 705,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 651,
											"end": 705,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 651,
											"end": 705,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 651,
											"end": 705,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 651,
											"end": 705,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 651,
											"end": 705,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 651,
											"end": 705,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2268,
											"end": 2460,
											"name": "tag",
											"source": 11,
											"value": "29"
										},
										{
											"begin": 2268,
											"end": 2460,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2268,
											"end": 2460,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 2268,
											"end": 2460,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2268,
											"end": 2460,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2268,
											"end": 2460,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "163"
										},
										{
											"begin": 2268,
											"end": 2460,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2268,
											"end": 2460,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2268,
											"end": 2460,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2268,
											"end": 2460,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 2268,
											"end": 2460,
											"name": "tag",
											"source": 11,
											"value": "163"
										},
										{
											"begin": 2268,
											"end": 2460,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2268,
											"end": 2460,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "47"
										},
										{
											"begin": 2268,
											"end": 2460,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "165"
										},
										{
											"begin": 2268,
											"end": 2460,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 2268,
											"end": 2460,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 2268,
											"end": 2460,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "49"
										},
										{
											"begin": 2268,
											"end": 2460,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2268,
											"end": 2460,
											"name": "tag",
											"source": 11,
											"value": "165"
										},
										{
											"begin": 2268,
											"end": 2460,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2268,
											"end": 2460,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "166"
										},
										{
											"begin": 2268,
											"end": 2460,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 9706,
											"end": 9868,
											"name": "tag",
											"source": 12,
											"value": "30"
										},
										{
											"begin": 9706,
											"end": 9868,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9706,
											"end": 9868,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 9706,
											"end": 9868,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9706,
											"end": 9868,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 9706,
											"end": 9868,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "168"
										},
										{
											"begin": 9706,
											"end": 9868,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 9706,
											"end": 9868,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9706,
											"end": 9868,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9706,
											"end": 9868,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 9706,
											"end": 9868,
											"name": "tag",
											"source": 12,
											"value": "168"
										},
										{
											"begin": 9706,
											"end": 9868,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9706,
											"end": 9868,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9706,
											"end": 9868,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "170"
										},
										{
											"begin": 9706,
											"end": 9868,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 9706,
											"end": 9868,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 9706,
											"end": 9868,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "171"
										},
										{
											"begin": 9706,
											"end": 9868,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9706,
											"end": 9868,
											"name": "tag",
											"source": 12,
											"value": "170"
										},
										{
											"begin": 9706,
											"end": 9868,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9706,
											"end": 9868,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "172"
										},
										{
											"begin": 9706,
											"end": 9868,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2074,
											"end": 2272,
											"name": "tag",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 2074,
											"end": 2272,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2074,
											"end": 2272,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 2074,
											"end": 2272,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2074,
											"end": 2272,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2074,
											"end": 2272,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "174"
										},
										{
											"begin": 2074,
											"end": 2272,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2074,
											"end": 2272,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2074,
											"end": 2272,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2074,
											"end": 2272,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2074,
											"end": 2272,
											"name": "tag",
											"source": 0,
											"value": "174"
										},
										{
											"begin": 2074,
											"end": 2272,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2074,
											"end": 2272,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 2074,
											"end": 2272,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "176"
										},
										{
											"begin": 2074,
											"end": 2272,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2074,
											"end": 2272,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2074,
											"end": 2272,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 2074,
											"end": 2272,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2074,
											"end": 2272,
											"name": "tag",
											"source": 0,
											"value": "176"
										},
										{
											"begin": 2074,
											"end": 2272,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2074,
											"end": 2272,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "177"
										},
										{
											"begin": 2074,
											"end": 2272,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "tag",
											"source": 12,
											"value": "43"
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4709,
											"end": 4713,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4744,
											"end": 4784,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4744,
											"end": 4784,
											"name": "AND",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80AC58CD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4744,
											"end": 4784,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 4744,
											"end": 4784,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4744,
											"end": 4848,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "179"
										},
										{
											"begin": 4744,
											"end": 4848,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4800,
											"end": 4848,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4800,
											"end": 4848,
											"name": "AND",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "5B5E139F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4800,
											"end": 4848,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 4744,
											"end": 4848,
											"name": "tag",
											"source": 12,
											"value": "179"
										},
										{
											"begin": 4744,
											"end": 4848,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4744,
											"end": 4900,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4744,
											"end": 4900,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "181"
										},
										{
											"begin": 4744,
											"end": 4900,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1FFC9A7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 937,
											"end": 977,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 937,
											"end": 977,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 937,
											"end": 977,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 4864,
											"end": 4900,
											"name": "tag",
											"source": 12,
											"value": "181"
										},
										{
											"begin": 4864,
											"end": 4900,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4725,
											"end": 4900,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4607,
											"end": 4907,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2466,
											"end": 2637,
											"name": "tag",
											"source": 11,
											"value": "50"
										},
										{
											"begin": 2466,
											"end": 2637,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2528,
											"end": 2535,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2550,
											"end": 2570,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2550,
											"end": 2570,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2550,
											"end": 2570,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2550,
											"end": 2561,
											"name": "PUSH",
											"source": 11,
											"value": "C"
										},
										{
											"begin": 2550,
											"end": 2570,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2550,
											"end": 2570,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2550,
											"end": 2570,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2550,
											"end": 2570,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2550,
											"end": 2570,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 2550,
											"end": 2570,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 2550,
											"end": 2570,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 2550,
											"end": 2570,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2547,
											"end": 2605,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2547,
											"end": 2605,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "184"
										},
										{
											"begin": 2547,
											"end": 2605,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2593,
											"end": 2594,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2593,
											"end": 2594,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2466,
											"end": 2637,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2466,
											"end": 2637,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2547,
											"end": 2605,
											"name": "tag",
											"source": 11,
											"value": "184"
										},
										{
											"begin": 2547,
											"end": 2605,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 368,
											"end": 375,
											"name": "PUSH",
											"source": 11,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 368,
											"end": 375,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2466,
											"end": 2637,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2466,
											"end": 2637,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7635,
											"end": 7733,
											"name": "tag",
											"source": 12,
											"value": "55"
										},
										{
											"begin": 7635,
											"end": 7733,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7689,
											"end": 7702,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 7721,
											"end": 7726,
											"name": "PUSH",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "186"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "187"
										},
										{
											"begin": 7714,
											"end": 7726,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "tag",
											"source": 12,
											"value": "186"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "188"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "187"
										},
										{
											"begin": 7714,
											"end": 7726,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "tag",
											"source": 12,
											"value": "188"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "189"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "190"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH",
											"source": 12,
											"value": "100"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "189"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "tag",
											"source": 12,
											"value": "190"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "tag",
											"source": 12,
											"value": "191"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "191"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "tag",
											"source": 12,
											"value": "189"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7635,
											"end": 7733,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7635,
											"end": 7733,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "tag",
											"source": 12,
											"value": "61"
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9159,
											"end": 9166,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9183,
											"end": 9199,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "193"
										},
										{
											"begin": 9191,
											"end": 9198,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9183,
											"end": 9190,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "194"
										},
										{
											"begin": 9183,
											"end": 9199,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9183,
											"end": 9199,
											"name": "tag",
											"source": 12,
											"value": "193"
										},
										{
											"begin": 9183,
											"end": 9199,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9178,
											"end": 9242,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "195"
										},
										{
											"begin": 9178,
											"end": 9242,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 9208,
											"end": 9242,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9208,
											"end": 9242,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "33D1C039"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9208,
											"end": 9242,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9208,
											"end": 9242,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9208,
											"end": 9242,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 9208,
											"end": 9242,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9208,
											"end": 9242,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9208,
											"end": 9242,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 9208,
											"end": 9242,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9208,
											"end": 9242,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9208,
											"end": 9242,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 9208,
											"end": 9242,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9208,
											"end": 9242,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 9178,
											"end": 9242,
											"name": "tag",
											"source": 12,
											"value": "195"
										},
										{
											"begin": 9178,
											"end": 9242,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9260,
											"end": 9284,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9260,
											"end": 9284,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9260,
											"end": 9284,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9260,
											"end": 9284,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9260,
											"end": 9275,
											"name": "PUSH",
											"source": 12,
											"value": "6"
										},
										{
											"begin": 9260,
											"end": 9284,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 9260,
											"end": 9284,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9260,
											"end": 9284,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9260,
											"end": 9284,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9260,
											"end": 9284,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 9260,
											"end": 9284,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9260,
											"end": 9284,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 9260,
											"end": 9284,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9091,
											"end": 9291,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "tag",
											"source": 12,
											"value": "68"
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8740,
											"end": 8753,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8756,
											"end": 8780,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "197"
										},
										{
											"begin": 8772,
											"end": 8779,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8756,
											"end": 8771,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "99"
										},
										{
											"begin": 8756,
											"end": 8780,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8756,
											"end": 8780,
											"name": "tag",
											"source": 12,
											"value": "197"
										},
										{
											"begin": 8756,
											"end": 8780,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8740,
											"end": 8780,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8740,
											"end": 8780,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8800,
											"end": 8805,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8794,
											"end": 8805,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 8794,
											"end": 8796,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8794,
											"end": 8805,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 8794,
											"end": 8805,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 8790,
											"end": 8838,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "198"
										},
										{
											"begin": 8790,
											"end": 8838,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8814,
											"end": 8838,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8814,
											"end": 8838,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "250FDEE3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8814,
											"end": 8838,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8814,
											"end": 8838,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8814,
											"end": 8838,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 8814,
											"end": 8838,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8814,
											"end": 8838,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8814,
											"end": 8838,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 8814,
											"end": 8838,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8814,
											"end": 8838,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8814,
											"end": 8838,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 8814,
											"end": 8838,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8814,
											"end": 8838,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 8790,
											"end": 8838,
											"name": "tag",
											"source": 12,
											"value": "198"
										},
										{
											"begin": 8790,
											"end": 8838,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8853,
											"end": 8874,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8853,
											"end": 8874,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 8853,
											"end": 8874,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 8853,
											"end": 8874,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8853,
											"end": 8874,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 8853,
											"end": 8874,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8853,
											"end": 8916,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "201"
										},
										{
											"begin": 8853,
											"end": 8916,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8879,
											"end": 8916,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "202"
										},
										{
											"begin": 8896,
											"end": 8901,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 9706,
											"end": 9868,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "172"
										},
										{
											"begin": 9706,
											"end": 9868,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8879,
											"end": 8916,
											"name": "tag",
											"source": 12,
											"value": "202"
										},
										{
											"begin": 8879,
											"end": 8916,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8878,
											"end": 8916,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 8853,
											"end": 8916,
											"name": "tag",
											"source": 12,
											"value": "201"
										},
										{
											"begin": 8853,
											"end": 8916,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8849,
											"end": 8985,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 8849,
											"end": 8985,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "204"
										},
										{
											"begin": 8849,
											"end": 8985,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8939,
											"end": 8974,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8939,
											"end": 8974,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "67D9DCA1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8939,
											"end": 8974,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8939,
											"end": 8974,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8939,
											"end": 8974,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 8939,
											"end": 8974,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8939,
											"end": 8974,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8939,
											"end": 8974,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 8939,
											"end": 8974,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8939,
											"end": 8974,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8939,
											"end": 8974,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 8939,
											"end": 8974,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8939,
											"end": 8974,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 8849,
											"end": 8985,
											"name": "tag",
											"source": 12,
											"value": "204"
										},
										{
											"begin": 8849,
											"end": 8985,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8995,
											"end": 9023,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "205"
										},
										{
											"begin": 9004,
											"end": 9006,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 9008,
											"end": 9015,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 9017,
											"end": 9022,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 8995,
											"end": 9003,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "206"
										},
										{
											"begin": 8995,
											"end": 9023,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8995,
											"end": 9023,
											"name": "tag",
											"source": 12,
											"value": "205"
										},
										{
											"begin": 8995,
											"end": 9023,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8730,
											"end": 9030,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8668,
											"end": 9030,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9930,
											"end": 10094,
											"name": "tag",
											"source": 12,
											"value": "81"
										},
										{
											"begin": 9930,
											"end": 10094,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10059,
											"end": 10087,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "205"
										},
										{
											"begin": 10069,
											"end": 10073,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10075,
											"end": 10077,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10079,
											"end": 10086,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10059,
											"end": 10068,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "212"
										},
										{
											"begin": 10059,
											"end": 10087,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1724,
											"end": 2262,
											"name": "tag",
											"source": 11,
											"value": "85"
										},
										{
											"begin": 1724,
											"end": 2262,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1802,
											"end": 1828,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "214"
										},
										{
											"begin": 1820,
											"end": 1827,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1802,
											"end": 1819,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "166"
										},
										{
											"begin": 1802,
											"end": 1828,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1802,
											"end": 1828,
											"name": "tag",
											"source": 11,
											"value": "214"
										},
										{
											"begin": 1802,
											"end": 1828,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1784,
											"end": 1799,
											"name": "TIMESTAMP",
											"source": 11
										},
										{
											"begin": 1784,
											"end": 1828,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 1776,
											"end": 1855,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "215"
										},
										{
											"begin": 1776,
											"end": 1855,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1776,
											"end": 1855,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1776,
											"end": 1855,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1776,
											"end": 1855,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1776,
											"end": 1855,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5363,
											"end": 5365,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1776,
											"end": 1855,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1776,
											"end": 1855,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1776,
											"end": 1855,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 5345,
											"end": 5366,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5402,
											"end": 5404,
											"name": "PUSH",
											"source": 14,
											"value": "16"
										},
										{
											"begin": 5382,
											"end": 5400,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 5382,
											"end": 5400,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5382,
											"end": 5400,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5375,
											"end": 5405,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2932B33AB732102832B934B7B21022BC3834B932B217"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "51"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5421,
											"end": 5439,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 5421,
											"end": 5439,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5421,
											"end": 5439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5414,
											"end": 5466,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5483,
											"end": 5501,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 5483,
											"end": 5501,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1776,
											"end": 1855,
											"name": "tag",
											"source": 11,
											"value": "216"
										},
										{
											"begin": 1776,
											"end": 1855,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1776,
											"end": 1855,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1776,
											"end": 1855,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1776,
											"end": 1855,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1776,
											"end": 1855,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1776,
											"end": 1855,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1776,
											"end": 1855,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1776,
											"end": 1855,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1776,
											"end": 1855,
											"name": "tag",
											"source": 11,
											"value": "215"
										},
										{
											"begin": 1776,
											"end": 1855,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1918,
											"end": 1934,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "218"
										},
										{
											"begin": 1926,
											"end": 1933,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1918,
											"end": 1925,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "99"
										},
										{
											"begin": 1918,
											"end": 1934,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1918,
											"end": 1934,
											"name": "tag",
											"source": 11,
											"value": "218"
										},
										{
											"begin": 1918,
											"end": 1934,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1904,
											"end": 1934,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1904,
											"end": 1914,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1904,
											"end": 1934,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1904,
											"end": 1934,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 1896,
											"end": 1951,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "219"
										},
										{
											"begin": 1896,
											"end": 1951,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1896,
											"end": 1951,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1896,
											"end": 1951,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1896,
											"end": 1951,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1896,
											"end": 1951,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5714,
											"end": 5716,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1896,
											"end": 1951,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1896,
											"end": 1951,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1896,
											"end": 1951,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 5696,
											"end": 5717,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5753,
											"end": 5755,
											"name": "PUSH",
											"source": 14,
											"value": "C"
										},
										{
											"begin": 5733,
											"end": 5751,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 5733,
											"end": 5751,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5733,
											"end": 5751,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5726,
											"end": 5756,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "139BDD081E5BDD5C88139195"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5772,
											"end": 5790,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 5772,
											"end": 5790,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5772,
											"end": 5790,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5765,
											"end": 5807,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5824,
											"end": 5842,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 5824,
											"end": 5842,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1896,
											"end": 1951,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "216"
										},
										{
											"begin": 5512,
											"end": 5848,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 1896,
											"end": 1951,
											"name": "tag",
											"source": 11,
											"value": "219"
										},
										{
											"begin": 1896,
											"end": 1951,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1961,
											"end": 1981,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1984,
											"end": 2008,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "222"
										},
										{
											"begin": 2000,
											"end": 2007,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1984,
											"end": 1999,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "50"
										},
										{
											"begin": 1984,
											"end": 2008,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1984,
											"end": 2008,
											"name": "tag",
											"source": 11,
											"value": "222"
										},
										{
											"begin": 1984,
											"end": 2008,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2078,
											"end": 2091,
											"name": "PUSH",
											"source": 11,
											"value": "A"
										},
										{
											"begin": 2078,
											"end": 2091,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 1961,
											"end": 2008,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1961,
											"end": 2008,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2056,
											"end": 2101,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "223"
										},
										{
											"begin": 2056,
											"end": 2101,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2066,
											"end": 2076,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 2066,
											"end": 2076,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2078,
											"end": 2091,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2093,
											"end": 2100,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 2056,
											"end": 2065,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "212"
										},
										{
											"begin": 2056,
											"end": 2101,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2056,
											"end": 2101,
											"name": "tag",
											"source": 11,
											"value": "223"
										},
										{
											"begin": 2056,
											"end": 2101,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2137,
											"end": 2157,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2137,
											"end": 2157,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2137,
											"end": 2157,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2137,
											"end": 2157,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2137,
											"end": 2148,
											"name": "PUSH",
											"source": 11,
											"value": "C"
										},
										{
											"begin": 2137,
											"end": 2157,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2137,
											"end": 2157,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2137,
											"end": 2157,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2137,
											"end": 2157,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2137,
											"end": 2157,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 2137,
											"end": 2164,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2137,
											"end": 2164,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2137,
											"end": 2164,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2160,
											"end": 2164,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 2137,
											"end": 2164,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 2137,
											"end": 2164,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2137,
											"end": 2164,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 2203,
											"end": 2255,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "224"
										},
										{
											"begin": 2229,
											"end": 2239,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 2242,
											"end": 2254,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2203,
											"end": 2220,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "225"
										},
										{
											"begin": 2203,
											"end": 2255,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2203,
											"end": 2255,
											"name": "tag",
											"source": 11,
											"value": "224"
										},
										{
											"begin": 2203,
											"end": 2255,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1766,
											"end": 2262,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1724,
											"end": 2262,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1724,
											"end": 2262,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1176,
											"end": 1718,
											"name": "tag",
											"source": 11,
											"value": "88"
										},
										{
											"begin": 1176,
											"end": 1718,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1258,
											"end": 1278,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "227"
										},
										{
											"begin": 1270,
											"end": 1278,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 368,
											"end": 375,
											"name": "PUSH",
											"source": 11,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 1258,
											"end": 1278,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "228"
										},
										{
											"begin": 1258,
											"end": 1278,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1258,
											"end": 1278,
											"name": "tag",
											"source": 11,
											"value": "227"
										},
										{
											"begin": 1258,
											"end": 1278,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1245,
											"end": 1254,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 1245,
											"end": 1278,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 1245,
											"end": 1278,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1237,
											"end": 1300,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "229"
										},
										{
											"begin": 1237,
											"end": 1300,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1237,
											"end": 1300,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1237,
											"end": 1300,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1237,
											"end": 1300,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1237,
											"end": 1300,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6360,
											"end": 6362,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1237,
											"end": 1300,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1237,
											"end": 1300,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1237,
											"end": 1300,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6342,
											"end": 6363,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6399,
											"end": 6401,
											"name": "PUSH",
											"source": 14,
											"value": "11"
										},
										{
											"begin": 6379,
											"end": 6397,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 6379,
											"end": 6397,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6379,
											"end": 6397,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6372,
											"end": 6402,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2737BA1032B737BAB3B410333AB7323997"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "79"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6418,
											"end": 6436,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 6418,
											"end": 6436,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6418,
											"end": 6436,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6411,
											"end": 6458,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6475,
											"end": 6493,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 6475,
											"end": 6493,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1237,
											"end": 1300,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "216"
										},
										{
											"begin": 6158,
											"end": 6499,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 1237,
											"end": 1300,
											"name": "tag",
											"source": 11,
											"value": "229"
										},
										{
											"begin": 1237,
											"end": 1300,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1332,
											"end": 1342,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 5307,
											"end": 5314,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5341,
											"end": 5360,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5341,
											"end": 5360,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5341,
											"end": 5360,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 422,
											"end": 423,
											"name": "PUSH",
											"source": 11,
											"value": "5"
										},
										{
											"begin": 5341,
											"end": 5360,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 5341,
											"end": 5360,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5341,
											"end": 5360,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5341,
											"end": 5360,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5341,
											"end": 5360,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 5341,
											"end": 5360,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5341,
											"end": 5360,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5341,
											"end": 5360,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 5341,
											"end": 5373,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 1347,
											"end": 1355,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1347,
											"end": 1355,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5341,
											"end": 5373,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5341,
											"end": 5373,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 5341,
											"end": 5373,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5341,
											"end": 5373,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1318,
											"end": 1355,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "234"
										},
										{
											"begin": 1318,
											"end": 1355,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1318,
											"end": 1355,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1318,
											"end": 1355,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "235"
										},
										{
											"begin": 1318,
											"end": 1355,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1318,
											"end": 1355,
											"name": "tag",
											"source": 11,
											"value": "234"
										},
										{
											"begin": 1318,
											"end": 1355,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1318,
											"end": 1373,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 1318,
											"end": 1373,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1310,
											"end": 1388,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "236"
										},
										{
											"begin": 1310,
											"end": 1388,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1310,
											"end": 1388,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1310,
											"end": 1388,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1310,
											"end": 1388,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1310,
											"end": 1388,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6836,
											"end": 6838,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1310,
											"end": 1388,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1310,
											"end": 1388,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1310,
											"end": 1388,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6818,
											"end": 6839,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6875,
											"end": 6877,
											"name": "PUSH",
											"source": 14,
											"value": "A"
										},
										{
											"begin": 6855,
											"end": 6873,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 6855,
											"end": 6873,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6855,
											"end": 6873,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6848,
											"end": 6878,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "135A5B9D08131A5B5A5D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6894,
											"end": 6912,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 6894,
											"end": 6912,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6912,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6887,
											"end": 6927,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6944,
											"end": 6962,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 6944,
											"end": 6962,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1310,
											"end": 1388,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "216"
										},
										{
											"begin": 6634,
											"end": 6968,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 1310,
											"end": 1388,
											"name": "tag",
											"source": 11,
											"value": "236"
										},
										{
											"begin": 1310,
											"end": 1388,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 469,
											"end": 472,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 1406,
											"end": 1420,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "239"
										},
										{
											"begin": 4310,
											"end": 4317,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4492,
											"end": 4505,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 4492,
											"end": 4505,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4263,
											"end": 4540,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1406,
											"end": 1420,
											"name": "tag",
											"source": 11,
											"value": "239"
										},
										{
											"begin": 1406,
											"end": 1420,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1406,
											"end": 1437,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 1406,
											"end": 1437,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1398,
											"end": 1466,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "241"
										},
										{
											"begin": 1398,
											"end": 1466,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1398,
											"end": 1466,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1398,
											"end": 1466,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1398,
											"end": 1466,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1398,
											"end": 1466,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7175,
											"end": 7177,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1398,
											"end": 1466,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1398,
											"end": 1466,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1398,
											"end": 1466,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7157,
											"end": 7178,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7214,
											"end": 7216,
											"name": "PUSH",
											"source": 14,
											"value": "18"
										},
										{
											"begin": 7194,
											"end": 7212,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 7194,
											"end": 7212,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7194,
											"end": 7212,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7187,
											"end": 7217,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7253,
											"end": 7279,
											"name": "PUSH",
											"source": 14,
											"value": "537570706C79204578636565642E20536F6C64206F75742E0000000000000000"
										},
										{
											"begin": 7233,
											"end": 7251,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 7233,
											"end": 7251,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7233,
											"end": 7251,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7226,
											"end": 7280,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7297,
											"end": 7315,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 7297,
											"end": 7315,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1398,
											"end": 1466,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "216"
										},
										{
											"begin": 6973,
											"end": 7321,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 1398,
											"end": 1466,
											"name": "tag",
											"source": 11,
											"value": "241"
										},
										{
											"begin": 1398,
											"end": 1466,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1477,
											"end": 1508,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "244"
										},
										{
											"begin": 1487,
											"end": 1497,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 1499,
											"end": 1507,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1477,
											"end": 1486,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "245"
										},
										{
											"begin": 1477,
											"end": 1508,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1477,
											"end": 1508,
											"name": "tag",
											"source": 11,
											"value": "244"
										},
										{
											"begin": 1477,
											"end": 1508,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1539,
											"end": 1569,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "246"
										},
										{
											"begin": 515,
											"end": 524,
											"name": "PUSH",
											"source": 11,
											"value": "B4"
										},
										{
											"begin": 1539,
											"end": 1554,
											"name": "TIMESTAMP",
											"source": 11
										},
										{
											"begin": 1539,
											"end": 1569,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "235"
										},
										{
											"begin": 1539,
											"end": 1569,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1539,
											"end": 1569,
											"name": "tag",
											"source": 11,
											"value": "246"
										},
										{
											"begin": 1539,
											"end": 1569,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1518,
											"end": 1536,
											"name": "PUSH",
											"source": 11,
											"value": "9"
										},
										{
											"begin": 1518,
											"end": 1569,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 1583,
											"end": 1592,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1593,
											"end": 1606,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1593,
											"end": 1606,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 1593,
											"end": 1617,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "250"
										},
										{
											"begin": 1593,
											"end": 1617,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1609,
											"end": 1617,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 1609,
											"end": 1617,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1593,
											"end": 1617,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "251"
										},
										{
											"begin": 1593,
											"end": 1617,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1593,
											"end": 1617,
											"name": "tag",
											"source": 11,
											"value": "250"
										},
										{
											"begin": 1593,
											"end": 1617,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1583,
											"end": 1617,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1583,
											"end": 1617,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1579,
											"end": 1711,
											"name": "tag",
											"source": 11,
											"value": "247"
										},
										{
											"begin": 1579,
											"end": 1711,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1623,
											"end": 1636,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1623,
											"end": 1636,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 1619,
											"end": 1620,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1619,
											"end": 1636,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 1579,
											"end": 1711,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1579,
											"end": 1711,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "224"
										},
										{
											"begin": 1579,
											"end": 1711,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1682,
											"end": 1700,
											"name": "PUSH",
											"source": 11,
											"value": "9"
										},
										{
											"begin": 1682,
											"end": 1700,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 1657,
											"end": 1679,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1657,
											"end": 1679,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1657,
											"end": 1679,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1657,
											"end": 1679,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1657,
											"end": 1676,
											"name": "PUSH",
											"source": 11,
											"value": "B"
										},
										{
											"begin": 1657,
											"end": 1679,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1657,
											"end": 1679,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1657,
											"end": 1679,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1657,
											"end": 1679,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1657,
											"end": 1679,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 1677,
											"end": 1678,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1638,
											"end": 1641,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "252"
										},
										{
											"begin": 1677,
											"end": 1678,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1638,
											"end": 1641,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "253"
										},
										{
											"begin": 1638,
											"end": 1641,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1638,
											"end": 1641,
											"name": "tag",
											"source": 11,
											"value": "252"
										},
										{
											"begin": 1638,
											"end": 1641,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1638,
											"end": 1641,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1638,
											"end": 1641,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1638,
											"end": 1641,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1579,
											"end": 1711,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "247"
										},
										{
											"begin": 1579,
											"end": 1711,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2643,
											"end": 2921,
											"name": "tag",
											"source": 11,
											"value": "91"
										},
										{
											"begin": 2643,
											"end": 2921,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "255"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "256"
										},
										{
											"begin": 1094,
											"end": 1107,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "255"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2718,
											"end": 2736,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "9"
										},
										{
											"begin": 2718,
											"end": 2736,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 2700,
											"end": 2715,
											"modifierDepth": 1,
											"name": "TIMESTAMP",
											"source": 11
										},
										{
											"begin": 2700,
											"end": 2736,
											"modifierDepth": 1,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 2692,
											"end": 2772,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "258"
										},
										{
											"begin": 2692,
											"end": 2772,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2692,
											"end": 2772,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2692,
											"end": 2772,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2692,
											"end": 2772,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2692,
											"end": 2772,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7801,
											"end": 7803,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 2692,
											"end": 2772,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 2692,
											"end": 2772,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2692,
											"end": 2772,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7783,
											"end": 7804,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7840,
											"end": 7842,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 7820,
											"end": 7838,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 7820,
											"end": 7838,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7820,
											"end": 7838,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7813,
											"end": 7843,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7879,
											"end": 7912,
											"name": "PUSH",
											"source": 14,
											"value": "49742773206E6F7420706173742074686520726566756E6420706572696F6400"
										},
										{
											"begin": 7859,
											"end": 7877,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 7859,
											"end": 7877,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7859,
											"end": 7877,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7852,
											"end": 7913,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7930,
											"end": 7948,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 7930,
											"end": 7948,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2692,
											"end": 2772,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "216"
										},
										{
											"begin": 7599,
											"end": 7954,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 2692,
											"end": 2772,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "258"
										},
										{
											"begin": 2692,
											"end": 2772,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2800,
											"end": 2821,
											"modifierDepth": 1,
											"name": "SELFBALANCE",
											"source": 11
										},
										{
											"begin": 2867,
											"end": 2914,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "261"
										},
										{
											"begin": 2893,
											"end": 2903,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 2800,
											"end": 2821,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2867,
											"end": 2884,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "225"
										},
										{
											"begin": 2867,
											"end": 2914,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2867,
											"end": 2914,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "261"
										},
										{
											"begin": 2867,
											"end": 2914,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2682,
											"end": 2921,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2643,
											"end": 2921,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 10160,
											"end": 10339,
											"name": "tag",
											"source": 12,
											"value": "95"
										},
										{
											"begin": 10160,
											"end": 10339,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10293,
											"end": 10332,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "205"
										},
										{
											"begin": 10310,
											"end": 10314,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10316,
											"end": 10318,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10320,
											"end": 10327,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10293,
											"end": 10332,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 10293,
											"end": 10332,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 10293,
											"end": 10332,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10293,
											"end": 10332,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 10293,
											"end": 10332,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 10293,
											"end": 10332,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 10293,
											"end": 10332,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10293,
											"end": 10332,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10293,
											"end": 10332,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 10293,
											"end": 10332,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10293,
											"end": 10332,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10293,
											"end": 10332,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10293,
											"end": 10309,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "139"
										},
										{
											"begin": 10293,
											"end": 10332,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7450,
											"end": 7573,
											"name": "tag",
											"source": 12,
											"value": "99"
										},
										{
											"begin": 7450,
											"end": 7573,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7514,
											"end": 7521,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7540,
											"end": 7561,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "265"
										},
										{
											"begin": 7553,
											"end": 7560,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7540,
											"end": 7552,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "266"
										},
										{
											"begin": 7540,
											"end": 7561,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7540,
											"end": 7561,
											"name": "tag",
											"source": 12,
											"value": "265"
										},
										{
											"begin": 7540,
											"end": 7561,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7540,
											"end": 7566,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 7540,
											"end": 7566,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 7450,
											"end": 7573,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7450,
											"end": 7573,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4966,
											"end": 5169,
											"name": "tag",
											"source": 12,
											"value": "113"
										},
										{
											"begin": 4966,
											"end": 5169,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5030,
											"end": 5037,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5053,
											"end": 5072,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5053,
											"end": 5072,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 5049,
											"end": 5109,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "268"
										},
										{
											"begin": 5049,
											"end": 5109,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 5081,
											"end": 5109,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 5081,
											"end": 5109,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23D3AD81"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5081,
											"end": 5109,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5081,
											"end": 5109,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5081,
											"end": 5109,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 5081,
											"end": 5109,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5081,
											"end": 5109,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 5081,
											"end": 5109,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 5081,
											"end": 5109,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 5081,
											"end": 5109,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5081,
											"end": 5109,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 5081,
											"end": 5109,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5081,
											"end": 5109,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 5049,
											"end": 5109,
											"name": "tag",
											"source": 12,
											"value": "268"
										},
										{
											"begin": 5049,
											"end": 5109,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5134,
											"end": 5153,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 5134,
											"end": 5153,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5134,
											"end": 5153,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5134,
											"end": 5153,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5134,
											"end": 5153,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5134,
											"end": 5146,
											"name": "PUSH",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 5134,
											"end": 5153,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 5134,
											"end": 5153,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5134,
											"end": 5153,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 5134,
											"end": 5153,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5134,
											"end": 5153,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 5134,
											"end": 5161,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 5134,
											"end": 5161,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5134,
											"end": 5161,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 5134,
											"end": 5161,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4966,
											"end": 5169,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1824,
											"end": 1925,
											"name": "tag",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 1824,
											"end": 1925,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "270"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "256"
										},
										{
											"begin": 1094,
											"end": 1107,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "270"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1888,
											"end": 1918,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "272"
										},
										{
											"begin": 1915,
											"end": 1916,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1888,
											"end": 1906,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "273"
										},
										{
											"begin": 1888,
											"end": 1918,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1888,
											"end": 1918,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "272"
										},
										{
											"begin": 1888,
											"end": 1918,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1824,
											"end": 1925,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7797,
											"end": 7899,
											"name": "tag",
											"source": 12,
											"value": "124"
										},
										{
											"begin": 7797,
											"end": 7899,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7853,
											"end": 7866,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 7885,
											"end": 7892,
											"name": "PUSH",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 7878,
											"end": 7892,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7878,
											"end": 7892,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 7878,
											"end": 7892,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "186"
										},
										{
											"begin": 7878,
											"end": 7892,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7878,
											"end": 7892,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "187"
										},
										{
											"begin": 7878,
											"end": 7892,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9358,
											"end": 9640,
											"name": "tag",
											"source": 12,
											"value": "130"
										},
										{
											"begin": 9358,
											"end": 9640,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9456,
											"end": 9480,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 9456,
											"end": 9480,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 9456,
											"end": 9480,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 9452,
											"end": 9506,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "283"
										},
										{
											"begin": 9452,
											"end": 9506,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 9489,
											"end": 9506,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9489,
											"end": 9506,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B06307DB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9489,
											"end": 9506,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9489,
											"end": 9506,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9489,
											"end": 9506,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 9489,
											"end": 9506,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9489,
											"end": 9506,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9489,
											"end": 9506,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 9489,
											"end": 9506,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9489,
											"end": 9506,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9489,
											"end": 9506,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 9489,
											"end": 9506,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9489,
											"end": 9506,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 9452,
											"end": 9506,
											"name": "tag",
											"source": 12,
											"value": "283"
										},
										{
											"begin": 9452,
											"end": 9506,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 9517,
											"end": 9549,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9517,
											"end": 9549,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9549,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9549,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9535,
											"name": "PUSH",
											"source": 12,
											"value": "7"
										},
										{
											"begin": 9517,
											"end": 9549,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 9517,
											"end": 9549,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9549,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9549,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9549,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9517,
											"end": 9549,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9549,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9549,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9517,
											"end": 9559,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9559,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9559,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9559,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9559,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9559,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9559,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9559,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9559,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9559,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9559,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9559,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9570,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9570,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 9517,
											"end": 9570,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9570,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9570,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9570,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9570,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9570,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9570,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9570,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9570,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9570,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 9585,
											"end": 9633,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9585,
											"end": 9633,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 540,
											"end": 581,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 540,
											"end": 581,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 540,
											"end": 581,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9517,
											"end": 9559,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9559,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 719,
											"end": 729,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 9585,
											"end": 9633,
											"name": "PUSH",
											"source": 12,
											"value": "17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31"
										},
										{
											"begin": 9585,
											"end": 9633,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 513,
											"end": 531,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9585,
											"end": 9633,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9585,
											"end": 9633,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 9585,
											"end": 9633,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9585,
											"end": 9633,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9585,
											"end": 9633,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 9585,
											"end": 9633,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9585,
											"end": 9633,
											"name": "LOG3",
											"source": 12
										},
										{
											"begin": 9358,
											"end": 9640,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9358,
											"end": 9640,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9358,
											"end": 9640,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "tag",
											"source": 12,
											"value": "139"
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10566,
											"end": 10594,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "288"
										},
										{
											"begin": 10576,
											"end": 10580,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 10582,
											"end": 10584,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 10586,
											"end": 10593,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 10566,
											"end": 10575,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "212"
										},
										{
											"begin": 10566,
											"end": 10594,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 10566,
											"end": 10594,
											"name": "tag",
											"source": 12,
											"value": "288"
										},
										{
											"begin": 10566,
											"end": 10594,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10608,
											"end": 10621,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10608,
											"end": 10621,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1702,
											"end": 1721,
											"name": "EXTCODESIZE",
											"source": 4
										},
										{
											"begin": 1702,
											"end": 1725,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1702,
											"end": 1725,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 10608,
											"end": 10684,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10608,
											"end": 10684,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 10608,
											"end": 10684,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "291"
										},
										{
											"begin": 10608,
											"end": 10684,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 10608,
											"end": 10684,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10628,
											"end": 10684,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "292"
										},
										{
											"begin": 10659,
											"end": 10663,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 10665,
											"end": 10667,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 10669,
											"end": 10676,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 10678,
											"end": 10683,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 10628,
											"end": 10658,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "293"
										},
										{
											"begin": 10628,
											"end": 10684,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 10628,
											"end": 10684,
											"name": "tag",
											"source": 12,
											"value": "292"
										},
										{
											"begin": 10628,
											"end": 10684,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10627,
											"end": 10684,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 10608,
											"end": 10684,
											"name": "tag",
											"source": 12,
											"value": "291"
										},
										{
											"begin": 10608,
											"end": 10684,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10604,
											"end": 10758,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 10604,
											"end": 10758,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "294"
										},
										{
											"begin": 10604,
											"end": 10758,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 10707,
											"end": 10747,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 10707,
											"end": 10747,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "68D2BF6B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10707,
											"end": 10747,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10707,
											"end": 10747,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10707,
											"end": 10747,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 10707,
											"end": 10747,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 10707,
											"end": 10747,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 10707,
											"end": 10747,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 10707,
											"end": 10747,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10707,
											"end": 10747,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 10707,
											"end": 10747,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 10707,
											"end": 10747,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10707,
											"end": 10747,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 10604,
											"end": 10758,
											"name": "tag",
											"source": 12,
											"value": "294"
										},
										{
											"begin": 10604,
											"end": 10758,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10405,
											"end": 10764,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7965,
											"end": 8278,
											"name": "tag",
											"source": 12,
											"value": "152"
										},
										{
											"begin": 7965,
											"end": 8278,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8038,
											"end": 8051,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 8068,
											"end": 8084,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "296"
										},
										{
											"begin": 8076,
											"end": 8083,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8068,
											"end": 8075,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "194"
										},
										{
											"begin": 8068,
											"end": 8084,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8068,
											"end": 8084,
											"name": "tag",
											"source": 12,
											"value": "296"
										},
										{
											"begin": 8068,
											"end": 8084,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8063,
											"end": 8122,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "297"
										},
										{
											"begin": 8063,
											"end": 8122,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8093,
											"end": 8122,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8093,
											"end": 8122,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A14C4B5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E4"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8093,
											"end": 8122,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8093,
											"end": 8122,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8093,
											"end": 8122,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 8093,
											"end": 8122,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8093,
											"end": 8122,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8093,
											"end": 8122,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 8093,
											"end": 8122,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8093,
											"end": 8122,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8093,
											"end": 8122,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 8093,
											"end": 8122,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8093,
											"end": 8122,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 8063,
											"end": 8122,
											"name": "tag",
											"source": 12,
											"value": "297"
										},
										{
											"begin": 8063,
											"end": 8122,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8133,
											"end": 8154,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8157,
											"end": 8167,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "298"
										},
										{
											"begin": 8157,
											"end": 8165,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "299"
										},
										{
											"begin": 8157,
											"end": 8167,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8157,
											"end": 8167,
											"name": "tag",
											"source": 12,
											"value": "298"
										},
										{
											"begin": 8157,
											"end": 8167,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8133,
											"end": 8167,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8133,
											"end": 8167,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8190,
											"end": 8197,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8184,
											"end": 8205,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 8209,
											"end": 8210,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8184,
											"end": 8210,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 8184,
											"end": 8271,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "300"
										},
										{
											"begin": 8184,
											"end": 8271,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8184,
											"end": 8271,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8184,
											"end": 8271,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 8184,
											"end": 8271,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8184,
											"end": 8271,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 8184,
											"end": 8271,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8184,
											"end": 8271,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8184,
											"end": 8271,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8184,
											"end": 8271,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8184,
											"end": 8271,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8184,
											"end": 8271,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8184,
											"end": 8271,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8184,
											"end": 8271,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8184,
											"end": 8271,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "301"
										},
										{
											"begin": 8184,
											"end": 8271,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8184,
											"end": 8271,
											"name": "tag",
											"source": 12,
											"value": "300"
										},
										{
											"begin": 8184,
											"end": 8271,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8237,
											"end": 8244,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8246,
											"end": 8264,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "302"
										},
										{
											"begin": 8246,
											"end": 8253,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 8246,
											"end": 8262,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "303"
										},
										{
											"begin": 8246,
											"end": 8264,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8246,
											"end": 8264,
											"name": "tag",
											"source": 12,
											"value": "302"
										},
										{
											"begin": 8246,
											"end": 8264,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "304"
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "305"
										},
										{
											"begin": 8220,
											"end": 8265,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "tag",
											"source": 12,
											"value": "304"
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8184,
											"end": 8271,
											"name": "tag",
											"source": 12,
											"value": "301"
										},
										{
											"begin": 8184,
											"end": 8271,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8177,
											"end": 8271,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 7965,
											"end": 8278,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7965,
											"end": 8278,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2268,
											"end": 2460,
											"name": "tag",
											"source": 11,
											"value": "166"
										},
										{
											"begin": 2268,
											"end": 2460,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2332,
											"end": 2339,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2354,
											"end": 2374,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2354,
											"end": 2374,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2354,
											"end": 2374,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2354,
											"end": 2365,
											"name": "PUSH",
											"source": 11,
											"value": "C"
										},
										{
											"begin": 2354,
											"end": 2374,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2354,
											"end": 2374,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2354,
											"end": 2374,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2354,
											"end": 2374,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2354,
											"end": 2374,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 2354,
											"end": 2374,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 2354,
											"end": 2374,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 2354,
											"end": 2374,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2351,
											"end": 2409,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2351,
											"end": 2409,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "307"
										},
										{
											"begin": 2351,
											"end": 2409,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2397,
											"end": 2398,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2397,
											"end": 2398,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2268,
											"end": 2460,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2268,
											"end": 2460,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2351,
											"end": 2409,
											"name": "tag",
											"source": 11,
											"value": "307"
										},
										{
											"begin": 2351,
											"end": 2409,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2425,
											"end": 2453,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2425,
											"end": 2453,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2425,
											"end": 2453,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2425,
											"end": 2453,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2425,
											"end": 2444,
											"name": "PUSH",
											"source": 11,
											"value": "B"
										},
										{
											"begin": 2425,
											"end": 2453,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2425,
											"end": 2453,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2425,
											"end": 2453,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2425,
											"end": 2453,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2425,
											"end": 2453,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 2425,
											"end": 2453,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 2425,
											"end": 2453,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2268,
											"end": 2460,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 9706,
											"end": 9868,
											"name": "tag",
											"source": 12,
											"value": "172"
										},
										{
											"begin": 9706,
											"end": 9868,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9826,
											"end": 9851,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9851,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9851,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 9803,
											"end": 9807,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9826,
											"end": 9851,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9851,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9851,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9844,
											"name": "PUSH",
											"source": 12,
											"value": "7"
										},
										{
											"begin": 9826,
											"end": 9851,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 9826,
											"end": 9851,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9851,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9851,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9851,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9826,
											"end": 9851,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9851,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9851,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9861,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9861,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9861,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9861,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9861,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9861,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9861,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9861,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9861,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9861,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9861,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9861,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9861,
											"name": "PUSH",
											"source": 12,
											"value": "FF"
										},
										{
											"begin": 9826,
											"end": 9861,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9861,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9706,
											"end": 9868,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2074,
											"end": 2272,
											"name": "tag",
											"source": 0,
											"value": "177"
										},
										{
											"begin": 2074,
											"end": 2272,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "310"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "256"
										},
										{
											"begin": 1094,
											"end": 1107,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "310"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2162,
											"end": 2184,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2162,
											"end": 2184,
											"modifierDepth": 1,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2154,
											"end": 2227,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "312"
										},
										{
											"begin": 2154,
											"end": 2227,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2154,
											"end": 2227,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2154,
											"end": 2227,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2154,
											"end": 2227,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2154,
											"end": 2227,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8662,
											"end": 8664,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 2154,
											"end": 2227,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2154,
											"end": 2227,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2154,
											"end": 2227,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8644,
											"end": 8665,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8701,
											"end": 8703,
											"name": "PUSH",
											"source": 14,
											"value": "26"
										},
										{
											"begin": 8681,
											"end": 8699,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 8681,
											"end": 8699,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8681,
											"end": 8699,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8674,
											"end": 8704,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8740,
											"end": 8774,
											"name": "PUSH",
											"source": 14,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 8720,
											"end": 8738,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 8720,
											"end": 8738,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8720,
											"end": 8738,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8713,
											"end": 8775,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "646472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8791,
											"end": 8809,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 8791,
											"end": 8809,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8791,
											"end": 8809,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8784,
											"end": 8820,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8837,
											"end": 8856,
											"name": "PUSH",
											"source": 14,
											"value": "84"
										},
										{
											"begin": 8837,
											"end": 8856,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2154,
											"end": 2227,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "216"
										},
										{
											"begin": 8460,
											"end": 8862,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 2154,
											"end": 2227,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "312"
										},
										{
											"begin": 2154,
											"end": 2227,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2237,
											"end": 2265,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "261"
										},
										{
											"begin": 2256,
											"end": 2264,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2237,
											"end": 2255,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "273"
										},
										{
											"begin": 2237,
											"end": 2265,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 11010,
											"end": 11194,
											"name": "tag",
											"source": 12,
											"value": "194"
										},
										{
											"begin": 11010,
											"end": 11194,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11067,
											"end": 11071,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 11130,
											"end": 11143,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 11130,
											"end": 11143,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 11120,
											"end": 11127,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 11120,
											"end": 11143,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 11090,
											"end": 11187,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 11090,
											"end": 11187,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 11090,
											"end": 11187,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "181"
										},
										{
											"begin": 11090,
											"end": 11187,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11160,
											"end": 11180,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 11160,
											"end": 11180,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 11160,
											"end": 11180,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 11160,
											"end": 11180,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 11160,
											"end": 11171,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 11160,
											"end": 11180,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 11160,
											"end": 11180,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 11160,
											"end": 11180,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 11160,
											"end": 11180,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 11160,
											"end": 11180,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 11160,
											"end": 11187,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11160,
											"end": 11187,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 11160,
											"end": 11187,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 11160,
											"end": 11187,
											"name": "PUSH",
											"source": 12,
											"value": "FF"
										},
										{
											"begin": 11160,
											"end": 11187,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 11159,
											"end": 11187,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 11159,
											"end": 11187,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 11010,
											"end": 11194,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 18963,
											"end": 19153,
											"name": "tag",
											"source": 12,
											"value": "206"
										},
										{
											"begin": 18963,
											"end": 19153,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 19074,
											"end": 19098,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 19074,
											"end": 19098,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 19074,
											"end": 19098,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 19074,
											"end": 19098,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 19074,
											"end": 19089,
											"name": "PUSH",
											"source": 12,
											"value": "6"
										},
										{
											"begin": 19074,
											"end": 19098,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 19074,
											"end": 19098,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 19074,
											"end": 19098,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 19074,
											"end": 19098,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 19074,
											"end": 19098,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 19074,
											"end": 19098,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 19074,
											"end": 19103,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 19074,
											"end": 19103,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 19074,
											"end": 19103,
											"name": "AND",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 19074,
											"end": 19103,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 19074,
											"end": 19103,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 19074,
											"end": 19103,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 19074,
											"end": 19103,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 19074,
											"end": 19103,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 19074,
											"end": 19103,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 19074,
											"end": 19103,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 19074,
											"end": 19103,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 19074,
											"end": 19103,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 19118,
											"end": 19146,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 19118,
											"end": 19146,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 19074,
											"end": 19098,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 19074,
											"end": 19098,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 19118,
											"end": 19146,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 19118,
											"end": 19146,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 19118,
											"end": 19146,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 19118,
											"end": 19146,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 19118,
											"end": 19146,
											"name": "PUSH",
											"source": 12,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 19118,
											"end": 19146,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 19118,
											"end": 19146,
											"name": "LOG4",
											"source": 12
										},
										{
											"begin": 18963,
											"end": 19153,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 18963,
											"end": 19153,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 18963,
											"end": 19153,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 18963,
											"end": 19153,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 14032,
											"end": 16115,
											"name": "tag",
											"source": 12,
											"value": "212"
										},
										{
											"begin": 14032,
											"end": 16115,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14143,
											"end": 14178,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 14181,
											"end": 14202,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "325"
										},
										{
											"begin": 14194,
											"end": 14201,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 14181,
											"end": 14193,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "266"
										},
										{
											"begin": 14181,
											"end": 14202,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 14181,
											"end": 14202,
											"name": "tag",
											"source": 12,
											"value": "325"
										},
										{
											"begin": 14181,
											"end": 14202,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14143,
											"end": 14202,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 14143,
											"end": 14202,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14239,
											"end": 14243,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14217,
											"end": 14243,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 14217,
											"end": 14230,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 14217,
											"end": 14235,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 14217,
											"end": 14235,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 14217,
											"end": 14235,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14217,
											"end": 14243,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 14217,
											"end": 14243,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 14213,
											"end": 14280,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "326"
										},
										{
											"begin": 14213,
											"end": 14280,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 14252,
											"end": 14280,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 14252,
											"end": 14280,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A11481"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 14252,
											"end": 14280,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 14252,
											"end": 14280,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 14252,
											"end": 14280,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 14252,
											"end": 14280,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 14252,
											"end": 14280,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 14252,
											"end": 14280,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 14252,
											"end": 14280,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 14252,
											"end": 14280,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 14252,
											"end": 14280,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 14252,
											"end": 14280,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 14252,
											"end": 14280,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 14213,
											"end": 14280,
											"name": "tag",
											"source": 12,
											"value": "326"
										},
										{
											"begin": 14213,
											"end": 14280,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14291,
											"end": 14313,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14317,
											"end": 14337,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 14317,
											"end": 14337,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 14317,
											"end": 14337,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 14317,
											"end": 14337,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 14317,
											"end": 14389,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "329"
										},
										{
											"begin": 14317,
											"end": 14389,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14353,
											"end": 14389,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "329"
										},
										{
											"begin": 14370,
											"end": 14374,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 9706,
											"end": 9868,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "172"
										},
										{
											"begin": 9706,
											"end": 9868,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 14353,
											"end": 14389,
											"name": "tag",
											"source": 12,
											"value": "329"
										},
										{
											"begin": 14353,
											"end": 14389,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14317,
											"end": 14441,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 14317,
											"end": 14441,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "331"
										},
										{
											"begin": 14317,
											"end": 14441,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 14405,
											"end": 14425,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "333"
										},
										{
											"begin": 14417,
											"end": 14424,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 14405,
											"end": 14416,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "61"
										},
										{
											"begin": 14405,
											"end": 14425,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 14405,
											"end": 14425,
											"name": "tag",
											"source": 12,
											"value": "333"
										},
										{
											"begin": 14405,
											"end": 14425,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14405,
											"end": 14441,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 14405,
											"end": 14441,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 14317,
											"end": 14441,
											"name": "tag",
											"source": 12,
											"value": "331"
										},
										{
											"begin": 14317,
											"end": 14441,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14291,
											"end": 14442,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 14291,
											"end": 14442,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14458,
											"end": 14475,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 14453,
											"end": 14519,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "334"
										},
										{
											"begin": 14453,
											"end": 14519,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 14484,
											"end": 14519,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 14484,
											"end": 14519,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2CE44B5F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 14484,
											"end": 14519,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 14484,
											"end": 14519,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 14484,
											"end": 14519,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 14484,
											"end": 14519,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 14484,
											"end": 14519,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 14484,
											"end": 14519,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 14484,
											"end": 14519,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 14484,
											"end": 14519,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 14484,
											"end": 14519,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 14484,
											"end": 14519,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 14484,
											"end": 14519,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 14453,
											"end": 14519,
											"name": "tag",
											"source": 12,
											"value": "334"
										},
										{
											"begin": 14453,
											"end": 14519,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14533,
											"end": 14549,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 14533,
											"end": 14549,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 14529,
											"end": 14581,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "335"
										},
										{
											"begin": 14529,
											"end": 14581,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 14558,
											"end": 14581,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 14558,
											"end": 14581,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3A954ECD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 14558,
											"end": 14581,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 14558,
											"end": 14581,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 14558,
											"end": 14581,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 14558,
											"end": 14581,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 14558,
											"end": 14581,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 14558,
											"end": 14581,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 14558,
											"end": 14581,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 14558,
											"end": 14581,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 14558,
											"end": 14581,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 14558,
											"end": 14581,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 14558,
											"end": 14581,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 14529,
											"end": 14581,
											"name": "tag",
											"source": 12,
											"value": "335"
										},
										{
											"begin": 14529,
											"end": 14581,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14697,
											"end": 14732,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "338"
										},
										{
											"begin": 14714,
											"end": 14715,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 14718,
											"end": 14725,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 14727,
											"end": 14731,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 14697,
											"end": 14705,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "206"
										},
										{
											"begin": 14697,
											"end": 14732,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 14697,
											"end": 14732,
											"name": "tag",
											"source": 12,
											"value": "338"
										},
										{
											"begin": 14697,
											"end": 14732,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 15022,
											"end": 15040,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15040,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15040,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15040,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 15022,
											"end": 15040,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15040,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15040,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15034,
											"name": "PUSH",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 15022,
											"end": 15040,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 15022,
											"end": 15040,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15040,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15040,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15040,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 15022,
											"end": 15040,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15040,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15040,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15053,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15053,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 15022,
											"end": 15053,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15053,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15053,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15053,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 15022,
											"end": 15053,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15053,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15053,
											"name": "AND",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 15022,
											"end": 15053,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15053,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15053,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15053,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15053,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15053,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15053,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15083,
											"name": "DUP10",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15083,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15083,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15083,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15083,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15083,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15083,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15083,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15083,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15096,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15096,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15096,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15096,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15096,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15096,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15096,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15096,
											"name": "AND",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": 15067,
											"end": 15096,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15096,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15096,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15096,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15096,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15096,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15096,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15096,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15096,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15096,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15096,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 15145,
											"end": 15165,
											"name": "DUP10",
											"source": 12
										},
										{
											"begin": 15145,
											"end": 15165,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 15145,
											"end": 15165,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 15145,
											"end": 15156,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 15145,
											"end": 15165,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15145,
											"end": 15165,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 15145,
											"end": 15165,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 15145,
											"end": 15165,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 15145,
											"end": 15165,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 15145,
											"end": 15165,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 15179,
											"end": 15197,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 15179,
											"end": 15197,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 15211,
											"end": 15260,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 15211,
											"end": 15260,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15211,
											"end": 15260,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 15211,
											"end": 15260,
											"name": "OR",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 15244,
											"end": 15259,
											"name": "TIMESTAMP",
											"source": 12
										},
										{
											"begin": 15211,
											"end": 15260,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15211,
											"end": 15260,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 15211,
											"end": 15260,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 15211,
											"end": 15260,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 15211,
											"end": 15260,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15211,
											"end": 15260,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 15211,
											"end": 15260,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 15211,
											"end": 15260,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 15211,
											"end": 15260,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 15211,
											"end": 15260,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 15530,
											"end": 15541,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 15530,
											"end": 15541,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 15589,
											"end": 15613,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 15589,
											"end": 15613,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 15589,
											"end": 15613,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 15589,
											"end": 15613,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 15589,
											"end": 15613,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 15631,
											"end": 15644,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 15631,
											"end": 15644,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 15145,
											"end": 15165,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 15145,
											"end": 15165,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 15589,
											"end": 15613,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15589,
											"end": 15613,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 15631,
											"end": 15644,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 15627,
											"end": 16004,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "340"
										},
										{
											"begin": 15627,
											"end": 16004,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 15838,
											"end": 15851,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 15838,
											"end": 15851,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 15823,
											"end": 15834,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 15823,
											"end": 15851,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 15819,
											"end": 15990,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "340"
										},
										{
											"begin": 15819,
											"end": 15990,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 15875,
											"end": 15895,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 15875,
											"end": 15895,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 15943,
											"end": 15971,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 15943,
											"end": 15971,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 15943,
											"end": 15971,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 15943,
											"end": 15971,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 15917,
											"end": 15971,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 15917,
											"end": 15971,
											"name": "AND",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 15917,
											"end": 15971,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 15917,
											"end": 15971,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15917,
											"end": 15971,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 15917,
											"end": 15971,
											"name": "AND",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 15875,
											"end": 15895,
											"name": "DUP11",
											"source": 12
										},
										{
											"begin": 15875,
											"end": 15895,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 15917,
											"end": 15971,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 15917,
											"end": 15971,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 15917,
											"end": 15971,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 15917,
											"end": 15971,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 15819,
											"end": 15990,
											"name": "tag",
											"source": 12,
											"value": "340"
										},
										{
											"begin": 15819,
											"end": 15990,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14998,
											"end": 16014,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14998,
											"end": 16014,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14998,
											"end": 16014,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 16048,
											"end": 16055,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 16044,
											"end": 16046,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 16029,
											"end": 16056,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 16038,
											"end": 16042,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 16029,
											"end": 16056,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 16029,
											"end": 16056,
											"name": "PUSH",
											"source": 12,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 16029,
											"end": 16056,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 16029,
											"end": 16056,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 16029,
											"end": 16056,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 16029,
											"end": 16056,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 16029,
											"end": 16056,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 16029,
											"end": 16056,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 16029,
											"end": 16056,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 16029,
											"end": 16056,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 16029,
											"end": 16056,
											"name": "LOG4",
											"source": 12
										},
										{
											"begin": 16066,
											"end": 16108,
											"name": "tag",
											"source": 12,
											"value": "341"
										},
										{
											"begin": 16066,
											"end": 16108,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14133,
											"end": 16115,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14133,
											"end": 16115,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14032,
											"end": 16115,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14032,
											"end": 16115,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14032,
											"end": 16115,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14032,
											"end": 16115,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2647,
											"end": 2959,
											"name": "tag",
											"source": 4,
											"value": "225"
										},
										{
											"begin": 2647,
											"end": 2959,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2761,
											"end": 2767,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2736,
											"end": 2757,
											"name": "SELFBALANCE",
											"source": 4
										},
										{
											"begin": 2736,
											"end": 2767,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 2736,
											"end": 2767,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 2728,
											"end": 2801,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "344"
										},
										{
											"begin": 2728,
											"end": 2801,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 2728,
											"end": 2801,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2728,
											"end": 2801,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2728,
											"end": 2801,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2728,
											"end": 2801,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 9069,
											"end": 9071,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 2728,
											"end": 2801,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 2728,
											"end": 2801,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2728,
											"end": 2801,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 9051,
											"end": 9072,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9108,
											"end": 9110,
											"name": "PUSH",
											"source": 14,
											"value": "1D"
										},
										{
											"begin": 9088,
											"end": 9106,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 9088,
											"end": 9106,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 9088,
											"end": 9106,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9081,
											"end": 9111,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9147,
											"end": 9178,
											"name": "PUSH",
											"source": 14,
											"value": "416464726573733A20696E73756666696369656E742062616C616E6365000000"
										},
										{
											"begin": 9127,
											"end": 9145,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 9127,
											"end": 9145,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 9127,
											"end": 9145,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9120,
											"end": 9179,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9196,
											"end": 9214,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 9196,
											"end": 9214,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2728,
											"end": 2801,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "216"
										},
										{
											"begin": 8867,
											"end": 9220,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 2728,
											"end": 2801,
											"name": "tag",
											"source": 4,
											"value": "344"
										},
										{
											"begin": 2728,
											"end": 2801,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2813,
											"end": 2825,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2831,
											"end": 2840,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2831,
											"end": 2845,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2853,
											"end": 2859,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "DUP8",
											"source": 4
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "GAS",
											"source": 4
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "CALL",
											"source": 4
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "351"
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "PUSH",
											"source": 4,
											"value": "3F"
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "RETURNDATACOPY",
											"source": 4
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "350"
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "tag",
											"source": 4,
											"value": "351"
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "tag",
											"source": 4,
											"value": "350"
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2831,
											"end": 2864,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2812,
											"end": 2864,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2812,
											"end": 2864,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2812,
											"end": 2864,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2882,
											"end": 2889,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2874,
											"end": 2952,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "205"
										},
										{
											"begin": 2874,
											"end": 2952,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 2874,
											"end": 2952,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2874,
											"end": 2952,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2874,
											"end": 2952,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2874,
											"end": 2952,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 9637,
											"end": 9639,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 2874,
											"end": 2952,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 2874,
											"end": 2952,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2874,
											"end": 2952,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 9619,
											"end": 9640,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9676,
											"end": 9678,
											"name": "PUSH",
											"source": 14,
											"value": "3A"
										},
										{
											"begin": 9656,
											"end": 9674,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 9656,
											"end": 9674,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 9656,
											"end": 9674,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9649,
											"end": 9679,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9715,
											"end": 9749,
											"name": "PUSH",
											"source": 14,
											"value": "416464726573733A20756E61626C6520746F2073656E642076616C75652C2072"
										},
										{
											"begin": 9695,
											"end": 9713,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 9695,
											"end": 9713,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 9695,
											"end": 9713,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9688,
											"end": 9750,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9786,
											"end": 9814,
											"name": "PUSH",
											"source": 14,
											"value": "6563697069656E74206D61792068617665207265766572746564000000000000"
										},
										{
											"begin": 9766,
											"end": 9784,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 9766,
											"end": 9784,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 9766,
											"end": 9784,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9759,
											"end": 9815,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9832,
											"end": 9851,
											"name": "PUSH",
											"source": 14,
											"value": "84"
										},
										{
											"begin": 9832,
											"end": 9851,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2874,
											"end": 2952,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "216"
										},
										{
											"begin": 9435,
											"end": 9857,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 11200,
											"end": 11302,
											"name": "tag",
											"source": 12,
											"value": "245"
										},
										{
											"begin": 11200,
											"end": 11302,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11268,
											"end": 11295,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "224"
										},
										{
											"begin": 11278,
											"end": 11280,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 11282,
											"end": 11290,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 11268,
											"end": 11295,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 11268,
											"end": 11295,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 11268,
											"end": 11295,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 11268,
											"end": 11295,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 11268,
											"end": 11295,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 11268,
											"end": 11295,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 11268,
											"end": 11295,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 11268,
											"end": 11295,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 11268,
											"end": 11295,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 11268,
											"end": 11295,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 11268,
											"end": 11295,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 11268,
											"end": 11295,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11268,
											"end": 11277,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "360"
										},
										{
											"begin": 11268,
											"end": 11295,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "tag",
											"source": 0,
											"value": "256"
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "PUSH",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "272"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 10064,
											"end": 10066,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 10046,
											"end": 10067,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 10046,
											"end": 10067,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 10046,
											"end": 10067,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10083,
											"end": 10101,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 10083,
											"end": 10101,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10083,
											"end": 10101,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10076,
											"end": 10106,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10142,
											"end": 10176,
											"name": "PUSH",
											"source": 14,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 10122,
											"end": 10140,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 10122,
											"end": 10140,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10122,
											"end": 10140,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10115,
											"end": 10177,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10194,
											"end": 10212,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 10194,
											"end": 10212,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "216"
										},
										{
											"begin": 9862,
											"end": 10218,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 6309,
											"end": 7393,
											"name": "tag",
											"source": 12,
											"value": "266"
										},
										{
											"begin": 6309,
											"end": 7393,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 6419,
											"end": 6426,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6499,
											"end": 6512,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6499,
											"end": 6512,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 6492,
											"end": 6496,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6492,
											"end": 6512,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 6461,
											"end": 7329,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6461,
											"end": 7329,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "372"
										},
										{
											"begin": 6461,
											"end": 7329,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6563,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6566,
											"end": 6583,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6566,
											"end": 6583,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6566,
											"end": 6583,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6566,
											"end": 6577,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 6566,
											"end": 6583,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 6566,
											"end": 6583,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6566,
											"end": 6583,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6566,
											"end": 6583,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6566,
											"end": 6583,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 6566,
											"end": 6583,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6566,
											"end": 6583,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6566,
											"end": 6583,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6566,
											"end": 6583,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "PUSH",
											"source": 12,
											"value": "FF"
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6601,
											"end": 7315,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "376"
										},
										{
											"begin": 6601,
											"end": 7315,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 6650,
											"end": 6664,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6650,
											"end": 6664,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6650,
											"end": 6678,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 6650,
											"end": 6678,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6646,
											"end": 6745,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "374"
										},
										{
											"begin": 6646,
											"end": 6745,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 6713,
											"end": 6722,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 6309,
											"end": 7393,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6309,
											"end": 7393,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 6646,
											"end": 6745,
											"name": "tag",
											"source": 12,
											"value": "374"
										},
										{
											"begin": 6646,
											"end": 6745,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 7081,
											"end": 7087,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7125,
											"end": 7142,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7125,
											"end": 7142,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7125,
											"end": 7142,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7125,
											"end": 7142,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7125,
											"end": 7136,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7125,
											"end": 7142,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 7125,
											"end": 7142,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7125,
											"end": 7142,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7125,
											"end": 7142,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7125,
											"end": 7142,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7125,
											"end": 7142,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7125,
											"end": 7142,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7125,
											"end": 7142,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7125,
											"end": 7142,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "PUSH",
											"source": 12,
											"value": "FF"
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7172,
											"end": 7200,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7168,
											"end": 7275,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "377"
										},
										{
											"begin": 7168,
											"end": 7275,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7239,
											"end": 7248,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 6309,
											"end": 7393,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6309,
											"end": 7393,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7168,
											"end": 7275,
											"name": "tag",
											"source": 12,
											"value": "377"
										},
										{
											"begin": 7168,
											"end": 7275,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7042,
											"end": 7297,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "374"
										},
										{
											"begin": 7042,
											"end": 7297,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7042,
											"end": 7297,
											"name": "tag",
											"source": 12,
											"value": "376"
										},
										{
											"begin": 7042,
											"end": 7297,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6514,
											"end": 7329,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6461,
											"end": 7329,
											"name": "tag",
											"source": 12,
											"value": "372"
										},
										{
											"begin": 6461,
											"end": 7329,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7355,
											"end": 7386,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7355,
											"end": 7386,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6F96CDA1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7355,
											"end": 7386,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7355,
											"end": 7386,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7355,
											"end": 7386,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7355,
											"end": 7386,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7355,
											"end": 7386,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7355,
											"end": 7386,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 7355,
											"end": 7386,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7355,
											"end": 7386,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7355,
											"end": 7386,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 7355,
											"end": 7386,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7355,
											"end": 7386,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2426,
											"end": 2613,
											"name": "tag",
											"source": 0,
											"value": "273"
										},
										{
											"begin": 2426,
											"end": 2613,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2518,
											"end": 2524,
											"name": "PUSH",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 2518,
											"end": 2524,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2518,
											"end": 2524,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2534,
											"end": 2551,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2534,
											"end": 2551,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2534,
											"end": 2551,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2534,
											"end": 2551,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2534,
											"end": 2551,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2534,
											"end": 2551,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2534,
											"end": 2551,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2534,
											"end": 2551,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2534,
											"end": 2551,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 2534,
											"end": 2551,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2566,
											"end": 2606,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2566,
											"end": 2606,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2518,
											"end": 2524,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2518,
											"end": 2524,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2518,
											"end": 2524,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2534,
											"end": 2551,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2518,
											"end": 2524,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2518,
											"end": 2524,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2566,
											"end": 2606,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2566,
											"end": 2606,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2499,
											"end": 2515,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2499,
											"end": 2515,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2566,
											"end": 2606,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2489,
											"end": 2613,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2426,
											"end": 2613,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2426,
											"end": 2613,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 19634,
											"end": 20285,
											"name": "tag",
											"source": 12,
											"value": "293"
										},
										{
											"begin": 19634,
											"end": 20285,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A85BD01"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 19793,
											"end": 19797,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 19793,
											"end": 19797,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 19813,
											"end": 19849,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19849,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19849,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19849,
											"name": "PUSH",
											"source": 12,
											"value": "150B7A02"
										},
										{
											"begin": 19813,
											"end": 19849,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "382"
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 719,
											"end": 729,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 19864,
											"end": 19868,
											"name": "DUP10",
											"source": 12
										},
										{
											"begin": 19864,
											"end": 19868,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 19870,
											"end": 19877,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 19870,
											"end": 19877,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 19879,
											"end": 19884,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 19879,
											"end": 19884,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "383"
										},
										{
											"begin": 19813,
											"end": 19885,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "tag",
											"source": 12,
											"value": "382"
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "GAS",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "CALL",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "384"
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "385"
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "386"
										},
										{
											"begin": 19813,
											"end": 19885,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "tag",
											"source": 12,
											"value": "385"
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "tag",
											"source": 12,
											"value": "384"
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "387"
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "392"
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "NOT",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "PUSH",
											"source": 12,
											"value": "3F"
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "RETURNDATACOPY",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "391"
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "tag",
											"source": 12,
											"value": "392"
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "tag",
											"source": 12,
											"value": "391"
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 20044,
											"end": 20050,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 20044,
											"end": 20057,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 20061,
											"end": 20062,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 20044,
											"end": 20062,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 20040,
											"end": 20269,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "393"
										},
										{
											"begin": 20040,
											"end": 20269,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 20089,
											"end": 20129,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 20089,
											"end": 20129,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "68D2BF6B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 20089,
											"end": 20129,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 20089,
											"end": 20129,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 20089,
											"end": 20129,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 20089,
											"end": 20129,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 20089,
											"end": 20129,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 20089,
											"end": 20129,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 20089,
											"end": 20129,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 20089,
											"end": 20129,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 20089,
											"end": 20129,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 20089,
											"end": 20129,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 20089,
											"end": 20129,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 20040,
											"end": 20269,
											"name": "tag",
											"source": 12,
											"value": "393"
										},
										{
											"begin": 20040,
											"end": 20269,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 20229,
											"end": 20235,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 20223,
											"end": 20236,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 20214,
											"end": 20220,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 20210,
											"end": 20212,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 20206,
											"end": 20221,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 20199,
											"end": 20237,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "tag",
											"source": 12,
											"value": "387"
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 19931,
											"end": 19986,
											"name": "AND",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A85BD01"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 19931,
											"end": 19986,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 19931,
											"end": 19986,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 19634,
											"end": 20285,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 19634,
											"end": 20285,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 19634,
											"end": 20285,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 19634,
											"end": 20285,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 19634,
											"end": 20285,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 19634,
											"end": 20285,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 19634,
											"end": 20285,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1023,
											"end": 1170,
											"name": "tag",
											"source": 11,
											"value": "299"
										},
										{
											"begin": 1023,
											"end": 1170,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1075,
											"end": 1088,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 1100,
											"end": 1163,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1100,
											"end": 1163,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1100,
											"end": 1163,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1100,
											"end": 1163,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 1100,
											"end": 1163,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1100,
											"end": 1163,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1100,
											"end": 1163,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1100,
											"end": 1163,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1100,
											"end": 1163,
											"name": "PUSH",
											"source": 11,
											"value": "36"
										},
										{
											"begin": 1100,
											"end": 1163,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1100,
											"end": 1163,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1100,
											"end": 1163,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1100,
											"end": 1163,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1100,
											"end": 1163,
											"name": "PUSH data",
											"source": 11,
											"value": "BAD8C5B7513EFA3484AFF4751176E1559E99E0AAC6100695FA19AFECC4F7431D"
										},
										{
											"begin": 1100,
											"end": 1163,
											"name": "PUSH",
											"source": 11,
											"value": "36"
										},
										{
											"begin": 1100,
											"end": 1163,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1100,
											"end": 1163,
											"name": "CODECOPY",
											"source": 11
										},
										{
											"begin": 1100,
											"end": 1163,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1100,
											"end": 1163,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1023,
											"end": 1170,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1023,
											"end": 1170,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 447,
											"end": 1143,
											"name": "tag",
											"source": 6,
											"value": "303"
										},
										{
											"begin": 447,
											"end": 1143,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 503,
											"end": 516,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 552,
											"end": 566,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 569,
											"end": 586,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "398"
										},
										{
											"begin": 580,
											"end": 585,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 569,
											"end": 579,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "399"
										},
										{
											"begin": 569,
											"end": 586,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 569,
											"end": 586,
											"name": "tag",
											"source": 6,
											"value": "398"
										},
										{
											"begin": 569,
											"end": 586,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 589,
											"end": 590,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 569,
											"end": 590,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 552,
											"end": 590,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 552,
											"end": 590,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 604,
											"end": 624,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 638,
											"end": 644,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 627,
											"end": 645,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "401"
										},
										{
											"begin": 627,
											"end": 645,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "401"
										},
										{
											"begin": 627,
											"end": 645,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "402"
										},
										{
											"begin": 627,
											"end": 645,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "tag",
											"source": 6,
											"value": "401"
										},
										{
											"begin": 627,
											"end": 645,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 627,
											"end": 645,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 627,
											"end": 645,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 627,
											"end": 645,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 627,
											"end": 645,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 627,
											"end": 645,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "403"
										},
										{
											"begin": 627,
											"end": 645,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 627,
											"end": 645,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "CALLDATACOPY",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 627,
											"end": 645,
											"name": "tag",
											"source": 6,
											"value": "403"
										},
										{
											"begin": 627,
											"end": 645,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 604,
											"end": 645,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 765,
											"end": 793,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 765,
											"end": 793,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 765,
											"end": 793,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 781,
											"end": 783,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 765,
											"end": 793,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 820,
											"end": 1100,
											"name": "tag",
											"source": 6,
											"value": "404"
										},
										{
											"begin": 820,
											"end": 1100,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 851,
											"end": 856,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "181899199A1A9B1B9C1CB0B131B232B3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "81"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 985,
											"end": 987,
											"name": "PUSH",
											"source": 6,
											"value": "A"
										},
										{
											"begin": 974,
											"end": 988,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 974,
											"end": 988,
											"name": "MOD",
											"source": 6
										},
										{
											"begin": 969,
											"end": 999,
											"name": "BYTE",
											"source": 6
										},
										{
											"begin": 851,
											"end": 856,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 956,
											"end": 1000,
											"name": "MSTORE8",
											"source": 6
										},
										{
											"begin": 1044,
											"end": 1046,
											"name": "PUSH",
											"source": 6,
											"value": "A"
										},
										{
											"begin": 1035,
											"end": 1046,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 1035,
											"end": 1046,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 1035,
											"end": 1046,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1064,
											"end": 1085,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 820,
											"end": 1100,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "404"
										},
										{
											"begin": 1064,
											"end": 1085,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1120,
											"end": 1126,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 447,
											"end": 1143,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 447,
											"end": 1143,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 11653,
											"end": 11810,
											"name": "tag",
											"source": 12,
											"value": "360"
										},
										{
											"begin": 11653,
											"end": 11810,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11771,
											"end": 11803,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "205"
										},
										{
											"begin": 11777,
											"end": 11779,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 11781,
											"end": 11789,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 11791,
											"end": 11796,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 11798,
											"end": 11802,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 11771,
											"end": 11776,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "414"
										},
										{
											"begin": 11771,
											"end": 11803,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 10139,
											"end": 11055,
											"name": "tag",
											"source": 9,
											"value": "399"
										},
										{
											"begin": 10139,
											"end": 11055,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10192,
											"end": 10199,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 10192,
											"end": 10199,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "184F03E93FF9F4DAA797ED6E38ED64BF6A1F01"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10267,
											"end": 10284,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10267,
											"end": 10284,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 10263,
											"end": 10366,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "416"
										},
										{
											"begin": 10263,
											"end": 10366,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "184F03E93FF9F4DAA797ED6E38ED64BF6A1F01"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10304,
											"end": 10321,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10304,
											"end": 10321,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 10304,
											"end": 10321,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10349,
											"end": 10351,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 10339,
											"end": 10351,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10263,
											"end": 10366,
											"name": "tag",
											"source": 9,
											"value": "416"
										},
										{
											"begin": 10263,
											"end": 10366,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10392,
											"end": 10400,
											"name": "PUSH",
											"source": 9,
											"value": "4EE2D6D415B85ACEF8100000000"
										},
										{
											"begin": 10383,
											"end": 10388,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10383,
											"end": 10400,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 10379,
											"end": 10482,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "419"
										},
										{
											"begin": 10379,
											"end": 10482,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 10429,
											"end": 10437,
											"name": "PUSH",
											"source": 9,
											"value": "4EE2D6D415B85ACEF8100000000"
										},
										{
											"begin": 10420,
											"end": 10437,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10420,
											"end": 10437,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 10420,
											"end": 10437,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10465,
											"end": 10467,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 10455,
											"end": 10467,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10379,
											"end": 10482,
											"name": "tag",
											"source": 9,
											"value": "419"
										},
										{
											"begin": 10379,
											"end": 10482,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10508,
											"end": 10516,
											"name": "PUSH",
											"source": 9,
											"value": "2386F26FC10000"
										},
										{
											"begin": 10499,
											"end": 10504,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10499,
											"end": 10516,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 10495,
											"end": 10598,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "422"
										},
										{
											"begin": 10495,
											"end": 10598,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 10545,
											"end": 10553,
											"name": "PUSH",
											"source": 9,
											"value": "2386F26FC10000"
										},
										{
											"begin": 10536,
											"end": 10553,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10536,
											"end": 10553,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 10536,
											"end": 10553,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10581,
											"end": 10583,
											"name": "PUSH",
											"source": 9,
											"value": "10"
										},
										{
											"begin": 10571,
											"end": 10583,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10495,
											"end": 10598,
											"name": "tag",
											"source": 9,
											"value": "422"
										},
										{
											"begin": 10495,
											"end": 10598,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10624,
											"end": 10631,
											"name": "PUSH",
											"source": 9,
											"value": "5F5E100"
										},
										{
											"begin": 10615,
											"end": 10620,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10615,
											"end": 10631,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 10611,
											"end": 10711,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "425"
										},
										{
											"begin": 10611,
											"end": 10711,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 10660,
											"end": 10667,
											"name": "PUSH",
											"source": 9,
											"value": "5F5E100"
										},
										{
											"begin": 10651,
											"end": 10667,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10651,
											"end": 10667,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 10651,
											"end": 10667,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10695,
											"end": 10696,
											"name": "PUSH",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 10685,
											"end": 10696,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10611,
											"end": 10711,
											"name": "tag",
											"source": 9,
											"value": "425"
										},
										{
											"begin": 10611,
											"end": 10711,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10737,
											"end": 10744,
											"name": "PUSH",
											"source": 9,
											"value": "2710"
										},
										{
											"begin": 10728,
											"end": 10733,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10728,
											"end": 10744,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 10724,
											"end": 10824,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "428"
										},
										{
											"begin": 10724,
											"end": 10824,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 10773,
											"end": 10780,
											"name": "PUSH",
											"source": 9,
											"value": "2710"
										},
										{
											"begin": 10764,
											"end": 10780,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10764,
											"end": 10780,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 10764,
											"end": 10780,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10808,
											"end": 10809,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 10798,
											"end": 10809,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10724,
											"end": 10824,
											"name": "tag",
											"source": 9,
											"value": "428"
										},
										{
											"begin": 10724,
											"end": 10824,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10850,
											"end": 10857,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 10841,
											"end": 10846,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10841,
											"end": 10857,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 10837,
											"end": 10937,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "431"
										},
										{
											"begin": 10837,
											"end": 10937,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 10886,
											"end": 10893,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 10877,
											"end": 10893,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10877,
											"end": 10893,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 10877,
											"end": 10893,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10921,
											"end": 10922,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 10911,
											"end": 10922,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10837,
											"end": 10937,
											"name": "tag",
											"source": 9,
											"value": "431"
										},
										{
											"begin": 10837,
											"end": 10937,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10963,
											"end": 10970,
											"name": "PUSH",
											"source": 9,
											"value": "A"
										},
										{
											"begin": 10954,
											"end": 10959,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10954,
											"end": 10970,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 10950,
											"end": 11016,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "181"
										},
										{
											"begin": 10950,
											"end": 11016,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 11000,
											"end": 11001,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 10990,
											"end": 11001,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 11042,
											"end": 11048,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 10139,
											"end": 11055,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10139,
											"end": 11055,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 12057,
											"end": 13790,
											"name": "tag",
											"source": 12,
											"value": "414"
										},
										{
											"begin": 12057,
											"end": 13790,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12190,
											"end": 12210,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 12213,
											"end": 12226,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 12240,
											"end": 12256,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 12240,
											"end": 12256,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 12236,
											"end": 12284,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "436"
										},
										{
											"begin": 12236,
											"end": 12284,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 12265,
											"end": 12284,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 12265,
											"end": 12284,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2E0763"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12265,
											"end": 12284,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 12265,
											"end": 12284,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 12265,
											"end": 12284,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 12265,
											"end": 12284,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 12265,
											"end": 12284,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 12265,
											"end": 12284,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 12265,
											"end": 12284,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 12265,
											"end": 12284,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 12265,
											"end": 12284,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 12265,
											"end": 12284,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 12265,
											"end": 12284,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 12236,
											"end": 12284,
											"name": "tag",
											"source": 12,
											"value": "436"
										},
										{
											"begin": 12236,
											"end": 12284,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12298,
											"end": 12306,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 12310,
											"end": 12311,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 12298,
											"end": 12311,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 12294,
											"end": 12338,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "437"
										},
										{
											"begin": 12294,
											"end": 12338,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 12320,
											"end": 12338,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 12320,
											"end": 12338,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B562E8DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12320,
											"end": 12338,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 12320,
											"end": 12338,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 12320,
											"end": 12338,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 12320,
											"end": 12338,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 12320,
											"end": 12338,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 12320,
											"end": 12338,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 12320,
											"end": 12338,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 12320,
											"end": 12338,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 12320,
											"end": 12338,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 12320,
											"end": 12338,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 12320,
											"end": 12338,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 12294,
											"end": 12338,
											"name": "tag",
											"source": 12,
											"value": "437"
										},
										{
											"begin": 12294,
											"end": 12338,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 12681,
											"end": 12697,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 12681,
											"end": 12697,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 12681,
											"end": 12697,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 12681,
											"end": 12697,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 12681,
											"end": 12697,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 12681,
											"end": 12697,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 12681,
											"end": 12693,
											"name": "PUSH",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 12681,
											"end": 12697,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 12681,
											"end": 12697,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 12681,
											"end": 12697,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 12681,
											"end": 12697,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 12681,
											"end": 12697,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 12681,
											"end": 12697,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 12681,
											"end": 12697,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 12681,
											"end": 12697,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 12681,
											"end": 12725,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 12681,
											"end": 12725,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 12739,
											"end": 12788,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 12739,
											"end": 12788,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 12681,
											"end": 12725,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12681,
											"end": 12725,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 12681,
											"end": 12725,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 12681,
											"end": 12725,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 12681,
											"end": 12725,
											"name": "DUP13",
											"source": 12
										},
										{
											"begin": 12681,
											"end": 12725,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 12681,
											"end": 12725,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 12681,
											"end": 12725,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 12739,
											"end": 12788,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 12739,
											"end": 12788,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 12739,
											"end": 12788,
											"name": "OR",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 12681,
											"end": 12725,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 12681,
											"end": 12725,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 12681,
											"end": 12725,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 12681,
											"end": 12725,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 12681,
											"end": 12725,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 12681,
											"end": 12725,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 12739,
											"end": 12788,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 12739,
											"end": 12788,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 12739,
											"end": 12788,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 12739,
											"end": 12788,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 12739,
											"end": 12788,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 12739,
											"end": 12788,
											"name": "DUP13",
											"source": 12
										},
										{
											"begin": 12739,
											"end": 12788,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 12739,
											"end": 12788,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 12739,
											"end": 12788,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 12739,
											"end": 12788,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 12739,
											"end": 12788,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 12739,
											"end": 12788,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 12739,
											"end": 12788,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 12739,
											"end": 12788,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 12739,
											"end": 12788,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 12739,
											"end": 12788,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 12803,
											"end": 12828,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 12803,
											"end": 12828,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 12803,
											"end": 12828,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 12803,
											"end": 12814,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 12803,
											"end": 12828,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 12803,
											"end": 12828,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 12803,
											"end": 12828,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 12803,
											"end": 12828,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 12803,
											"end": 12828,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 12803,
											"end": 12828,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 12803,
											"end": 12838,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 12803,
											"end": 12838,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 12852,
											"end": 12918,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 12852,
											"end": 12918,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 12852,
											"end": 12918,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 12852,
											"end": 12918,
											"name": "OR",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12902,
											"end": 12917,
											"name": "TIMESTAMP",
											"source": 12
										},
										{
											"begin": 12852,
											"end": 12918,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 12852,
											"end": 12918,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 12852,
											"end": 12918,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 12852,
											"end": 12918,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 12852,
											"end": 12918,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 12852,
											"end": 12918,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 12852,
											"end": 12918,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 12852,
											"end": 12918,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 12852,
											"end": 12918,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 12852,
											"end": 12918,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 12803,
											"end": 12828,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 12996,
											"end": 13019,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 12996,
											"end": 13019,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 12996,
											"end": 13019,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 13038,
											"end": 13042,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 13038,
											"end": 13061,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 13038,
											"end": 13061,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 13038,
											"end": 13061,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "440"
										},
										{
											"begin": 13038,
											"end": 13061,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 13046,
											"end": 13059,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 13046,
											"end": 13059,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1702,
											"end": 1721,
											"name": "EXTCODESIZE",
											"source": 4
										},
										{
											"begin": 1702,
											"end": 1725,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1702,
											"end": 1725,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 13046,
											"end": 13061,
											"name": "tag",
											"source": 12,
											"value": "440"
										},
										{
											"begin": 13046,
											"end": 13061,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13034,
											"end": 13662,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 13034,
											"end": 13662,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "441"
										},
										{
											"begin": 13034,
											"end": 13662,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 13081,
											"end": 13390,
											"name": "tag",
											"source": 12,
											"value": "442"
										},
										{
											"begin": 13081,
											"end": 13390,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13111,
											"end": 13149,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 13111,
											"end": 13149,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 13136,
											"end": 13148,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 13136,
											"end": 13148,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 13111,
											"end": 13149,
											"name": "DUP10",
											"source": 12
										},
										{
											"begin": 13111,
											"end": 13149,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 13111,
											"end": 13149,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13128,
											"end": 13129,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 13128,
											"end": 13129,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13111,
											"end": 13149,
											"name": "PUSH",
											"source": 12,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 13111,
											"end": 13149,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13128,
											"end": 13129,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 13128,
											"end": 13129,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13111,
											"end": 13149,
											"name": "LOG4",
											"source": 12
										},
										{
											"begin": 13176,
											"end": 13245,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "445"
										},
										{
											"begin": 13215,
											"end": 13216,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 13219,
											"end": 13221,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 13223,
											"end": 13237,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 13223,
											"end": 13237,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 13223,
											"end": 13237,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 13223,
											"end": 13237,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 13223,
											"end": 13237,
											"name": "SWAP6",
											"source": 12
										},
										{
											"begin": 13223,
											"end": 13237,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13239,
											"end": 13244,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 13176,
											"end": 13206,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "293"
										},
										{
											"begin": 13176,
											"end": 13245,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 13176,
											"end": 13245,
											"name": "tag",
											"source": 12,
											"value": "445"
										},
										{
											"begin": 13176,
											"end": 13245,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13171,
											"end": 13343,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "446"
										},
										{
											"begin": 13171,
											"end": 13343,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 13280,
											"end": 13320,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 13280,
											"end": 13320,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "68D2BF6B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 13280,
											"end": 13320,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 13280,
											"end": 13320,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 13280,
											"end": 13320,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 13280,
											"end": 13320,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 13280,
											"end": 13320,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 13280,
											"end": 13320,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 13280,
											"end": 13320,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 13280,
											"end": 13320,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 13280,
											"end": 13320,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 13280,
											"end": 13320,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13280,
											"end": 13320,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 13171,
											"end": 13343,
											"name": "tag",
											"source": 12,
											"value": "446"
										},
										{
											"begin": 13171,
											"end": 13343,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13385,
											"end": 13388,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 13369,
											"end": 13381,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 13369,
											"end": 13388,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 13081,
											"end": 13390,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "442"
										},
										{
											"begin": 13081,
											"end": 13390,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 13469,
											"end": 13481,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 13452,
											"end": 13465,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 13452,
											"end": 13465,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 13452,
											"end": 13481,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 13448,
											"end": 13491,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "447"
										},
										{
											"begin": 13448,
											"end": 13491,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 13483,
											"end": 13491,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 13483,
											"end": 13491,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 13483,
											"end": 13491,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 13448,
											"end": 13491,
											"name": "tag",
											"source": 12,
											"value": "447"
										},
										{
											"begin": 13448,
											"end": 13491,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13034,
											"end": 13662,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "448"
										},
										{
											"begin": 13034,
											"end": 13662,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 13034,
											"end": 13662,
											"name": "tag",
											"source": 12,
											"value": "441"
										},
										{
											"begin": 13034,
											"end": 13662,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13530,
											"end": 13648,
											"name": "tag",
											"source": 12,
											"value": "449"
										},
										{
											"begin": 13530,
											"end": 13648,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13560,
											"end": 13600,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 13560,
											"end": 13600,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 13585,
											"end": 13599,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 13585,
											"end": 13599,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 13585,
											"end": 13599,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 13585,
											"end": 13599,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 13585,
											"end": 13599,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 13560,
											"end": 13600,
											"name": "DUP10",
											"source": 12
										},
										{
											"begin": 13560,
											"end": 13600,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 13560,
											"end": 13600,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13577,
											"end": 13578,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 13577,
											"end": 13578,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13560,
											"end": 13600,
											"name": "PUSH",
											"source": 12,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 13560,
											"end": 13600,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13577,
											"end": 13578,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 13577,
											"end": 13578,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13560,
											"end": 13600,
											"name": "LOG4",
											"source": 12
										},
										{
											"begin": 13643,
											"end": 13646,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 13627,
											"end": 13639,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 13627,
											"end": 13646,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 13530,
											"end": 13648,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "449"
										},
										{
											"begin": 13530,
											"end": 13648,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 13034,
											"end": 13662,
											"name": "tag",
											"source": 12,
											"value": "448"
										},
										{
											"begin": 13034,
											"end": 13662,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 13675,
											"end": 13688,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 13675,
											"end": 13703,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 13723,
											"end": 13783,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "341"
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 14,
											"end": 145,
											"name": "tag",
											"source": 14,
											"value": "453"
										},
										{
											"begin": 14,
											"end": 145,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 88,
											"end": 120,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 88,
											"end": 120,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 78,
											"end": 121,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 78,
											"end": 121,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 68,
											"end": 139,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "261"
										},
										{
											"begin": 68,
											"end": 139,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 135,
											"end": 136,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 132,
											"end": 133,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 125,
											"end": 137,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 150,
											"end": 395,
											"name": "tag",
											"source": 14,
											"value": "42"
										},
										{
											"begin": 150,
											"end": 395,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 208,
											"end": 214,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 261,
											"end": 263,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 249,
											"end": 258,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 240,
											"end": 247,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 236,
											"end": 259,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 232,
											"end": 264,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 229,
											"end": 281,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 229,
											"end": 281,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "462"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 277,
											"end": 278,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 274,
											"end": 275,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 267,
											"end": 279,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 229,
											"end": 281,
											"name": "tag",
											"source": 14,
											"value": "462"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 316,
											"end": 325,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 303,
											"end": 326,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 335,
											"end": 365,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "301"
										},
										{
											"begin": 359,
											"end": 364,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 335,
											"end": 365,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "453"
										},
										{
											"begin": 335,
											"end": 365,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 592,
											"end": 772,
											"name": "tag",
											"source": 14,
											"value": "49"
										},
										{
											"begin": 592,
											"end": 772,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 651,
											"end": 657,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 704,
											"end": 706,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 692,
											"end": 701,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 683,
											"end": 690,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 679,
											"end": 702,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 675,
											"end": 707,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 672,
											"end": 724,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 672,
											"end": 724,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "466"
										},
										{
											"begin": 672,
											"end": 724,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 720,
											"end": 721,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 717,
											"end": 718,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 710,
											"end": 722,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 672,
											"end": 724,
											"name": "tag",
											"source": 14,
											"value": "466"
										},
										{
											"begin": 672,
											"end": 724,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 743,
											"end": 766,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 743,
											"end": 766,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 592,
											"end": 772,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 592,
											"end": 772,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 959,
											"end": 1209,
											"name": "tag",
											"source": 14,
											"value": "454"
										},
										{
											"begin": 959,
											"end": 1209,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1044,
											"end": 1045,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1054,
											"end": 1167,
											"name": "tag",
											"source": 14,
											"value": "469"
										},
										{
											"begin": 1054,
											"end": 1167,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1068,
											"end": 1074,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 1065,
											"end": 1066,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1062,
											"end": 1075,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 1054,
											"end": 1167,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1054,
											"end": 1167,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "471"
										},
										{
											"begin": 1054,
											"end": 1167,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1144,
											"end": 1155,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1144,
											"end": 1155,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1144,
											"end": 1155,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1138,
											"end": 1156,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 1125,
											"end": 1136,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 1125,
											"end": 1136,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 1125,
											"end": 1136,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1118,
											"end": 1157,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1090,
											"end": 1092,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1083,
											"end": 1093,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1054,
											"end": 1167,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "469"
										},
										{
											"begin": 1054,
											"end": 1167,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 1054,
											"end": 1167,
											"name": "tag",
											"source": 14,
											"value": "471"
										},
										{
											"begin": 1054,
											"end": 1167,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1201,
											"end": 1202,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1183,
											"end": 1199,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 1183,
											"end": 1199,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1176,
											"end": 1203,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 959,
											"end": 1209,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 1214,
											"end": 1485,
											"name": "tag",
											"source": 14,
											"value": "455"
										},
										{
											"begin": 1214,
											"end": 1485,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1256,
											"end": 1259,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1294,
											"end": 1299,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1288,
											"end": 1300,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 1321,
											"end": 1327,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1316,
											"end": 1319,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 1309,
											"end": 1328,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1337,
											"end": 1413,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "473"
										},
										{
											"begin": 1406,
											"end": 1412,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1399,
											"end": 1403,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1394,
											"end": 1397,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 1390,
											"end": 1404,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1383,
											"end": 1387,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1376,
											"end": 1381,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 1372,
											"end": 1388,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1337,
											"end": 1413,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "454"
										},
										{
											"begin": 1337,
											"end": 1413,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 1337,
											"end": 1413,
											"name": "tag",
											"source": 14,
											"value": "473"
										},
										{
											"begin": 1337,
											"end": 1413,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1467,
											"end": 1469,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 1446,
											"end": 1461,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1442,
											"end": 1471,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1433,
											"end": 1472,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 1433,
											"end": 1472,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1433,
											"end": 1472,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 1433,
											"end": 1472,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1474,
											"end": 1478,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1429,
											"end": 1479,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1429,
											"end": 1479,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 1214,
											"end": 1485,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1214,
											"end": 1485,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 1490,
											"end": 1710,
											"name": "tag",
											"source": 14,
											"value": "57"
										},
										{
											"begin": 1490,
											"end": 1710,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1639,
											"end": 1641,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1628,
											"end": 1637,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1621,
											"end": 1642,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1602,
											"end": 1606,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1659,
											"end": 1704,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "301"
										},
										{
											"begin": 1700,
											"end": 1702,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1689,
											"end": 1698,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 1685,
											"end": 1703,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1677,
											"end": 1683,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 1659,
											"end": 1704,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "455"
										},
										{
											"begin": 1659,
											"end": 1704,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 1923,
											"end": 2096,
											"name": "tag",
											"source": 14,
											"value": "456"
										},
										{
											"begin": 1923,
											"end": 2096,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1991,
											"end": 2011,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1991,
											"end": 2011,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2040,
											"end": 2071,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 2040,
											"end": 2071,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 2030,
											"end": 2072,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 2030,
											"end": 2072,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 2020,
											"end": 2090,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "478"
										},
										{
											"begin": 2020,
											"end": 2090,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 2086,
											"end": 2087,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2083,
											"end": 2084,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 2076,
											"end": 2088,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 2020,
											"end": 2090,
											"name": "tag",
											"source": 14,
											"value": "478"
										},
										{
											"begin": 2020,
											"end": 2090,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1923,
											"end": 2096,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 1923,
											"end": 2096,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1923,
											"end": 2096,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1923,
											"end": 2096,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 2101,
											"end": 2355,
											"name": "tag",
											"source": 14,
											"value": "67"
										},
										{
											"begin": 2101,
											"end": 2355,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2169,
											"end": 2175,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2177,
											"end": 2183,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 2230,
											"end": 2232,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 2218,
											"end": 2227,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 2209,
											"end": 2216,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 2205,
											"end": 2228,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 2201,
											"end": 2233,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 2198,
											"end": 2250,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 2198,
											"end": 2250,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "480"
										},
										{
											"begin": 2198,
											"end": 2250,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 2246,
											"end": 2247,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2243,
											"end": 2244,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 2236,
											"end": 2248,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 2198,
											"end": 2250,
											"name": "tag",
											"source": 14,
											"value": "480"
										},
										{
											"begin": 2198,
											"end": 2250,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2269,
											"end": 2298,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "481"
										},
										{
											"begin": 2288,
											"end": 2297,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 2269,
											"end": 2298,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "456"
										},
										{
											"begin": 2269,
											"end": 2298,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 2269,
											"end": 2298,
											"name": "tag",
											"source": 14,
											"value": "481"
										},
										{
											"begin": 2269,
											"end": 2298,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 2345,
											"end": 2347,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 2330,
											"end": 2348,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 2330,
											"end": 2348,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 2330,
											"end": 2348,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 2330,
											"end": 2348,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2317,
											"end": 2349,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 2317,
											"end": 2349,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2101,
											"end": 2355,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 2360,
											"end": 2688,
											"name": "tag",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 2360,
											"end": 2688,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2437,
											"end": 2443,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2445,
											"end": 2451,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 2453,
											"end": 2459,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2506,
											"end": 2508,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 2494,
											"end": 2503,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 2485,
											"end": 2492,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 2481,
											"end": 2504,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 2477,
											"end": 2509,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 2474,
											"end": 2526,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 2474,
											"end": 2526,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "483"
										},
										{
											"begin": 2474,
											"end": 2526,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 2522,
											"end": 2523,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2519,
											"end": 2520,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 2512,
											"end": 2524,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 2474,
											"end": 2526,
											"name": "tag",
											"source": 14,
											"value": "483"
										},
										{
											"begin": 2474,
											"end": 2526,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2545,
											"end": 2574,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "484"
										},
										{
											"begin": 2564,
											"end": 2573,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 2545,
											"end": 2574,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "456"
										},
										{
											"begin": 2545,
											"end": 2574,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 2545,
											"end": 2574,
											"name": "tag",
											"source": 14,
											"value": "484"
										},
										{
											"begin": 2545,
											"end": 2574,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2535,
											"end": 2574,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 2535,
											"end": 2574,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2593,
											"end": 2631,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "485"
										},
										{
											"begin": 2627,
											"end": 2629,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 2616,
											"end": 2625,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 2612,
											"end": 2630,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2593,
											"end": 2631,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "456"
										},
										{
											"begin": 2593,
											"end": 2631,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 2593,
											"end": 2631,
											"name": "tag",
											"source": 14,
											"value": "485"
										},
										{
											"begin": 2593,
											"end": 2631,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2583,
											"end": 2631,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 2583,
											"end": 2631,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2678,
											"end": 2680,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 2667,
											"end": 2676,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 2663,
											"end": 2681,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2650,
											"end": 2682,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 2640,
											"end": 2682,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 2640,
											"end": 2682,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2360,
											"end": 2688,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 2360,
											"end": 2688,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2360,
											"end": 2688,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 2360,
											"end": 2688,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2360,
											"end": 2688,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 2360,
											"end": 2688,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 2693,
											"end": 2879,
											"name": "tag",
											"source": 14,
											"value": "112"
										},
										{
											"begin": 2693,
											"end": 2879,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2752,
											"end": 2758,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2805,
											"end": 2807,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 2793,
											"end": 2802,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2784,
											"end": 2791,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 2780,
											"end": 2803,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 2776,
											"end": 2808,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 2773,
											"end": 2825,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 2773,
											"end": 2825,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "487"
										},
										{
											"begin": 2773,
											"end": 2825,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 2821,
											"end": 2822,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2818,
											"end": 2819,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 2811,
											"end": 2823,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 2773,
											"end": 2825,
											"name": "tag",
											"source": 14,
											"value": "487"
										},
										{
											"begin": 2773,
											"end": 2825,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2844,
											"end": 2873,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "301"
										},
										{
											"begin": 2863,
											"end": 2872,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2844,
											"end": 2873,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "456"
										},
										{
											"begin": 2844,
											"end": 2873,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 2884,
											"end": 3231,
											"name": "tag",
											"source": 14,
											"value": "129"
										},
										{
											"begin": 2884,
											"end": 3231,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2949,
											"end": 2955,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2957,
											"end": 2963,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3010,
											"end": 3012,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 2998,
											"end": 3007,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 2989,
											"end": 2996,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 2985,
											"end": 3008,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 2981,
											"end": 3013,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 2978,
											"end": 3030,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 2978,
											"end": 3030,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "490"
										},
										{
											"begin": 2978,
											"end": 3030,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 3026,
											"end": 3027,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3023,
											"end": 3024,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3016,
											"end": 3028,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 2978,
											"end": 3030,
											"name": "tag",
											"source": 14,
											"value": "490"
										},
										{
											"begin": 2978,
											"end": 3030,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3049,
											"end": 3078,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "491"
										},
										{
											"begin": 3068,
											"end": 3077,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 3049,
											"end": 3078,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "456"
										},
										{
											"begin": 3049,
											"end": 3078,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 3049,
											"end": 3078,
											"name": "tag",
											"source": 14,
											"value": "491"
										},
										{
											"begin": 3049,
											"end": 3078,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3039,
											"end": 3078,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 3039,
											"end": 3078,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3128,
											"end": 3130,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 3117,
											"end": 3126,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 3113,
											"end": 3131,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3100,
											"end": 3132,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 3175,
											"end": 3180,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3168,
											"end": 3181,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 3161,
											"end": 3182,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 3154,
											"end": 3159,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3151,
											"end": 3183,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 3141,
											"end": 3201,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "492"
										},
										{
											"begin": 3141,
											"end": 3201,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 3197,
											"end": 3198,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3194,
											"end": 3195,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3187,
											"end": 3199,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 3141,
											"end": 3201,
											"name": "tag",
											"source": 14,
											"value": "492"
										},
										{
											"begin": 3141,
											"end": 3201,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3220,
											"end": 3225,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3210,
											"end": 3225,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 3210,
											"end": 3225,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3210,
											"end": 3225,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2884,
											"end": 3231,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 2884,
											"end": 3231,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2884,
											"end": 3231,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 2884,
											"end": 3231,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 2884,
											"end": 3231,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2884,
											"end": 3231,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 3236,
											"end": 3363,
											"name": "tag",
											"source": 14,
											"value": "402"
										},
										{
											"begin": 3236,
											"end": 3363,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3297,
											"end": 3307,
											"name": "PUSH",
											"source": 14,
											"value": "4E487B71"
										},
										{
											"begin": 3292,
											"end": 3295,
											"name": "PUSH",
											"source": 14,
											"value": "E0"
										},
										{
											"begin": 3288,
											"end": 3308,
											"name": "SHL",
											"source": 14
										},
										{
											"begin": 3285,
											"end": 3286,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3278,
											"end": 3309,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3328,
											"end": 3332,
											"name": "PUSH",
											"source": 14,
											"value": "41"
										},
										{
											"begin": 3325,
											"end": 3326,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 3318,
											"end": 3333,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3352,
											"end": 3356,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 3349,
											"end": 3350,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3342,
											"end": 3357,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 3368,
											"end": 4506,
											"name": "tag",
											"source": 14,
											"value": "138"
										},
										{
											"begin": 3368,
											"end": 4506,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3463,
											"end": 3469,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3471,
											"end": 3477,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3479,
											"end": 3485,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3487,
											"end": 3493,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3540,
											"end": 3543,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 3528,
											"end": 3537,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 3519,
											"end": 3526,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 3515,
											"end": 3538,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 3511,
											"end": 3544,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 3508,
											"end": 3561,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 3508,
											"end": 3561,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "495"
										},
										{
											"begin": 3508,
											"end": 3561,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 3557,
											"end": 3558,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3554,
											"end": 3555,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3547,
											"end": 3559,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 3508,
											"end": 3561,
											"name": "tag",
											"source": 14,
											"value": "495"
										},
										{
											"begin": 3508,
											"end": 3561,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3580,
											"end": 3609,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "496"
										},
										{
											"begin": 3599,
											"end": 3608,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 3580,
											"end": 3609,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "456"
										},
										{
											"begin": 3580,
											"end": 3609,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 3580,
											"end": 3609,
											"name": "tag",
											"source": 14,
											"value": "496"
										},
										{
											"begin": 3580,
											"end": 3609,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3570,
											"end": 3609,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 3570,
											"end": 3609,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3628,
											"end": 3666,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "497"
										},
										{
											"begin": 3662,
											"end": 3664,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 3651,
											"end": 3660,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 3647,
											"end": 3665,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3628,
											"end": 3666,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "456"
										},
										{
											"begin": 3628,
											"end": 3666,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 3628,
											"end": 3666,
											"name": "tag",
											"source": 14,
											"value": "497"
										},
										{
											"begin": 3628,
											"end": 3666,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3618,
											"end": 3666,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 3618,
											"end": 3666,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3713,
											"end": 3715,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 3702,
											"end": 3711,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 3698,
											"end": 3716,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3685,
											"end": 3717,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 3675,
											"end": 3717,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 3675,
											"end": 3717,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3768,
											"end": 3770,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 3757,
											"end": 3766,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 3753,
											"end": 3771,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3740,
											"end": 3772,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 3791,
											"end": 3809,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3832,
											"end": 3834,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3824,
											"end": 3830,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3821,
											"end": 3835,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 3818,
											"end": 3852,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 3818,
											"end": 3852,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "498"
										},
										{
											"begin": 3818,
											"end": 3852,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 3848,
											"end": 3849,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3845,
											"end": 3846,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3838,
											"end": 3850,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 3818,
											"end": 3852,
											"name": "tag",
											"source": 14,
											"value": "498"
										},
										{
											"begin": 3818,
											"end": 3852,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3886,
											"end": 3892,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3875,
											"end": 3884,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 3871,
											"end": 3893,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3861,
											"end": 3893,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 3861,
											"end": 3893,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3931,
											"end": 3938,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 3924,
											"end": 3928,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 3920,
											"end": 3922,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 3916,
											"end": 3929,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3912,
											"end": 3939,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 3902,
											"end": 3957,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "499"
										},
										{
											"begin": 3902,
											"end": 3957,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 3953,
											"end": 3954,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3950,
											"end": 3951,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3943,
											"end": 3955,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 3902,
											"end": 3957,
											"name": "tag",
											"source": 14,
											"value": "499"
										},
										{
											"begin": 3902,
											"end": 3957,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3989,
											"end": 3991,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3976,
											"end": 3992,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 4011,
											"end": 4013,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4007,
											"end": 4009,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4004,
											"end": 4014,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 4001,
											"end": 4037,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 4001,
											"end": 4037,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "501"
										},
										{
											"begin": 4001,
											"end": 4037,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 4017,
											"end": 4035,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "501"
										},
										{
											"begin": 4017,
											"end": 4035,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "402"
										},
										{
											"begin": 4017,
											"end": 4035,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 4017,
											"end": 4035,
											"name": "tag",
											"source": 14,
											"value": "501"
										},
										{
											"begin": 4017,
											"end": 4035,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4092,
											"end": 4094,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 4086,
											"end": 4095,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 4060,
											"end": 4062,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 4146,
											"end": 4159,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4146,
											"end": 4159,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4142,
											"end": 4164,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4142,
											"end": 4164,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4142,
											"end": 4164,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 4166,
											"end": 4168,
											"name": "PUSH",
											"source": 14,
											"value": "3F"
										},
										{
											"begin": 4138,
											"end": 4169,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4134,
											"end": 4174,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 4122,
											"end": 4175,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4122,
											"end": 4175,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4122,
											"end": 4175,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4190,
											"end": 4208,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 4190,
											"end": 4208,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4190,
											"end": 4208,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 4210,
											"end": 4232,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4210,
											"end": 4232,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 4210,
											"end": 4232,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 4187,
											"end": 4233,
											"name": "OR",
											"source": 14
										},
										{
											"begin": 4184,
											"end": 4256,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 4184,
											"end": 4256,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "503"
										},
										{
											"begin": 4184,
											"end": 4256,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 4236,
											"end": 4254,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "503"
										},
										{
											"begin": 4236,
											"end": 4254,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "402"
										},
										{
											"begin": 4236,
											"end": 4254,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 4236,
											"end": 4254,
											"name": "tag",
											"source": 14,
											"value": "503"
										},
										{
											"begin": 4236,
											"end": 4254,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4276,
											"end": 4286,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4272,
											"end": 4274,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 4265,
											"end": 4287,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4311,
											"end": 4313,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4303,
											"end": 4309,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4296,
											"end": 4314,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4351,
											"end": 4358,
											"name": "DUP11",
											"source": 14
										},
										{
											"begin": 4346,
											"end": 4348,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4341,
											"end": 4343,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 4337,
											"end": 4339,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 4333,
											"end": 4344,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4329,
											"end": 4349,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4326,
											"end": 4359,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 4323,
											"end": 4376,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 4323,
											"end": 4376,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "504"
										},
										{
											"begin": 4323,
											"end": 4376,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 4372,
											"end": 4373,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 4369,
											"end": 4370,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 4362,
											"end": 4374,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 4323,
											"end": 4376,
											"name": "tag",
											"source": 14,
											"value": "504"
										},
										{
											"begin": 4323,
											"end": 4376,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4428,
											"end": 4430,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4423,
											"end": 4425,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4419,
											"end": 4421,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 4415,
											"end": 4426,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4410,
											"end": 4412,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4402,
											"end": 4408,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 4398,
											"end": 4413,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4385,
											"end": 4431,
											"name": "CALLDATACOPY",
											"source": 14
										},
										{
											"begin": 4473,
											"end": 4474,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 4468,
											"end": 4470,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4463,
											"end": 4465,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 4455,
											"end": 4461,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 4451,
											"end": 4466,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4447,
											"end": 4471,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4440,
											"end": 4475,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4494,
											"end": 4500,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 4484,
											"end": 4500,
											"name": "SWAP6",
											"source": 14
										},
										{
											"begin": 4484,
											"end": 4500,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4484,
											"end": 4500,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4484,
											"end": 4500,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4484,
											"end": 4500,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4484,
											"end": 4500,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4484,
											"end": 4500,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3368,
											"end": 4506,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 3368,
											"end": 4506,
											"name": "SWAP6",
											"source": 14
										},
										{
											"begin": 3368,
											"end": 4506,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 3368,
											"end": 4506,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 3368,
											"end": 4506,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3368,
											"end": 4506,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 3368,
											"end": 4506,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3368,
											"end": 4506,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 4511,
											"end": 4771,
											"name": "tag",
											"source": 14,
											"value": "171"
										},
										{
											"begin": 4511,
											"end": 4771,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4579,
											"end": 4585,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 4587,
											"end": 4593,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 4640,
											"end": 4642,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 4628,
											"end": 4637,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 4619,
											"end": 4626,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 4615,
											"end": 4638,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 4611,
											"end": 4643,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 4608,
											"end": 4660,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 4608,
											"end": 4660,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "506"
										},
										{
											"begin": 4608,
											"end": 4660,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 4656,
											"end": 4657,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 4653,
											"end": 4654,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 4646,
											"end": 4658,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 4608,
											"end": 4660,
											"name": "tag",
											"source": 14,
											"value": "506"
										},
										{
											"begin": 4608,
											"end": 4660,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4679,
											"end": 4708,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "507"
										},
										{
											"begin": 4698,
											"end": 4707,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 4679,
											"end": 4708,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "456"
										},
										{
											"begin": 4679,
											"end": 4708,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 4679,
											"end": 4708,
											"name": "tag",
											"source": 14,
											"value": "507"
										},
										{
											"begin": 4679,
											"end": 4708,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4669,
											"end": 4708,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 4669,
											"end": 4708,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4727,
											"end": 4765,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "508"
										},
										{
											"begin": 4761,
											"end": 4763,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4750,
											"end": 4759,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 4746,
											"end": 4764,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4727,
											"end": 4765,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "456"
										},
										{
											"begin": 4727,
											"end": 4765,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 4727,
											"end": 4765,
											"name": "tag",
											"source": 14,
											"value": "508"
										},
										{
											"begin": 4727,
											"end": 4765,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4717,
											"end": 4765,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4717,
											"end": 4765,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4511,
											"end": 4771,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 4511,
											"end": 4771,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4511,
											"end": 4771,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 4511,
											"end": 4771,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4511,
											"end": 4771,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4511,
											"end": 4771,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 4776,
											"end": 5156,
											"name": "tag",
											"source": 14,
											"value": "187"
										},
										{
											"begin": 4776,
											"end": 5156,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4855,
											"end": 4856,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 4851,
											"end": 4863,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4851,
											"end": 4863,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4851,
											"end": 4863,
											"name": "SHR",
											"source": 14
										},
										{
											"begin": 4851,
											"end": 4863,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4898,
											"end": 4910,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4898,
											"end": 4910,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 4898,
											"end": 4910,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 4919,
											"end": 4980,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "510"
										},
										{
											"begin": 4919,
											"end": 4980,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 4973,
											"end": 4977,
											"name": "PUSH",
											"source": 14,
											"value": "7F"
										},
										{
											"begin": 4965,
											"end": 4971,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4961,
											"end": 4978,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 4951,
											"end": 4978,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 4951,
											"end": 4978,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4919,
											"end": 4980,
											"name": "tag",
											"source": 14,
											"value": "510"
										},
										{
											"begin": 4919,
											"end": 4980,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5026,
											"end": 5028,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 5018,
											"end": 5024,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5015,
											"end": 5029,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 4995,
											"end": 5013,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4992,
											"end": 5030,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 4989,
											"end": 5150,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "511"
										},
										{
											"begin": 4989,
											"end": 5150,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 5072,
											"end": 5082,
											"name": "PUSH",
											"source": 14,
											"value": "4E487B71"
										},
										{
											"begin": 5067,
											"end": 5070,
											"name": "PUSH",
											"source": 14,
											"value": "E0"
										},
										{
											"begin": 5063,
											"end": 5083,
											"name": "SHL",
											"source": 14
										},
										{
											"begin": 5060,
											"end": 5061,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5053,
											"end": 5084,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5107,
											"end": 5111,
											"name": "PUSH",
											"source": 14,
											"value": "22"
										},
										{
											"begin": 5104,
											"end": 5105,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 5097,
											"end": 5112,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5135,
											"end": 5139,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 5132,
											"end": 5133,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5125,
											"end": 5140,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 4989,
											"end": 5150,
											"name": "tag",
											"source": 14,
											"value": "511"
										},
										{
											"begin": 4989,
											"end": 5150,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4989,
											"end": 5150,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4776,
											"end": 5156,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 4776,
											"end": 5156,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4776,
											"end": 5156,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4776,
											"end": 5156,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 5853,
											"end": 5980,
											"name": "tag",
											"source": 14,
											"value": "457"
										},
										{
											"begin": 5853,
											"end": 5980,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5914,
											"end": 5924,
											"name": "PUSH",
											"source": 14,
											"value": "4E487B71"
										},
										{
											"begin": 5909,
											"end": 5912,
											"name": "PUSH",
											"source": 14,
											"value": "E0"
										},
										{
											"begin": 5905,
											"end": 5925,
											"name": "SHL",
											"source": 14
										},
										{
											"begin": 5902,
											"end": 5903,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5895,
											"end": 5926,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5945,
											"end": 5949,
											"name": "PUSH",
											"source": 14,
											"value": "11"
										},
										{
											"begin": 5942,
											"end": 5943,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 5935,
											"end": 5950,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5969,
											"end": 5973,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 5966,
											"end": 5967,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5959,
											"end": 5974,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 5985,
											"end": 6153,
											"name": "tag",
											"source": 14,
											"value": "228"
										},
										{
											"begin": 5985,
											"end": 6153,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6058,
											"end": 6067,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 6058,
											"end": 6067,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6058,
											"end": 6067,
											"name": "MUL",
											"source": 14
										},
										{
											"begin": 6089,
											"end": 6098,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6089,
											"end": 6098,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 6106,
											"end": 6121,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6106,
											"end": 6121,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6106,
											"end": 6121,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 6100,
											"end": 6122,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 6100,
											"end": 6122,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 6086,
											"end": 6123,
											"name": "OR",
											"source": 14
										},
										{
											"begin": 6076,
											"end": 6147,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "181"
										},
										{
											"begin": 6076,
											"end": 6147,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 6127,
											"end": 6145,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "181"
										},
										{
											"begin": 6127,
											"end": 6145,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "457"
										},
										{
											"begin": 6127,
											"end": 6145,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 6504,
											"end": 6629,
											"name": "tag",
											"source": 14,
											"value": "235"
										},
										{
											"begin": 6504,
											"end": 6629,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6569,
											"end": 6578,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 6569,
											"end": 6578,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6569,
											"end": 6578,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6590,
											"end": 6600,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 6590,
											"end": 6600,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6590,
											"end": 6600,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 6587,
											"end": 6623,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 6587,
											"end": 6623,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "181"
										},
										{
											"begin": 6587,
											"end": 6623,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 6603,
											"end": 6621,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "181"
										},
										{
											"begin": 6603,
											"end": 6621,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "457"
										},
										{
											"begin": 6603,
											"end": 6621,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7326,
											"end": 7454,
											"name": "tag",
											"source": 14,
											"value": "251"
										},
										{
											"begin": 7326,
											"end": 7454,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7393,
											"end": 7402,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 7393,
											"end": 7402,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 7393,
											"end": 7402,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 7414,
											"end": 7425,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 7414,
											"end": 7425,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 7414,
											"end": 7425,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 7411,
											"end": 7448,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 7411,
											"end": 7448,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "181"
										},
										{
											"begin": 7411,
											"end": 7448,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 7428,
											"end": 7446,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "181"
										},
										{
											"begin": 7428,
											"end": 7446,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "457"
										},
										{
											"begin": 7428,
											"end": 7446,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7459,
											"end": 7594,
											"name": "tag",
											"source": 14,
											"value": "253"
										},
										{
											"begin": 7459,
											"end": 7594,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7498,
											"end": 7501,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 7519,
											"end": 7536,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 7519,
											"end": 7536,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7519,
											"end": 7536,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7516,
											"end": 7559,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "529"
										},
										{
											"begin": 7516,
											"end": 7559,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 7539,
											"end": 7557,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "529"
										},
										{
											"begin": 7539,
											"end": 7557,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "457"
										},
										{
											"begin": 7539,
											"end": 7557,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7539,
											"end": 7557,
											"name": "tag",
											"source": 14,
											"value": "529"
										},
										{
											"begin": 7539,
											"end": 7557,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7586,
											"end": 7587,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 7575,
											"end": 7588,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7575,
											"end": 7588,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 7459,
											"end": 7594,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7959,
											"end": 8455,
											"name": "tag",
											"source": 14,
											"value": "305"
										},
										{
											"begin": 7959,
											"end": 8455,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 8138,
											"end": 8141,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 8176,
											"end": 8182,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 8170,
											"end": 8183,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 8192,
											"end": 8258,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "532"
										},
										{
											"begin": 8251,
											"end": 8257,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 8246,
											"end": 8249,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 8239,
											"end": 8243,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 8231,
											"end": 8237,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 8227,
											"end": 8244,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8192,
											"end": 8258,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "454"
										},
										{
											"begin": 8192,
											"end": 8258,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 8192,
											"end": 8258,
											"name": "tag",
											"source": 14,
											"value": "532"
										},
										{
											"begin": 8192,
											"end": 8258,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 8321,
											"end": 8334,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 8321,
											"end": 8334,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 8280,
											"end": 8296,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 8280,
											"end": 8296,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 8280,
											"end": 8296,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8280,
											"end": 8296,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 8343,
											"end": 8413,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "533"
										},
										{
											"begin": 8321,
											"end": 8334,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 8280,
											"end": 8296,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 8390,
											"end": 8394,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 8378,
											"end": 8395,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 8378,
											"end": 8395,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8343,
											"end": 8413,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "454"
										},
										{
											"begin": 8343,
											"end": 8413,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 8343,
											"end": 8413,
											"name": "tag",
											"source": 14,
											"value": "533"
										},
										{
											"begin": 8343,
											"end": 8413,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 8429,
											"end": 8449,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8429,
											"end": 8449,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 7959,
											"end": 8455,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7959,
											"end": 8455,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 10223,
											"end": 10712,
											"name": "tag",
											"source": 14,
											"value": "383"
										},
										{
											"begin": 10223,
											"end": 10712,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10492,
											"end": 10507,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 10492,
											"end": 10507,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 10492,
											"end": 10507,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 10474,
											"end": 10508,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10474,
											"end": 10508,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10544,
											"end": 10559,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 10544,
											"end": 10559,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 10539,
											"end": 10541,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 10524,
											"end": 10542,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10524,
											"end": 10542,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10517,
											"end": 10560,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10591,
											"end": 10593,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 10576,
											"end": 10594,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 10576,
											"end": 10594,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10569,
											"end": 10603,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 10569,
											"end": 10603,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 10569,
											"end": 10603,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10639,
											"end": 10642,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 10634,
											"end": 10636,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 10619,
											"end": 10637,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10619,
											"end": 10637,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10612,
											"end": 10643,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 10612,
											"end": 10643,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 10612,
											"end": 10643,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10417,
											"end": 10421,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 10417,
											"end": 10421,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 10660,
											"end": 10706,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "540"
										},
										{
											"begin": 10660,
											"end": 10706,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 10686,
											"end": 10705,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 10686,
											"end": 10705,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10678,
											"end": 10684,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 10660,
											"end": 10706,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "455"
										},
										{
											"begin": 10660,
											"end": 10706,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 10660,
											"end": 10706,
											"name": "tag",
											"source": 14,
											"value": "540"
										},
										{
											"begin": 10660,
											"end": 10706,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 10652,
											"end": 10706,
											"name": "SWAP7",
											"source": 14
										},
										{
											"begin": 10223,
											"end": 10712,
											"name": "SWAP6",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10223,
											"end": 10712,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 10717,
											"end": 10966,
											"name": "tag",
											"source": 14,
											"value": "386"
										},
										{
											"begin": 10717,
											"end": 10966,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 10786,
											"end": 10792,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 10839,
											"end": 10841,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 10827,
											"end": 10836,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10818,
											"end": 10825,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 10814,
											"end": 10837,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 10810,
											"end": 10842,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 10807,
											"end": 10859,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 10807,
											"end": 10859,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "542"
										},
										{
											"begin": 10807,
											"end": 10859,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 10855,
											"end": 10856,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 10852,
											"end": 10853,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 10845,
											"end": 10857,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 10807,
											"end": 10859,
											"name": "tag",
											"source": 14,
											"value": "542"
										},
										{
											"begin": 10807,
											"end": 10859,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 10887,
											"end": 10896,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 10881,
											"end": 10897,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 10906,
											"end": 10936,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "301"
										},
										{
											"begin": 10930,
											"end": 10935,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 10906,
											"end": 10936,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "453"
										},
										{
											"begin": 10906,
											"end": 10936,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										}
									],
									".data": {
										"BAD8C5B7513EFA3484AFF4751176E1559E99E0AAC6100695FA19AFECC4F7431D": "697066733a2f2f516d62736552544a5753734c666873695777754232523745744e39335478666f614d7a31533546587473464555422f"
									}
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
								"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/introspection/ERC165.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/ERC-721AWRefund.sol",
								"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol",
								"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/IERC721R.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"getRefundAmount(uint256)": "04cd5294",
							"getRefundDeadline(uint256)": "e5496fc8",
							"hasRefunded(uint256)": "c23fcdef",
							"isApprovedForAll(address,address)": "e985e9c5",
							"maxMintPerUser()": "d304c4bc",
							"maxMintSupply()": "c285e107",
							"mintPrice()": "6817c76c",
							"name()": "06fdde03",
							"owner()": "8da5cb5b",
							"ownerOf(uint256)": "6352211e",
							"refund(uint256)": "278ecde1",
							"refundAddress()": "0cb61f6c",
							"refundEndTimeStamp()": "6f1d10ce",
							"refundEndTimestamps(uint256)": "d64297f9",
							"refundPeriod()": "a6a3b5b4",
							"renounceOwnership()": "715018a6",
							"safeMint(uint256)": "31c864e8",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"totalSupply()": "18160ddd",
							"transferFrom(address,address,uint256)": "23b872dd",
							"transferOwnership(address)": "f2fde38b",
							"withdraw()": "3ccfd60b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRefundAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRefundDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hasRefunded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundEndTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"refundEndTimestamps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC-721AWRefund.sol\":\"Web3Builders\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fc980984badf3984b6303b377711220e067722bbd6a135b24669ff5069ef9f32\",\"dweb:/ipfs/QmPHXMSXj99XjSVM21YsY6aNtLLjLVXDbyN76J5HQYvvrz\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708\",\"dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931\",\"dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b81d9ff6559ea5c47fc573e17ece6d9ba5d6839e213e6ebc3b4c5c8fe4199d7f\",\"dweb:/ipfs/QmPCW1bFisUzJkyjroY3yipwfism9RRCigCcK1hbXtVM8n\"]},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c\",\"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7\",\"dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6\"]},\"contracts/ERC-721AWRefund.sol\":{\"keccak256\":\"0x150f4058246208e072c39cb5ef25d0f15547fbfa19614909b2734f228c1472f6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef626d010fa1cba59878f4853a230b96312e395b9319f3fe85ad9f7bd40acf9a\",\"dweb:/ipfs/QmWmVvAEAunvBxk413KqZk5m1PC9qv5mMj3ktermtvEyf1\"]},\"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":{\"keccak256\":\"0x738d86ea38f9edfe777a7334e1d51901d7664cbc55d3c1024301004861198340\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0391831504205678c81d091d9ae1dcf159be092de1cbc3364f85ff3d0f766bb\",\"dweb:/ipfs/QmXupsaarsrtF63dBRi9cFrSGxnwK4HdCFp4F72QtwsPzq\"]},\"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/IERC721R.sol\":{\"keccak256\":\"0x199b2202de80f5383c594362d9df792caeae9f73ff002b2be586f6bb23beedac\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2daf9185bcd500f31c0f717efb94b6fe37a0b4539394859329e23dcf7460591d\",\"dweb:/ipfs/QmfHAzNroMo2kFD1293VnhPXuQCxMX1UHiWWyc4REAe32s\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 2188,
								"contract": "contracts/ERC-721AWRefund.sol:Web3Builders",
								"label": "_currentIndex",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							},
							{
								"astId": 2190,
								"contract": "contracts/ERC-721AWRefund.sol:Web3Builders",
								"label": "_burnCounter",
								"offset": 0,
								"slot": "1",
								"type": "t_uint256"
							},
							{
								"astId": 2192,
								"contract": "contracts/ERC-721AWRefund.sol:Web3Builders",
								"label": "_name",
								"offset": 0,
								"slot": "2",
								"type": "t_string_storage"
							},
							{
								"astId": 2194,
								"contract": "contracts/ERC-721AWRefund.sol:Web3Builders",
								"label": "_symbol",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 2199,
								"contract": "contracts/ERC-721AWRefund.sol:Web3Builders",
								"label": "_ownerships",
								"offset": 0,
								"slot": "4",
								"type": "t_mapping(t_uint256,t_struct(TokenOwnership)2177_storage)"
							},
							{
								"astId": 2204,
								"contract": "contracts/ERC-721AWRefund.sol:Web3Builders",
								"label": "_addressData",
								"offset": 0,
								"slot": "5",
								"type": "t_mapping(t_address,t_struct(AddressData)2186_storage)"
							},
							{
								"astId": 2208,
								"contract": "contracts/ERC-721AWRefund.sol:Web3Builders",
								"label": "_tokenApprovals",
								"offset": 0,
								"slot": "6",
								"type": "t_mapping(t_uint256,t_address)"
							},
							{
								"astId": 2214,
								"contract": "contracts/ERC-721AWRefund.sol:Web3Builders",
								"label": "_operatorApprovals",
								"offset": 0,
								"slot": "7",
								"type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
							},
							{
								"astId": 7,
								"contract": "contracts/ERC-721AWRefund.sol:Web3Builders",
								"label": "_owner",
								"offset": 0,
								"slot": "8",
								"type": "t_address"
							},
							{
								"astId": 1884,
								"contract": "contracts/ERC-721AWRefund.sol:Web3Builders",
								"label": "refundEndTimeStamp",
								"offset": 0,
								"slot": "9",
								"type": "t_uint256"
							},
							{
								"astId": 1886,
								"contract": "contracts/ERC-721AWRefund.sol:Web3Builders",
								"label": "refundAddress",
								"offset": 0,
								"slot": "10",
								"type": "t_address"
							},
							{
								"astId": 1890,
								"contract": "contracts/ERC-721AWRefund.sol:Web3Builders",
								"label": "refundEndTimestamps",
								"offset": 0,
								"slot": "11",
								"type": "t_mapping(t_uint256,t_uint256)"
							},
							{
								"astId": 1894,
								"contract": "contracts/ERC-721AWRefund.sol:Web3Builders",
								"label": "hasRefunded",
								"offset": 0,
								"slot": "12",
								"type": "t_mapping(t_uint256,t_bool)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_address,t_mapping(t_address,t_bool))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => bool))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_bool)"
							},
							"t_mapping(t_address,t_struct(AddressData)2186_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct ERC721A.AddressData)",
								"numberOfBytes": "32",
								"value": "t_struct(AddressData)2186_storage"
							},
							"t_mapping(t_uint256,t_address)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => address)",
								"numberOfBytes": "32",
								"value": "t_address"
							},
							"t_mapping(t_uint256,t_bool)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_uint256,t_struct(TokenOwnership)2177_storage)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => struct ERC721A.TokenOwnership)",
								"numberOfBytes": "32",
								"value": "t_struct(TokenOwnership)2177_storage"
							},
							"t_mapping(t_uint256,t_uint256)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_struct(AddressData)2186_storage": {
								"encoding": "inplace",
								"label": "struct ERC721A.AddressData",
								"members": [
									{
										"astId": 2179,
										"contract": "contracts/ERC-721AWRefund.sol:Web3Builders",
										"label": "balance",
										"offset": 0,
										"slot": "0",
										"type": "t_uint64"
									},
									{
										"astId": 2181,
										"contract": "contracts/ERC-721AWRefund.sol:Web3Builders",
										"label": "numberMinted",
										"offset": 8,
										"slot": "0",
										"type": "t_uint64"
									},
									{
										"astId": 2183,
										"contract": "contracts/ERC-721AWRefund.sol:Web3Builders",
										"label": "numberBurned",
										"offset": 16,
										"slot": "0",
										"type": "t_uint64"
									},
									{
										"astId": 2185,
										"contract": "contracts/ERC-721AWRefund.sol:Web3Builders",
										"label": "aux",
										"offset": 24,
										"slot": "0",
										"type": "t_uint64"
									}
								],
								"numberOfBytes": "32"
							},
							"t_struct(TokenOwnership)2177_storage": {
								"encoding": "inplace",
								"label": "struct ERC721A.TokenOwnership",
								"members": [
									{
										"astId": 2172,
										"contract": "contracts/ERC-721AWRefund.sol:Web3Builders",
										"label": "addr",
										"offset": 0,
										"slot": "0",
										"type": "t_address"
									},
									{
										"astId": 2174,
										"contract": "contracts/ERC-721AWRefund.sol:Web3Builders",
										"label": "startTimestamp",
										"offset": 20,
										"slot": "0",
										"type": "t_uint64"
									},
									{
										"astId": 2176,
										"contract": "contracts/ERC-721AWRefund.sol:Web3Builders",
										"label": "burned",
										"offset": 28,
										"slot": "0",
										"type": "t_bool"
									}
								],
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint64": {
								"encoding": "inplace",
								"label": "uint64",
								"numberOfBytes": "8"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol": {
				"ERC721A": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "name_",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol_",
									"type": "string"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "ApprovalCallerNotOwnerNorApproved",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ApprovalQueryForNonexistentToken",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ApprovalToCurrentOwner",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ApproveToCaller",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "BalanceQueryForZeroAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "OwnerQueryForNonexistentToken",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferCallerNotOwnerNorApproved",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferFromIncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferToNonERC721ReceiverImplementer",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferToZeroAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "URIQueryForNonexistentToken",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension. Built to optimize for lower gas during batch mints. Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..). Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply. Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "See {IERC721-approve}."
							},
							"balanceOf(address)": {
								"details": "See {IERC721-balanceOf}."
							},
							"getApproved(uint256)": {
								"details": "See {IERC721-getApproved}."
							},
							"isApprovedForAll(address,address)": {
								"details": "See {IERC721-isApprovedForAll}."
							},
							"name()": {
								"details": "See {IERC721Metadata-name}."
							},
							"ownerOf(uint256)": {
								"details": "See {IERC721-ownerOf}."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "See {IERC721-safeTransferFrom}."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "See {IERC721-safeTransferFrom}."
							},
							"setApprovalForAll(address,bool)": {
								"details": "See {IERC721-setApprovalForAll}."
							},
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							},
							"symbol()": {
								"details": "See {IERC721Metadata-symbol}."
							},
							"tokenURI(uint256)": {
								"details": "See {IERC721Metadata-tokenURI}."
							},
							"totalSupply()": {
								"details": "Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC721-transferFrom}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":1515:21866  contract ERC721A is Context, ERC165, IERC721, IERC721Metadata {... */\n  mstore(0x40, 0x80)\n    /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":3413:3567  constructor(string memory name_, string memory symbol_) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":3479:3484  _name */\n  0x02\n    /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":3479:3492  _name = name_ */\n  tag_6\n    /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":3487:3492  name_ */\n  dup4\n    /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":3479:3484  _name */\n  dup3\n    /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":3479:3492  _name = name_ */\n  tag_7\n  jump\t// in\ntag_6:\n  pop\n    /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":3502:3509  _symbol */\n  0x03\n    /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":3502:3519  _symbol = symbol_ */\n  tag_8\n    /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":3512:3519  symbol_ */\n  dup3\n    /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":3502:3509  _symbol */\n  dup3\n    /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":3502:3519  _symbol = symbol_ */\n  tag_7\n  jump\t// in\ntag_8:\n  pop\n  pop\n    /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":3715:3722  uint256 */\n  0x00\n    /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":3529:3560  _currentIndex = _startTokenId() */\n  dup1\n  sstore\n  pop\n    /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":1515:21866  contract ERC721A is Context, ERC165, IERC721, IERC721Metadata {... */\n  jump(tag_19)\n    /* \"#utility.yul\":14:141   */\ntag_13:\n    /* \"#utility.yul\":75:85   */\n  0x4e487b71\n    /* \"#utility.yul\":70:73   */\n  0xe0\n    /* \"#utility.yul\":66:86   */\n  shl\n    /* \"#utility.yul\":63:64   */\n  0x00\n    /* \"#utility.yul\":56:87   */\n  mstore\n    /* \"#utility.yul\":106:110   */\n  0x41\n    /* \"#utility.yul\":103:104   */\n  0x04\n    /* \"#utility.yul\":96:111   */\n  mstore\n    /* \"#utility.yul\":130:134   */\n  0x24\n    /* \"#utility.yul\":127:128   */\n  0x00\n    /* \"#utility.yul\":120:135   */\n  revert\n    /* \"#utility.yul\":146:986   */\ntag_14:\n    /* \"#utility.yul\":200:205   */\n  0x00\n    /* \"#utility.yul\":253:256   */\n  dup3\n    /* \"#utility.yul\":246:250   */\n  0x1f\n    /* \"#utility.yul\":238:244   */\n  dup4\n    /* \"#utility.yul\":234:251   */\n  add\n    /* \"#utility.yul\":230:257   */\n  slt\n    /* \"#utility.yul\":220:275   */\n  tag_22\n  jumpi\n    /* \"#utility.yul\":271:272   */\n  0x00\n    /* \"#utility.yul\":268:269   */\n  dup1\n    /* \"#utility.yul\":261:273   */\n  revert\n    /* \"#utility.yul\":220:275   */\ntag_22:\n    /* \"#utility.yul\":294:307   */\n  dup2\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":356:366   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":353:389   */\n  iszero\n  tag_24\n  jumpi\n    /* \"#utility.yul\":369:387   */\n  tag_24\n  tag_13\n  jump\t// in\ntag_24:\n    /* \"#utility.yul\":444:446   */\n  0x40\n    /* \"#utility.yul\":438:447   */\n  mload\n    /* \"#utility.yul\":412:414   */\n  0x1f\n    /* \"#utility.yul\":498:511   */\n  dup4\n  add\n  not(0x1f)\n    /* \"#utility.yul\":494:516   */\n  swap1\n  dup2\n  and\n    /* \"#utility.yul\":518:520   */\n  0x3f\n    /* \"#utility.yul\":490:521   */\n  add\n    /* \"#utility.yul\":486:526   */\n  and\n    /* \"#utility.yul\":474:527   */\n  dup2\n  add\n  swap1\n    /* \"#utility.yul\":542:560   */\n  dup3\n  dup3\n  gt\n    /* \"#utility.yul\":562:584   */\n  dup2\n  dup4\n  lt\n    /* \"#utility.yul\":539:585   */\n  or\n    /* \"#utility.yul\":536:608   */\n  iszero\n  tag_26\n  jumpi\n    /* \"#utility.yul\":588:606   */\n  tag_26\n  tag_13\n  jump\t// in\ntag_26:\n    /* \"#utility.yul\":628:638   */\n  dup2\n    /* \"#utility.yul\":624:626   */\n  0x40\n    /* \"#utility.yul\":617:639   */\n  mstore\n    /* \"#utility.yul\":663:665   */\n  dup4\n    /* \"#utility.yul\":655:661   */\n  dup2\n    /* \"#utility.yul\":648:666   */\n  mstore\n    /* \"#utility.yul\":685:689   */\n  0x20\n    /* \"#utility.yul\":675:689   */\n  swap3\n  pop\n    /* \"#utility.yul\":730:733   */\n  dup7\n    /* \"#utility.yul\":725:727   */\n  dup4\n    /* \"#utility.yul\":720:722   */\n  dup6\n    /* \"#utility.yul\":712:718   */\n  dup9\n    /* \"#utility.yul\":708:723   */\n  add\n    /* \"#utility.yul\":704:728   */\n  add\n    /* \"#utility.yul\":701:734   */\n  gt\n    /* \"#utility.yul\":698:751   */\n  iszero\n  tag_27\n  jumpi\n    /* \"#utility.yul\":747:748   */\n  0x00\n    /* \"#utility.yul\":744:745   */\n  dup1\n    /* \"#utility.yul\":737:749   */\n  revert\n    /* \"#utility.yul\":698:751   */\ntag_27:\n    /* \"#utility.yul\":769:770   */\n  0x00\n    /* \"#utility.yul\":760:770   */\n  swap2\n  pop\n    /* \"#utility.yul\":779:912   */\ntag_28:\n    /* \"#utility.yul\":793:795   */\n  dup4\n    /* \"#utility.yul\":790:791   */\n  dup3\n    /* \"#utility.yul\":787:796   */\n  lt\n    /* \"#utility.yul\":779:912   */\n  iszero\n  tag_30\n  jumpi\n    /* \"#utility.yul\":881:895   */\n  dup6\n  dup3\n  add\n    /* \"#utility.yul\":877:900   */\n  dup4\n  add\n    /* \"#utility.yul\":871:901   */\n  mload\n    /* \"#utility.yul\":850:864   */\n  dup2\n  dup4\n  add\n    /* \"#utility.yul\":846:869   */\n  dup5\n  add\n    /* \"#utility.yul\":839:902   */\n  mstore\n    /* \"#utility.yul\":804:814   */\n  swap1\n  dup3\n  add\n  swap1\n    /* \"#utility.yul\":779:912   */\n  jump(tag_28)\ntag_30:\n    /* \"#utility.yul\":954:955   */\n  0x00\n    /* \"#utility.yul\":932:947   */\n  swap4\n  dup2\n  add\n    /* \"#utility.yul\":928:952   */\n  swap1\n  swap3\n  add\n    /* \"#utility.yul\":921:956   */\n  swap3\n  swap1\n  swap3\n  mstore\n    /* \"#utility.yul\":936:942   */\n  swap5\n    /* \"#utility.yul\":146:986   */\n  swap4\n  pop\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":991:1553   */\ntag_3:\n    /* \"#utility.yul\":1090:1096   */\n  0x00\n    /* \"#utility.yul\":1098:1104   */\n  dup1\n    /* \"#utility.yul\":1151:1153   */\n  0x40\n    /* \"#utility.yul\":1139:1148   */\n  dup4\n    /* \"#utility.yul\":1130:1137   */\n  dup6\n    /* \"#utility.yul\":1126:1149   */\n  sub\n    /* \"#utility.yul\":1122:1154   */\n  slt\n    /* \"#utility.yul\":1119:1171   */\n  iszero\n  tag_32\n  jumpi\n    /* \"#utility.yul\":1167:1168   */\n  0x00\n    /* \"#utility.yul\":1164:1165   */\n  dup1\n    /* \"#utility.yul\":1157:1169   */\n  revert\n    /* \"#utility.yul\":1119:1171   */\ntag_32:\n    /* \"#utility.yul\":1194:1210   */\n  dup3\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":1259:1273   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":1256:1290   */\n  iszero\n  tag_33\n  jumpi\n    /* \"#utility.yul\":1286:1287   */\n  0x00\n    /* \"#utility.yul\":1283:1284   */\n  dup1\n    /* \"#utility.yul\":1276:1288   */\n  revert\n    /* \"#utility.yul\":1256:1290   */\ntag_33:\n    /* \"#utility.yul\":1309:1370   */\n  tag_34\n    /* \"#utility.yul\":1362:1369   */\n  dup7\n    /* \"#utility.yul\":1353:1359   */\n  dup4\n    /* \"#utility.yul\":1342:1351   */\n  dup8\n    /* \"#utility.yul\":1338:1360   */\n  add\n    /* \"#utility.yul\":1309:1370   */\n  tag_14\n  jump\t// in\ntag_34:\n    /* \"#utility.yul\":1299:1370   */\n  swap4\n  pop\n    /* \"#utility.yul\":1416:1418   */\n  0x20\n    /* \"#utility.yul\":1405:1414   */\n  dup6\n    /* \"#utility.yul\":1401:1419   */\n  add\n    /* \"#utility.yul\":1395:1420   */\n  mload\n    /* \"#utility.yul\":1379:1420   */\n  swap2\n  pop\n    /* \"#utility.yul\":1445:1447   */\n  dup1\n    /* \"#utility.yul\":1435:1443   */\n  dup3\n    /* \"#utility.yul\":1432:1448   */\n  gt\n    /* \"#utility.yul\":1429:1465   */\n  iszero\n  tag_35\n  jumpi\n    /* \"#utility.yul\":1461:1462   */\n  0x00\n    /* \"#utility.yul\":1458:1459   */\n  dup1\n    /* \"#utility.yul\":1451:1463   */\n  revert\n    /* \"#utility.yul\":1429:1465   */\ntag_35:\n  pop\n    /* \"#utility.yul\":1484:1547   */\n  tag_36\n    /* \"#utility.yul\":1539:1546   */\n  dup6\n    /* \"#utility.yul\":1528:1536   */\n  dup3\n    /* \"#utility.yul\":1517:1526   */\n  dup7\n    /* \"#utility.yul\":1513:1537   */\n  add\n    /* \"#utility.yul\":1484:1547   */\n  tag_14\n  jump\t// in\ntag_36:\n    /* \"#utility.yul\":1474:1547   */\n  swap2\n  pop\n  pop\n    /* \"#utility.yul\":991:1553   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1558:1938   */\ntag_15:\n    /* \"#utility.yul\":1637:1638   */\n  0x01\n    /* \"#utility.yul\":1633:1645   */\n  dup2\n  dup2\n  shr\n  swap1\n    /* \"#utility.yul\":1680:1692   */\n  dup3\n  and\n  dup1\n    /* \"#utility.yul\":1701:1762   */\n  tag_38\n  jumpi\n    /* \"#utility.yul\":1755:1759   */\n  0x7f\n    /* \"#utility.yul\":1747:1753   */\n  dup3\n    /* \"#utility.yul\":1743:1760   */\n  and\n    /* \"#utility.yul\":1733:1760   */\n  swap2\n  pop\n    /* \"#utility.yul\":1701:1762   */\ntag_38:\n    /* \"#utility.yul\":1808:1810   */\n  0x20\n    /* \"#utility.yul\":1800:1806   */\n  dup3\n    /* \"#utility.yul\":1797:1811   */\n  lt\n    /* \"#utility.yul\":1777:1795   */\n  dup2\n    /* \"#utility.yul\":1774:1812   */\n  sub\n    /* \"#utility.yul\":1771:1932   */\n  tag_39\n  jumpi\n    /* \"#utility.yul\":1854:1864   */\n  0x4e487b71\n    /* \"#utility.yul\":1849:1852   */\n  0xe0\n    /* \"#utility.yul\":1845:1865   */\n  shl\n    /* \"#utility.yul\":1842:1843   */\n  0x00\n    /* \"#utility.yul\":1835:1866   */\n  mstore\n    /* \"#utility.yul\":1889:1893   */\n  0x22\n    /* \"#utility.yul\":1886:1887   */\n  0x04\n    /* \"#utility.yul\":1879:1894   */\n  mstore\n    /* \"#utility.yul\":1917:1921   */\n  0x24\n    /* \"#utility.yul\":1914:1915   */\n  0x00\n    /* \"#utility.yul\":1907:1922   */\n  revert\n    /* \"#utility.yul\":1771:1932   */\ntag_39:\n  pop\n    /* \"#utility.yul\":1558:1938   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2069:2614   */\ntag_17:\n    /* \"#utility.yul\":2171:2173   */\n  0x1f\n    /* \"#utility.yul\":2166:2169   */\n  dup3\n    /* \"#utility.yul\":2163:2174   */\n  gt\n    /* \"#utility.yul\":2160:2608   */\n  iszero\n  tag_42\n  jumpi\n    /* \"#utility.yul\":2207:2208   */\n  0x00\n    /* \"#utility.yul\":2232:2237   */\n  dup2\n    /* \"#utility.yul\":2228:2230   */\n  dup2\n    /* \"#utility.yul\":2221:2238   */\n  mstore\n    /* \"#utility.yul\":2277:2281   */\n  0x20\n    /* \"#utility.yul\":2273:2275   */\n  dup2\n    /* \"#utility.yul\":2263:2282   */\n  keccak256\n    /* \"#utility.yul\":2347:2349   */\n  0x1f\n    /* \"#utility.yul\":2335:2345   */\n  dup6\n    /* \"#utility.yul\":2331:2350   */\n  add\n    /* \"#utility.yul\":2328:2329   */\n  0x05\n    /* \"#utility.yul\":2324:2351   */\n  shr\n    /* \"#utility.yul\":2318:2322   */\n  dup2\n    /* \"#utility.yul\":2314:2352   */\n  add\n    /* \"#utility.yul\":2383:2387   */\n  0x20\n    /* \"#utility.yul\":2371:2381   */\n  dup7\n    /* \"#utility.yul\":2368:2388   */\n  lt\n    /* \"#utility.yul\":2365:2412   */\n  iszero\n  tag_43\n  jumpi\n  pop\n    /* \"#utility.yul\":2406:2410   */\n  dup1\n    /* \"#utility.yul\":2365:2412   */\ntag_43:\n    /* \"#utility.yul\":2461:2463   */\n  0x1f\n    /* \"#utility.yul\":2456:2459   */\n  dup6\n    /* \"#utility.yul\":2452:2464   */\n  add\n    /* \"#utility.yul\":2449:2450   */\n  0x05\n    /* \"#utility.yul\":2445:2465   */\n  shr\n    /* \"#utility.yul\":2439:2443   */\n  dup3\n    /* \"#utility.yul\":2435:2466   */\n  add\n    /* \"#utility.yul\":2425:2466   */\n  swap2\n  pop\n    /* \"#utility.yul\":2516:2598   */\ntag_44:\n    /* \"#utility.yul\":2534:2536   */\n  dup2\n    /* \"#utility.yul\":2527:2532   */\n  dup2\n    /* \"#utility.yul\":2524:2537   */\n  lt\n    /* \"#utility.yul\":2516:2598   */\n  iszero\n  tag_46\n  jumpi\n    /* \"#utility.yul\":2579:2596   */\n  dup3\n  dup2\n  sstore\n    /* \"#utility.yul\":2560:2561   */\n  0x01\n    /* \"#utility.yul\":2549:2562   */\n  add\n    /* \"#utility.yul\":2516:2598   */\n  jump(tag_44)\ntag_46:\n    /* \"#utility.yul\":2520:2523   */\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":2160:2608   */\ntag_42:\n    /* \"#utility.yul\":2069:2614   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2790:4142   */\ntag_7:\n    /* \"#utility.yul\":2910:2920   */\n  dup2\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":2932:2962   */\n  dup2\n  gt\n    /* \"#utility.yul\":2929:2985   */\n  iszero\n  tag_50\n  jumpi\n    /* \"#utility.yul\":2965:2983   */\n  tag_50\n  tag_13\n  jump\t// in\ntag_50:\n    /* \"#utility.yul\":2994:3091   */\n  tag_51\n    /* \"#utility.yul\":3084:3090   */\n  dup2\n    /* \"#utility.yul\":3044:3082   */\n  tag_52\n    /* \"#utility.yul\":3076:3080   */\n  dup5\n    /* \"#utility.yul\":3070:3081   */\n  sload\n    /* \"#utility.yul\":3044:3082   */\n  tag_15\n  jump\t// in\ntag_52:\n    /* \"#utility.yul\":3038:3042   */\n  dup5\n    /* \"#utility.yul\":2994:3091   */\n  tag_17\n  jump\t// in\ntag_51:\n    /* \"#utility.yul\":3146:3150   */\n  0x20\n  dup1\n    /* \"#utility.yul\":3210:3212   */\n  0x1f\n    /* \"#utility.yul\":3199:3213   */\n  dup4\n  gt\n    /* \"#utility.yul\":3227:3228   */\n  0x01\n    /* \"#utility.yul\":3222:3885   */\n  dup2\n  eq\n  tag_54\n  jumpi\n    /* \"#utility.yul\":3929:3930   */\n  0x00\n    /* \"#utility.yul\":3946:3952   */\n  dup5\n    /* \"#utility.yul\":3943:4032   */\n  iszero\n  tag_55\n  jumpi\n  pop\n    /* \"#utility.yul\":3998:4017   */\n  dup6\n  dup4\n  add\n    /* \"#utility.yul\":3992:4018   */\n  mload\n    /* \"#utility.yul\":3943:4032   */\ntag_55:\n  not(0x00)\n    /* \"#utility.yul\":2747:2748   */\n  0x03\n    /* \"#utility.yul\":2743:2754   */\n  dup7\n  swap1\n  shl\n    /* \"#utility.yul\":2739:2763   */\n  shr\n    /* \"#utility.yul\":2735:2764   */\n  not\n    /* \"#utility.yul\":2725:2765   */\n  and\n    /* \"#utility.yul\":2771:2772   */\n  0x01\n    /* \"#utility.yul\":2767:2778   */\n  dup6\n  swap1\n  shl\n    /* \"#utility.yul\":2722:2779   */\n  or\n    /* \"#utility.yul\":4045:4126   */\n  dup6\n  sstore\n    /* \"#utility.yul\":3192:4136   */\n  jump(tag_46)\n    /* \"#utility.yul\":3222:3885   */\ntag_54:\n    /* \"#utility.yul\":2016:2017   */\n  0x00\n    /* \"#utility.yul\":2009:2023   */\n  dup6\n  dup2\n  mstore\n    /* \"#utility.yul\":2053:2057   */\n  0x20\n    /* \"#utility.yul\":2040:2058   */\n  dup2\n  keccak256\n  not(0x1f)\n    /* \"#utility.yul\":3258:3278   */\n  dup7\n  and\n  swap2\n    /* \"#utility.yul\":3376:3612   */\ntag_58:\n    /* \"#utility.yul\":3390:3397   */\n  dup3\n    /* \"#utility.yul\":3387:3388   */\n  dup2\n    /* \"#utility.yul\":3384:3398   */\n  lt\n    /* \"#utility.yul\":3376:3612   */\n  iszero\n  tag_60\n  jumpi\n    /* \"#utility.yul\":3479:3498   */\n  dup9\n  dup7\n  add\n    /* \"#utility.yul\":3473:3499   */\n  mload\n    /* \"#utility.yul\":3458:3500   */\n  dup3\n  sstore\n    /* \"#utility.yul\":3571:3598   */\n  swap5\n  dup5\n  add\n  swap5\n    /* \"#utility.yul\":3539:3540   */\n  0x01\n    /* \"#utility.yul\":3527:3541   */\n  swap1\n  swap2\n  add\n  swap1\n    /* \"#utility.yul\":3406:3425   */\n  dup5\n  add\n    /* \"#utility.yul\":3376:3612   */\n  jump(tag_58)\ntag_60:\n    /* \"#utility.yul\":3380:3383   */\n  pop\n    /* \"#utility.yul\":3640:3646   */\n  dup6\n    /* \"#utility.yul\":3631:3638   */\n  dup3\n    /* \"#utility.yul\":3628:3647   */\n  lt\n    /* \"#utility.yul\":3625:3826   */\n  iszero\n  tag_61\n  jumpi\n    /* \"#utility.yul\":3701:3720   */\n  dup8\n  dup6\n  add\n    /* \"#utility.yul\":3695:3721   */\n  mload\n  not(0x00)\n    /* \"#utility.yul\":3784:3785   */\n  0x03\n    /* \"#utility.yul\":3780:3794   */\n  dup9\n  swap1\n  shl\n    /* \"#utility.yul\":3796:3799   */\n  0xf8\n    /* \"#utility.yul\":3776:3800   */\n  and\n    /* \"#utility.yul\":3772:3809   */\n  shr\n    /* \"#utility.yul\":3768:3810   */\n  not\n    /* \"#utility.yul\":3753:3811   */\n  and\n    /* \"#utility.yul\":3738:3812   */\n  dup2\n  sstore\n    /* \"#utility.yul\":3625:3826   */\ntag_61:\n  pop\n  pop\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":3872:3873   */\n  0x01\n    /* \"#utility.yul\":3856:3870   */\n  swap1\n  dup2\n  shl\n    /* \"#utility.yul\":3852:3874   */\n  add\n    /* \"#utility.yul\":3839:3875   */\n  swap1\n  sstore\n  pop\n    /* \"#utility.yul\":2790:4142   */\n  jump\t// out\ntag_19:\n    /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":1515:21866  contract ERC721A is Context, ERC165, IERC721, IERC721Metadata {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":1515:21866  contract ERC721A is Context, ERC165, IERC721, IERC721Metadata {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x6352211e\n      gt\n      tag_17\n      jumpi\n      dup1\n      0xa22cb465\n      gt\n      tag_18\n      jumpi\n      dup1\n      0xa22cb465\n      eq\n      tag_13\n      jumpi\n      dup1\n      0xb88d4fde\n      eq\n      tag_14\n      jumpi\n      dup1\n      0xc87b56dd\n      eq\n      tag_15\n      jumpi\n      dup1\n      0xe985e9c5\n      eq\n      tag_16\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_18:\n      dup1\n      0x6352211e\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_12\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_17:\n      dup1\n      0x095ea7b3\n      gt\n      tag_19\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x42842e0e\n      eq\n      tag_9\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_19:\n      dup1\n      0x01ffc9a7\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x06fdde03\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x081812fc\n      eq\n      tag_5\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":4607:4907  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n    tag_3:\n      tag_20\n      tag_21\n      calldatasize\n      0x04\n      tag_22\n      jump\t// in\n    tag_21:\n      tag_23\n      jump\t// in\n    tag_20:\n      mload(0x40)\n        /* \"#utility.yul\":565:579   */\n      swap1\n      iszero\n        /* \"#utility.yul\":558:580   */\n      iszero\n        /* \"#utility.yul\":540:581   */\n      dup2\n      mstore\n        /* \"#utility.yul\":528:530   */\n      0x20\n        /* \"#utility.yul\":513:531   */\n      add\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":4607:4907  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n    tag_24:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7635:7733  function name() public view virtual override returns (string memory) {... */\n    tag_4:\n      tag_26\n      tag_27\n      jump\t// in\n    tag_26:\n      mload(0x40)\n      tag_24\n      swap2\n      swap1\n      tag_29\n      jump\t// in\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9091:9291  function getApproved(uint256 tokenId) public view override returns (address) {... */\n    tag_5:\n      tag_30\n      tag_31\n      calldatasize\n      0x04\n      tag_32\n      jump\t// in\n    tag_31:\n      tag_33\n      jump\t// in\n    tag_30:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1697:1729   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":1679:1730   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1667:1669   */\n      0x20\n        /* \"#utility.yul\":1652:1670   */\n      add\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9091:9291  function getApproved(uint256 tokenId) public view override returns (address) {... */\n      tag_24\n        /* \"#utility.yul\":1533:1736   */\n      jump\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8668:9030  function approve(address to, uint256 tokenId) public override {... */\n    tag_6:\n      tag_36\n      tag_37\n      calldatasize\n      0x04\n      tag_38\n      jump\t// in\n    tag_37:\n      tag_39\n      jump\t// in\n    tag_36:\n      stop\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":3878:4175  function totalSupply() public view returns (uint256) {... */\n    tag_7:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":4128:4140  _burnCounter */\n      sload(0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":3922:3929  uint256 */\n      0x00\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":4112:4125  _currentIndex */\n      sload\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":4112:4140  _currentIndex - _burnCounter */\n      sub\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":3878:4175  function totalSupply() public view returns (uint256) {... */\n    tag_40:\n      mload(0x40)\n        /* \"#utility.yul\":2324:2349   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":2312:2314   */\n      0x20\n        /* \"#utility.yul\":2297:2315   */\n      add\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":3878:4175  function totalSupply() public view returns (uint256) {... */\n      tag_24\n        /* \"#utility.yul\":2178:2355   */\n      jump\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9930:10094  function transferFrom(... */\n    tag_8:\n      tag_36\n      tag_45\n      calldatasize\n      0x04\n      tag_46\n      jump\t// in\n    tag_45:\n      tag_47\n      jump\t// in\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10160:10339  function safeTransferFrom(... */\n    tag_9:\n      tag_36\n      tag_49\n      calldatasize\n      0x04\n      tag_46\n      jump\t// in\n    tag_49:\n      tag_50\n      jump\t// in\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7450:7573  function ownerOf(uint256 tokenId) public view override returns (address) {... */\n    tag_10:\n      tag_30\n      tag_52\n      calldatasize\n      0x04\n      tag_32\n      jump\t// in\n    tag_52:\n      tag_53\n      jump\t// in\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":4966:5169  function balanceOf(address owner) public view override returns (uint256) {... */\n    tag_11:\n      tag_40\n      tag_56\n      calldatasize\n      0x04\n      tag_57\n      jump\t// in\n    tag_56:\n      tag_58\n      jump\t// in\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7797:7899  function symbol() public view virtual override returns (string memory) {... */\n    tag_12:\n      tag_26\n      tag_61\n      jump\t// in\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9358:9640  function setApprovalForAll(address operator, bool approved) public virtual override {... */\n    tag_13:\n      tag_36\n      tag_64\n      calldatasize\n      0x04\n      tag_65\n      jump\t// in\n    tag_64:\n      tag_66\n      jump\t// in\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10405:10764  function safeTransferFrom(... */\n    tag_14:\n      tag_36\n      tag_68\n      calldatasize\n      0x04\n      tag_69\n      jump\t// in\n    tag_68:\n      tag_70\n      jump\t// in\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7965:8278  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {... */\n    tag_15:\n      tag_26\n      tag_72\n      calldatasize\n      0x04\n      tag_32\n      jump\t// in\n    tag_72:\n      tag_73\n      jump\t// in\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9706:9868  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n    tag_16:\n      tag_20\n      tag_76\n      calldatasize\n      0x04\n      tag_77\n      jump\t// in\n    tag_76:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9826:9851  _operatorApprovals[owner] */\n      swap2\n      dup3\n      and\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9803:9807  bool */\n      0x00\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9826:9851  _operatorApprovals[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9826:9844  _operatorApprovals */\n      0x07\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9826:9851  _operatorApprovals[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9826:9861  _operatorApprovals[owner][operator] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      0xff\n      and\n      swap1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9706:9868  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n      jump\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":4607:4907  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n    tag_23:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":4709:4713  bool */\n      0x00\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":4744:4784  interfaceId == type(IERC721).interfaceId */\n      dup3\n      and\n      shl(0xe0, 0x80ac58cd)\n      eq\n      dup1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":4744:4848  interfaceId == type(IERC721).interfaceId ||... */\n      tag_81\n      jumpi\n      pop\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":4800:4848  interfaceId == type(IERC721Metadata).interfaceId */\n      dup3\n      and\n      shl(0xe0, 0x5b5e139f)\n      eq\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":4744:4848  interfaceId == type(IERC721).interfaceId ||... */\n    tag_81:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":4744:4900  interfaceId == type(IERC721).interfaceId ||... */\n      dup1\n      tag_83\n      jumpi\n      pop\n      shl(0xe0, 0x01ffc9a7)\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"@openzeppelin/contracts/utils/introspection/ERC165.sol\":937:977  interfaceId == type(IERC165).interfaceId */\n      dup4\n      and\n      eq\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":4864:4900  super.supportsInterface(interfaceId) */\n    tag_83:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":4725:4900  return... */\n      swap3\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":4607:4907  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7635:7733  function name() public view virtual override returns (string memory) {... */\n    tag_27:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7689:7702  string memory */\n      0x60\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7721:7726  _name */\n      0x02\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7714:7726  return _name */\n      dup1\n      sload\n      tag_86\n      swap1\n      tag_87\n      jump\t// in\n    tag_86:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_88\n      swap1\n      tag_87\n      jump\t// in\n    tag_88:\n      dup1\n      iszero\n      tag_89\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_90\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_89)\n    tag_90:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_91:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_91\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_89:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7635:7733  function name() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9091:9291  function getApproved(uint256 tokenId) public view override returns (address) {... */\n    tag_33:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9159:9166  address */\n      0x00\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9183:9199  _exists(tokenId) */\n      tag_93\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9191:9198  tokenId */\n      dup3\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9183:9190  _exists */\n      tag_94\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9183:9199  _exists(tokenId) */\n      jump\t// in\n    tag_93:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9178:9242  if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken() */\n      tag_95\n      jumpi\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9208:9242  ApprovalQueryForNonexistentToken() */\n      mload(0x40)\n      shl(0xe2, 0x33d1c039)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9178:9242  if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken() */\n    tag_95:\n      pop\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9260:9284  _tokenApprovals[tokenId] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9260:9275  _tokenApprovals */\n      0x06\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9260:9284  _tokenApprovals[tokenId] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9091:9291  function getApproved(uint256 tokenId) public view override returns (address) {... */\n      jump\t// out\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8668:9030  function approve(address to, uint256 tokenId) public override {... */\n    tag_39:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8740:8753  address owner */\n      0x00\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8756:8780  ERC721A.ownerOf(tokenId) */\n      tag_97\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8772:8779  tokenId */\n      dup3\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8756:8771  ERC721A.ownerOf */\n      tag_53\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8756:8780  ERC721A.ownerOf(tokenId) */\n      jump\t// in\n    tag_97:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8740:8780  address owner = ERC721A.ownerOf(tokenId) */\n      swap1\n      pop\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8800:8805  owner */\n      dup1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8794:8805  to == owner */\n      and\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8794:8796  to */\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8794:8805  to == owner */\n      and\n      sub\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8790:8838  if (to == owner) revert ApprovalToCurrentOwner() */\n      tag_98\n      jumpi\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8814:8838  ApprovalToCurrentOwner() */\n      mload(0x40)\n      shl(0xe2, 0x250fdee3)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8790:8838  if (to == owner) revert ApprovalToCurrentOwner() */\n    tag_98:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8853:8874  _msgSender() != owner */\n      dup3\n      and\n      eq\n      dup1\n      iszero\n      swap1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8853:8916  _msgSender() != owner && !isApprovedForAll(owner, _msgSender()) */\n      tag_101\n      jumpi\n      pop\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8879:8916  isApprovedForAll(owner, _msgSender()) */\n      tag_102\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8896:8901  owner */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9706:9868  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n      tag_76\n      jump\t// in\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8879:8916  isApprovedForAll(owner, _msgSender()) */\n    tag_102:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8878:8916  !isApprovedForAll(owner, _msgSender()) */\n      iszero\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8853:8916  _msgSender() != owner && !isApprovedForAll(owner, _msgSender()) */\n    tag_101:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8849:8985  if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {... */\n      iszero\n      tag_104\n      jumpi\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8939:8974  ApprovalCallerNotOwnerNorApproved() */\n      mload(0x40)\n      shl(0xe1, 0x67d9dca1)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8849:8985  if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {... */\n    tag_104:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8995:9023  _approve(to, tokenId, owner) */\n      tag_105\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9004:9006  to */\n      dup4\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9008:9015  tokenId */\n      dup4\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9017:9022  owner */\n      dup4\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8995:9003  _approve */\n      tag_106\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8995:9023  _approve(to, tokenId, owner) */\n      jump\t// in\n    tag_105:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8730:9030  {... */\n      pop\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8668:9030  function approve(address to, uint256 tokenId) public override {... */\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9930:10094  function transferFrom(... */\n    tag_47:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10059:10087  _transfer(from, to, tokenId) */\n      tag_105\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10069:10073  from */\n      dup4\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10075:10077  to */\n      dup4\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10079:10086  tokenId */\n      dup4\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10059:10068  _transfer */\n      tag_112\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10059:10087  _transfer(from, to, tokenId) */\n      jump\t// in\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10160:10339  function safeTransferFrom(... */\n    tag_50:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10293:10332  safeTransferFrom(from, to, tokenId, '') */\n      tag_105\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10310:10314  from */\n      dup4\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10316:10318  to */\n      dup4\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10320:10327  tokenId */\n      dup4\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10293:10332  safeTransferFrom(from, to, tokenId, '') */\n      mload(0x40)\n      dup1\n      0x20\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      pop\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10293:10309  safeTransferFrom */\n      tag_70\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10293:10332  safeTransferFrom(from, to, tokenId, '') */\n      jump\t// in\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7450:7573  function ownerOf(uint256 tokenId) public view override returns (address) {... */\n    tag_53:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7514:7521  address */\n      0x00\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7540:7561  _ownershipOf(tokenId) */\n      tag_116\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7553:7560  tokenId */\n      dup3\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7540:7552  _ownershipOf */\n      tag_117\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7540:7561  _ownershipOf(tokenId) */\n      jump\t// in\n    tag_116:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7540:7566  _ownershipOf(tokenId).addr */\n      mload\n      swap3\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7450:7573  function ownerOf(uint256 tokenId) public view override returns (address) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":4966:5169  function balanceOf(address owner) public view override returns (uint256) {... */\n    tag_58:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":5030:5037  uint256 */\n      0x00\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":5053:5072  owner == address(0) */\n      dup3\n      and\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":5049:5109  if (owner == address(0)) revert BalanceQueryForZeroAddress() */\n      tag_119\n      jumpi\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":5081:5109  BalanceQueryForZeroAddress() */\n      mload(0x40)\n      shl(0xe2, 0x23d3ad81)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":5049:5109  if (owner == address(0)) revert BalanceQueryForZeroAddress() */\n    tag_119:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":5134:5153  _addressData[owner] */\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":5134:5146  _addressData */\n      0x05\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":5134:5153  _addressData[owner] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":5134:5161  _addressData[owner].balance */\n      sload\n      0xffffffffffffffff\n      and\n      swap1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":4966:5169  function balanceOf(address owner) public view override returns (uint256) {... */\n      jump\t// out\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7797:7899  function symbol() public view virtual override returns (string memory) {... */\n    tag_61:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7853:7866  string memory */\n      0x60\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7885:7892  _symbol */\n      0x03\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7878:7892  return _symbol */\n      dup1\n      sload\n      tag_86\n      swap1\n      tag_87\n      jump\t// in\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9358:9640  function setApprovalForAll(address operator, bool approved) public virtual override {... */\n    tag_66:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9456:9480  operator == _msgSender() */\n      dup4\n      and\n      sub\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9452:9506  if (operator == _msgSender()) revert ApproveToCaller() */\n      tag_128\n      jumpi\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9489:9506  ApproveToCaller() */\n      mload(0x40)\n      shl(0xe0, 0xb06307db)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9452:9506  if (operator == _msgSender()) revert ApproveToCaller() */\n    tag_128:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9517:9549  _operatorApprovals[_msgSender()] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9517:9535  _operatorApprovals */\n      0x07\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9517:9549  _operatorApprovals[_msgSender()] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9517:9559  _operatorApprovals[_msgSender()][operator] */\n      dup8\n      and\n      dup1\n      dup6\n      mstore\n      swap1\n      dup4\n      mstore\n      swap3\n      dup2\n      swap1\n      keccak256\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9517:9570  _operatorApprovals[_msgSender()][operator] = approved */\n      dup1\n      sload\n      not(0xff)\n      and\n      dup7\n      iszero\n      iszero\n      swap1\n      dup2\n      or\n      swap1\n      swap2\n      sstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9585:9633  ApprovalForAll(_msgSender(), operator, approved) */\n      swap1\n      mload\n        /* \"#utility.yul\":540:581   */\n      swap1\n      dup2\n      mstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9517:9559  _operatorApprovals[_msgSender()][operator] */\n      swap2\n      swap3\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      swap2\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9585:9633  ApprovalForAll(_msgSender(), operator, approved) */\n      0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31\n      swap2\n        /* \"#utility.yul\":513:531   */\n      add\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9585:9633  ApprovalForAll(_msgSender(), operator, approved) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9358:9640  function setApprovalForAll(address operator, bool approved) public virtual override {... */\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10405:10764  function safeTransferFrom(... */\n    tag_70:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10566:10594  _transfer(from, to, tokenId) */\n      tag_133\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10576:10580  from */\n      dup5\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10582:10584  to */\n      dup5\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10586:10593  tokenId */\n      dup5\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10566:10575  _transfer */\n      tag_112\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10566:10594  _transfer(from, to, tokenId) */\n      jump\t// in\n    tag_133:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10608:10621  to.isContract */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1702:1721  account.code.length */\n      extcodesize\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1702:1725  account.code.length > 0 */\n      iszero\n      iszero\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10608:10684  to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data) */\n      dup1\n      iszero\n      tag_136\n      jumpi\n      pop\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10628:10684  _checkContractOnERC721Received(from, to, tokenId, _data) */\n      tag_137\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10659:10663  from */\n      dup5\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10665:10667  to */\n      dup5\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10669:10676  tokenId */\n      dup5\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10678:10683  _data */\n      dup5\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10628:10658  _checkContractOnERC721Received */\n      tag_138\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10628:10684  _checkContractOnERC721Received(from, to, tokenId, _data) */\n      jump\t// in\n    tag_137:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10627:10684  !_checkContractOnERC721Received(from, to, tokenId, _data) */\n      iszero\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10608:10684  to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data) */\n    tag_136:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10604:10758  if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {... */\n      iszero\n      tag_139\n      jumpi\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10707:10747  TransferToNonERC721ReceiverImplementer() */\n      mload(0x40)\n      shl(0xe1, 0x68d2bf6b)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10604:10758  if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {... */\n    tag_139:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":10405:10764  function safeTransferFrom(... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7965:8278  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {... */\n    tag_73:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8038:8051  string memory */\n      0x60\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8068:8084  _exists(tokenId) */\n      tag_141\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8076:8083  tokenId */\n      dup3\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8068:8075  _exists */\n      tag_94\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8068:8084  _exists(tokenId) */\n      jump\t// in\n    tag_141:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8063:8122  if (!_exists(tokenId)) revert URIQueryForNonexistentToken() */\n      tag_142\n      jumpi\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8093:8122  URIQueryForNonexistentToken() */\n      mload(0x40)\n      shl(0xe4, 0x0a14c4b5)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8063:8122  if (!_exists(tokenId)) revert URIQueryForNonexistentToken() */\n    tag_142:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8133:8154  string memory baseURI */\n      0x00\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8157:8167  _baseURI() */\n      tag_143\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8595:8604  return '' */\n      0x40\n      dup1\n      mload\n      0x20\n      dup2\n      add\n      swap1\n      swap2\n      mstore\n      0x00\n      dup2\n      mstore\n      swap1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8519:8611  function _baseURI() internal view virtual returns (string memory) {... */\n      jump\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8157:8167  _baseURI() */\n    tag_143:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8133:8167  string memory baseURI = _baseURI() */\n      swap1\n      pop\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8190:8197  baseURI */\n      dup1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8184:8205  bytes(baseURI).length */\n      mload\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8209:8210  0 */\n      0x00\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8184:8210  bytes(baseURI).length != 0 */\n      sub\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8184:8271  bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '' */\n      tag_145\n      jumpi\n      mload(0x40)\n      dup1\n      0x20\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      pop\n      jump(tag_146)\n    tag_145:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8237:8244  baseURI */\n      dup1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8246:8264  tokenId.toString() */\n      tag_147\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8246:8253  tokenId */\n      dup5\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8246:8262  tokenId.toString */\n      tag_148\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8246:8264  tokenId.toString() */\n      jump\t// in\n    tag_147:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8220:8265  abi.encodePacked(baseURI, tokenId.toString()) */\n      add(0x20, mload(0x40))\n      tag_149\n      swap3\n      swap2\n      swap1\n      tag_150\n      jump\t// in\n    tag_149:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8184:8271  bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '' */\n    tag_146:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":8177:8271  return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '' */\n      swap4\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7965:8278  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":11010:11194  function _exists(uint256 tokenId) internal view returns (bool) {... */\n    tag_94:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":11067:11071  bool */\n      0x00\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":11130:11143  _currentIndex */\n      dup1\n      sload\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":11120:11127  tokenId */\n      dup3\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":11120:11143  tokenId < _currentIndex */\n      lt\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":11090:11187  _startTokenId() <= tokenId && tokenId < _currentIndex &&... */\n      dup1\n      iszero\n      tag_83\n      jumpi\n      pop\n      pop\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":11160:11180  _ownerships[tokenId] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":11160:11171  _ownerships */\n      0x04\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":11160:11180  _ownerships[tokenId] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":11160:11187  _ownerships[tokenId].burned */\n      sload\n      shl(0xe0, 0x01)\n      swap1\n      div\n      0xff\n      and\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":11159:11187  !_ownerships[tokenId].burned */\n      iszero\n      swap1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":11010:11194  function _exists(uint256 tokenId) internal view returns (bool) {... */\n      jump\t// out\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":18963:19153  function _approve(... */\n    tag_106:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":19074:19098  _tokenApprovals[tokenId] */\n      0x00\n      dup3\n      dup2\n      mstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":19074:19089  _tokenApprovals */\n      0x06\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":19074:19098  _tokenApprovals[tokenId] */\n      0x20\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":19074:19103  _tokenApprovals[tokenId] = to */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      dup8\n      dup2\n      and\n      swap2\n      dup3\n      or\n      swap1\n      swap3\n      sstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":19118:19146  Approval(owner, to, tokenId) */\n      swap2\n      mload\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":19074:19098  _tokenApprovals[tokenId] */\n      dup6\n      swap4\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":19118:19146  Approval(owner, to, tokenId) */\n      swap2\n      dup6\n      and\n      swap2\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      swap2\n      log4\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":18963:19153  function _approve(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14032:16115  function _transfer(... */\n    tag_112:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14143:14178  TokenOwnership memory prevOwnership */\n      0x00\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14181:14202  _ownershipOf(tokenId) */\n      tag_161\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14194:14201  tokenId */\n      dup3\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14181:14193  _ownershipOf */\n      tag_117\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14181:14202  _ownershipOf(tokenId) */\n      jump\t// in\n    tag_161:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14143:14202  TokenOwnership memory prevOwnership = _ownershipOf(tokenId) */\n      swap1\n      pop\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14239:14243  from */\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14217:14243  prevOwnership.addr != from */\n      and\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14217:14230  prevOwnership */\n      dup2\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14217:14235  prevOwnership.addr */\n      0x00\n      add\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14217:14243  prevOwnership.addr != from */\n      and\n      eq\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14213:14280  if (prevOwnership.addr != from) revert TransferFromIncorrectOwner() */\n      tag_162\n      jumpi\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14252:14280  TransferFromIncorrectOwner() */\n      mload(0x40)\n      shl(0xe8, 0xa11481)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14213:14280  if (prevOwnership.addr != from) revert TransferFromIncorrectOwner() */\n    tag_162:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14291:14313  bool isApprovedOrOwner */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14317:14337  _msgSender() == from */\n      dup7\n      and\n      eq\n      dup1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14317:14389  _msgSender() == from ||... */\n      tag_165\n      jumpi\n      pop\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14353:14389  isApprovedForAll(from, _msgSender()) */\n      tag_165\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14370:14374  from */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":9706:9868  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n      tag_76\n      jump\t// in\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14353:14389  isApprovedForAll(from, _msgSender()) */\n    tag_165:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14317:14441  _msgSender() == from ||... */\n      dup1\n      tag_167\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14405:14425  getApproved(tokenId) */\n      tag_169\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14417:14424  tokenId */\n      dup5\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14405:14416  getApproved */\n      tag_33\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14405:14425  getApproved(tokenId) */\n      jump\t// in\n    tag_169:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14405:14441  getApproved(tokenId) == _msgSender() */\n      and\n      eq\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14317:14441  _msgSender() == from ||... */\n    tag_167:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14291:14442  bool isApprovedOrOwner = (_msgSender() == from ||... */\n      swap1\n      pop\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14458:14475  isApprovedOrOwner */\n      dup1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14453:14519  if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved() */\n      tag_170\n      jumpi\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14484:14519  TransferCallerNotOwnerNorApproved() */\n      mload(0x40)\n      shl(0xe1, 0x2ce44b5f)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14453:14519  if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved() */\n    tag_170:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14533:14549  to == address(0) */\n      dup5\n      and\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14529:14581  if (to == address(0)) revert TransferToZeroAddress() */\n      tag_171\n      jumpi\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14558:14581  TransferToZeroAddress() */\n      mload(0x40)\n      shl(0xe2, 0x3a954ecd)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14529:14581  if (to == address(0)) revert TransferToZeroAddress() */\n    tag_171:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14697:14732  _approve(address(0), tokenId, from) */\n      tag_174\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14714:14715  0 */\n      0x00\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14718:14725  tokenId */\n      dup5\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14727:14731  from */\n      dup8\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14697:14705  _approve */\n      tag_106\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14697:14732  _approve(address(0), tokenId, from) */\n      jump\t// in\n    tag_174:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15022:15040  _addressData[from] */\n      dup6\n      dup2\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15022:15034  _addressData */\n      0x05\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15022:15040  _addressData[from] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15022:15053  _addressData[from].balance -= 1 */\n      dup1\n      sload\n      not(0xffffffffffffffff)\n      dup1\n      dup3\n      and\n      0xffffffffffffffff\n      swap3\n      dup4\n      and\n      not(0x00)\n      add\n      dup4\n      and\n      or\n      swap1\n      swap3\n      sstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15067:15083  _addressData[to] */\n      dup10\n      dup7\n      and\n      dup1\n      dup7\n      mstore\n      dup4\n      dup7\n      keccak256\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15067:15096  _addressData[to].balance += 1 */\n      dup1\n      sload\n      swap4\n      dup5\n      and\n      swap4\n      dup4\n      and\n      0x01\n      swap1\n      dup2\n      add\n      dup5\n      and\n      swap5\n      swap1\n      swap5\n      or\n      swap1\n      sstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15145:15165  _ownerships[tokenId] */\n      dup10\n      dup7\n      mstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15145:15156  _ownerships */\n      0x04\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15145:15165  _ownerships[tokenId] */\n      swap1\n      swap5\n      mstore\n      dup3\n      dup6\n      keccak256\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15179:15197  currSlot.addr = to */\n      dup1\n      sload\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15211:15260  currSlot.startTimestamp = uint64(block.timestamp) */\n      and\n      swap1\n      swap5\n      or\n      shl(0xa0, 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15244:15259  block.timestamp */\n      timestamp\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15211:15260  currSlot.startTimestamp = uint64(block.timestamp) */\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      mul\n      or\n      dup4\n      sstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15530:15541  tokenId + 1 */\n      dup8\n      add\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15589:15613  _ownerships[nextTokenId] */\n      dup1\n      dup5\n      mstore\n      swap3\n      keccak256\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15631:15644  nextSlot.addr */\n      dup1\n      sload\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15145:15165  _ownerships[tokenId] */\n      swap2\n      swap4\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15589:15613  _ownerships[nextTokenId] */\n      swap1\n      swap2\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15631:15644  nextSlot.addr */\n      and\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15627:16004  if (nextSlot.addr == address(0)) {... */\n      tag_176\n      jumpi\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15838:15851  _currentIndex */\n      sload(0x00)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15823:15834  nextTokenId */\n      dup3\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15823:15851  nextTokenId != _currentIndex */\n      eq\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15819:15990  if (nextTokenId != _currentIndex) {... */\n      tag_176\n      jumpi\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15875:15895  nextSlot.addr = from */\n      dup1\n      sload\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15943:15971  prevOwnership.startTimestamp */\n      0x20\n      dup7\n      add\n      mload\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15917:15971  nextSlot.startTimestamp = prevOwnership.startTimestamp */\n      0xffffffffffffffff\n      and\n      shl(0xa0, 0x01)\n      mul\n      not(sub(shl(0xe0, 0x01), 0x01))\n      swap1\n      swap2\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15875:15895  nextSlot.addr = from */\n      dup11\n      and\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15917:15971  nextSlot.startTimestamp = prevOwnership.startTimestamp */\n      or\n      or\n      dup2\n      sstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":15819:15990  if (nextTokenId != _currentIndex) {... */\n    tag_176:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14998:16014  unchecked {... */\n      pop\n      pop\n      pop\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":16048:16055  tokenId */\n      dup3\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":16044:16046  to */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":16029:16056  Transfer(from, to, tokenId) */\n      and\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":16038:16042  from */\n      dup7\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":16029:16056  Transfer(from, to, tokenId) */\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log4\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14133:16115  {... */\n      pop\n      pop\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":14032:16115  function _transfer(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":6309:7393  function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {... */\n    tag_117:\n      0x40\n      dup1\n      mload\n      0x60\n      dup2\n      add\n      dup3\n      mstore\n      0x00\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      swap2\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":6419:6426  tokenId */\n      dup2\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":6499:6512  _currentIndex */\n      sload(0x00)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":6492:6496  curr */\n      dup2\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":6492:6512  curr < _currentIndex */\n      lt\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":6461:7329  if (_startTokenId() <= curr && curr < _currentIndex) {... */\n      iszero\n      tag_184\n      jumpi\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":6532:6563  TokenOwnership memory ownership */\n      0x00\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":6566:6583  _ownerships[curr] */\n      dup2\n      dup2\n      mstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":6566:6577  _ownerships */\n      0x04\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":6566:6583  _ownerships[curr] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":6532:6583  TokenOwnership memory ownership = _ownerships[curr] */\n      dup3\n      mload\n      0x60\n      dup2\n      add\n      dup5\n      mstore\n      swap1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup2\n      and\n      dup3\n      mstore\n      shl(0xa0, 0x01)\n      dup2\n      div\n      0xffffffffffffffff\n      and\n      swap3\n      dup3\n      add\n      swap3\n      swap1\n      swap3\n      mstore\n      shl(0xe0, 0x01)\n      swap1\n      swap2\n      div\n      0xff\n      and\n      iszero\n      iszero\n      swap2\n      dup2\n      add\n      dup3\n      swap1\n      mstore\n      swap1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":6601:7315  if (!ownership.burned) {... */\n      tag_188\n      jumpi\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":6650:6664  ownership.addr */\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":6650:6678  ownership.addr != address(0) */\n      and\n      iszero\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":6646:6745  if (ownership.addr != address(0)) {... */\n      tag_186\n      jumpi\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":6713:6722  ownership */\n      swap4\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":6309:7393  function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":6646:6745  if (ownership.addr != address(0)) {... */\n    tag_186:\n      pop\n      not(0x00)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7081:7087  curr-- */\n      add\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7125:7142  _ownerships[curr] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7125:7136  _ownerships */\n      0x04\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7125:7142  _ownerships[curr] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7113:7142  ownership = _ownerships[curr] */\n      dup3\n      mload\n      0x60\n      dup2\n      add\n      dup5\n      mstore\n      swap1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup2\n      and\n      dup1\n      dup4\n      mstore\n      shl(0xa0, 0x01)\n      dup3\n      div\n      0xffffffffffffffff\n      and\n      swap4\n      dup4\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      shl(0xe0, 0x01)\n      swap1\n      div\n      0xff\n      and\n      iszero\n      iszero\n      swap3\n      dup2\n      add\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7172:7200  ownership.addr != address(0) */\n      iszero\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7168:7275  if (ownership.addr != address(0)) {... */\n      tag_189\n      jumpi\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7239:7248  ownership */\n      swap4\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":6309:7393  function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7168:7275  if (ownership.addr != address(0)) {... */\n    tag_189:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7042:7297  while (true) {... */\n      jump(tag_186)\n    tag_188:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":6514:7329  {... */\n      pop\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":6461:7329  if (_startTokenId() <= curr && curr < _currentIndex) {... */\n    tag_184:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":7355:7386  OwnerQueryForNonexistentToken() */\n      mload(0x40)\n      shl(0xe1, 0x6f96cda1)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":19634:20285  function _checkContractOnERC721Received(... */\n    tag_138:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":19813:19885  IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) */\n      mload(0x40)\n      shl(0xe1, 0x0a85bd01)\n      dup2\n      mstore\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":19793:19797  bool */\n      0x00\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":19813:19849  IERC721Receiver(to).onERC721Received */\n      dup6\n      and\n      swap1\n      0x150b7a02\n      swap1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":19813:19885  IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) */\n      tag_193\n      swap1\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n      swap1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":19864:19868  from */\n      dup10\n      swap1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":19870:19877  tokenId */\n      dup9\n      swap1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":19879:19884  _data */\n      dup9\n      swap1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":19813:19885  IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) */\n      0x04\n      add\n      tag_194\n      jump\t// in\n    tag_193:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      dup1\n      iszero\n      tag_195\n      jumpi\n      pop\n      0x40\n      dup1\n      mload\n      0x1f\n      returndatasize\n      swap1\n      dup2\n      add\n      not(0x1f)\n      and\n      dup3\n      add\n      swap1\n      swap3\n      mstore\n      tag_196\n      swap2\n      dup2\n      add\n      swap1\n      tag_197\n      jump\t// in\n    tag_196:\n      0x01\n    tag_195:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":19809:20279  try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {... */\n      tag_198\n      jumpi\n      returndatasize\n      dup1\n      dup1\n      iszero\n      tag_203\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_202)\n    tag_203:\n      0x60\n      swap2\n      pop\n    tag_202:\n      pop\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":20044:20050  reason */\n      dup1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":20044:20057  reason.length */\n      mload\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":20061:20062  0 */\n      0x00\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":20044:20062  reason.length == 0 */\n      sub\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":20040:20269  if (reason.length == 0) {... */\n      tag_204\n      jumpi\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":20089:20129  TransferToNonERC721ReceiverImplementer() */\n      mload(0x40)\n      shl(0xe1, 0x68d2bf6b)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":20040:20269  if (reason.length == 0) {... */\n    tag_204:\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":20229:20235  reason */\n      dup1\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":20223:20236  mload(reason) */\n      mload\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":20214:20220  reason */\n      dup2\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":20210:20212  32 */\n      0x20\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":20206:20221  add(32, reason) */\n      add\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":20199:20237  revert(add(32, reason), mload(reason)) */\n      revert\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":19809:20279  try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {... */\n    tag_198:\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":19931:19986  retval == IERC721Receiver(to).onERC721Received.selector */\n      and\n      shl(0xe1, 0x0a85bd01)\n      eq\n      swap1\n      pop\n        /* \"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":19634:20285  function _checkContractOnERC721Received(... */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":447:1143  function toString(uint256 value) internal pure returns (string memory) {... */\n    tag_148:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":503:516  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":552:566  uint256 length */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":569:586  Math.log10(value) */\n      tag_209\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":580:585  value */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":569:579  Math.log10 */\n      tag_210\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":569:586  Math.log10(value) */\n      jump\t// in\n    tag_209:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":589:590  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":569:590  Math.log10(value) + 1 */\n      add\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":552:590  uint256 length = Math.log10(value) + 1 */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":604:624  string memory buffer */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":638:644  length */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":627:645  new string(length) */\n      0xffffffffffffffff\n      dup2\n      gt\n      iszero\n      tag_212\n      jumpi\n      tag_212\n      tag_213\n      jump\t// in\n    tag_212:\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x1f\n      add\n      not(0x1f)\n      and\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_214\n      jumpi\n      0x20\n      dup3\n      add\n      dup2\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      add\n      swap1\n      pop\n    tag_214:\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":604:645  string memory buffer = new string(length) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":765:793  add(buffer, add(32, length)) */\n      dup2\n      dup2\n      add\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":781:783  32 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":765:793  add(buffer, add(32, length)) */\n      add\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":820:1100  while (true) {... */\n    tag_215:\n      not(0x00)\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":851:856  ptr-- */\n      add\n      shl(0x81, 0x181899199a1a9b1b9c1cb0b131b232b3)\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":985:987  10 */\n      0x0a\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":974:988  mod(value, 10) */\n      dup7\n      mod\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":969:999  byte(mod(value, 10), _SYMBOLS) */\n      byte\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":851:856  ptr-- */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":956:1000  mstore8(ptr, byte(mod(value, 10), _SYMBOLS)) */\n      mstore8\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1044:1046  10 */\n      0x0a\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1035:1046  value /= 10 */\n      dup6\n      div\n      swap5\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1064:1085  if (value == 0) break */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":820:1100  while (true) {... */\n      tag_215\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1064:1085  if (value == 0) break */\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1120:1126  buffer */\n      swap4\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":447:1143  function toString(uint256 value) internal pure returns (string memory) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10139:11055  function log10(uint256 value) internal pure returns (uint256) {... */\n    tag_210:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10192:10199  uint256 */\n      0x00\n      dup1\n      shl(0x40, 0x184f03e93ff9f4daa797ed6e38ed64bf6a1f01)\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10267:10284  value >= 10 ** 64 */\n      dup4\n      lt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10263:10366  if (value >= 10 ** 64) {... */\n      tag_224\n      jumpi\n      shl(0x40, 0x184f03e93ff9f4daa797ed6e38ed64bf6a1f01)\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10304:10321  value /= 10 ** 64 */\n      dup4\n      div\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10349:10351  64 */\n      0x40\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10339:10351  result += 64 */\n      add\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10263:10366  if (value >= 10 ** 64) {... */\n    tag_224:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10392:10400  10 ** 32 */\n      0x04ee2d6d415b85acef8100000000\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10383:10388  value */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10383:10400  value >= 10 ** 32 */\n      lt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10379:10482  if (value >= 10 ** 32) {... */\n      tag_227\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10429:10437  10 ** 32 */\n      0x04ee2d6d415b85acef8100000000\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10420:10437  value /= 10 ** 32 */\n      dup4\n      div\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10465:10467  32 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10455:10467  result += 32 */\n      add\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10379:10482  if (value >= 10 ** 32) {... */\n    tag_227:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10508:10516  10 ** 16 */\n      0x2386f26fc10000\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10499:10504  value */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10499:10516  value >= 10 ** 16 */\n      lt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10495:10598  if (value >= 10 ** 16) {... */\n      tag_230\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10545:10553  10 ** 16 */\n      0x2386f26fc10000\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10536:10553  value /= 10 ** 16 */\n      dup4\n      div\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10581:10583  16 */\n      0x10\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10571:10583  result += 16 */\n      add\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10495:10598  if (value >= 10 ** 16) {... */\n    tag_230:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10624:10631  10 ** 8 */\n      0x05f5e100\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10615:10620  value */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10615:10631  value >= 10 ** 8 */\n      lt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10611:10711  if (value >= 10 ** 8) {... */\n      tag_233\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10660:10667  10 ** 8 */\n      0x05f5e100\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10651:10667  value /= 10 ** 8 */\n      dup4\n      div\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10695:10696  8 */\n      0x08\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10685:10696  result += 8 */\n      add\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10611:10711  if (value >= 10 ** 8) {... */\n    tag_233:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10737:10744  10 ** 4 */\n      0x2710\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10728:10733  value */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10728:10744  value >= 10 ** 4 */\n      lt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10724:10824  if (value >= 10 ** 4) {... */\n      tag_236\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10773:10780  10 ** 4 */\n      0x2710\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10764:10780  value /= 10 ** 4 */\n      dup4\n      div\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10808:10809  4 */\n      0x04\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10798:10809  result += 4 */\n      add\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10724:10824  if (value >= 10 ** 4) {... */\n    tag_236:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10850:10857  10 ** 2 */\n      0x64\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10841:10846  value */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10841:10857  value >= 10 ** 2 */\n      lt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10837:10937  if (value >= 10 ** 2) {... */\n      tag_239\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10886:10893  10 ** 2 */\n      0x64\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10877:10893  value /= 10 ** 2 */\n      dup4\n      div\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10921:10922  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10911:10922  result += 2 */\n      add\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10837:10937  if (value >= 10 ** 2) {... */\n    tag_239:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10963:10970  10 ** 1 */\n      0x0a\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10954:10959  value */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10954:10970  value >= 10 ** 1 */\n      lt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10950:11016  if (value >= 10 ** 1) {... */\n      tag_83\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":11000:11001  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10990:11001  result += 1 */\n      add\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":11042:11048  result */\n      swap3\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10139:11055  function log10(uint256 value) internal pure returns (uint256) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14:145   */\n    tag_243:\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"#utility.yul\":88:120   */\n      dup2\n      and\n        /* \"#utility.yul\":78:121   */\n      dup2\n      eq\n        /* \"#utility.yul\":68:139   */\n      tag_249\n      jumpi\n        /* \"#utility.yul\":135:136   */\n      0x00\n        /* \"#utility.yul\":132:133   */\n      dup1\n        /* \"#utility.yul\":125:137   */\n      revert\n        /* \"#utility.yul\":68:139   */\n    tag_249:\n        /* \"#utility.yul\":14:145   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":150:395   */\n    tag_22:\n        /* \"#utility.yul\":208:214   */\n      0x00\n        /* \"#utility.yul\":261:263   */\n      0x20\n        /* \"#utility.yul\":249:258   */\n      dup3\n        /* \"#utility.yul\":240:247   */\n      dup5\n        /* \"#utility.yul\":236:259   */\n      sub\n        /* \"#utility.yul\":232:264   */\n      slt\n        /* \"#utility.yul\":229:281   */\n      iszero\n      tag_251\n      jumpi\n        /* \"#utility.yul\":277:278   */\n      0x00\n        /* \"#utility.yul\":274:275   */\n      dup1\n        /* \"#utility.yul\":267:279   */\n      revert\n        /* \"#utility.yul\":229:281   */\n    tag_251:\n        /* \"#utility.yul\":316:325   */\n      dup2\n        /* \"#utility.yul\":303:326   */\n      calldataload\n        /* \"#utility.yul\":335:365   */\n      tag_146\n        /* \"#utility.yul\":359:364   */\n      dup2\n        /* \"#utility.yul\":335:365   */\n      tag_243\n      jump\t// in\n        /* \"#utility.yul\":592:842   */\n    tag_244:\n        /* \"#utility.yul\":677:678   */\n      0x00\n        /* \"#utility.yul\":687:800   */\n    tag_255:\n        /* \"#utility.yul\":701:707   */\n      dup4\n        /* \"#utility.yul\":698:699   */\n      dup2\n        /* \"#utility.yul\":695:708   */\n      lt\n        /* \"#utility.yul\":687:800   */\n      iszero\n      tag_257\n      jumpi\n        /* \"#utility.yul\":777:788   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":771:789   */\n      mload\n        /* \"#utility.yul\":758:769   */\n      dup4\n      dup3\n      add\n        /* \"#utility.yul\":751:790   */\n      mstore\n        /* \"#utility.yul\":723:725   */\n      0x20\n        /* \"#utility.yul\":716:726   */\n      add\n        /* \"#utility.yul\":687:800   */\n      jump(tag_255)\n    tag_257:\n      pop\n      pop\n        /* \"#utility.yul\":834:835   */\n      0x00\n        /* \"#utility.yul\":816:832   */\n      swap2\n      add\n        /* \"#utility.yul\":809:836   */\n      mstore\n        /* \"#utility.yul\":592:842   */\n      jump\t// out\n        /* \"#utility.yul\":847:1118   */\n    tag_245:\n        /* \"#utility.yul\":889:892   */\n      0x00\n        /* \"#utility.yul\":927:932   */\n      dup2\n        /* \"#utility.yul\":921:933   */\n      mload\n        /* \"#utility.yul\":954:960   */\n      dup1\n        /* \"#utility.yul\":949:952   */\n      dup5\n        /* \"#utility.yul\":942:961   */\n      mstore\n        /* \"#utility.yul\":970:1046   */\n      tag_259\n        /* \"#utility.yul\":1039:1045   */\n      dup2\n        /* \"#utility.yul\":1032:1036   */\n      0x20\n        /* \"#utility.yul\":1027:1030   */\n      dup7\n        /* \"#utility.yul\":1023:1037   */\n      add\n        /* \"#utility.yul\":1016:1020   */\n      0x20\n        /* \"#utility.yul\":1009:1014   */\n      dup7\n        /* \"#utility.yul\":1005:1021   */\n      add\n        /* \"#utility.yul\":970:1046   */\n      tag_244\n      jump\t// in\n    tag_259:\n        /* \"#utility.yul\":1100:1102   */\n      0x1f\n        /* \"#utility.yul\":1079:1094   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":1075:1104   */\n      and\n        /* \"#utility.yul\":1066:1105   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":1107:1111   */\n      0x20\n        /* \"#utility.yul\":1062:1112   */\n      add\n      swap3\n        /* \"#utility.yul\":847:1118   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1123:1343   */\n    tag_29:\n        /* \"#utility.yul\":1272:1274   */\n      0x20\n        /* \"#utility.yul\":1261:1270   */\n      dup2\n        /* \"#utility.yul\":1254:1275   */\n      mstore\n        /* \"#utility.yul\":1235:1239   */\n      0x00\n        /* \"#utility.yul\":1292:1337   */\n      tag_146\n        /* \"#utility.yul\":1333:1335   */\n      0x20\n        /* \"#utility.yul\":1322:1331   */\n      dup4\n        /* \"#utility.yul\":1318:1336   */\n      add\n        /* \"#utility.yul\":1310:1316   */\n      dup5\n        /* \"#utility.yul\":1292:1337   */\n      tag_245\n      jump\t// in\n        /* \"#utility.yul\":1348:1528   */\n    tag_32:\n        /* \"#utility.yul\":1407:1413   */\n      0x00\n        /* \"#utility.yul\":1460:1462   */\n      0x20\n        /* \"#utility.yul\":1448:1457   */\n      dup3\n        /* \"#utility.yul\":1439:1446   */\n      dup5\n        /* \"#utility.yul\":1435:1458   */\n      sub\n        /* \"#utility.yul\":1431:1463   */\n      slt\n        /* \"#utility.yul\":1428:1480   */\n      iszero\n      tag_263\n      jumpi\n        /* \"#utility.yul\":1476:1477   */\n      0x00\n        /* \"#utility.yul\":1473:1474   */\n      dup1\n        /* \"#utility.yul\":1466:1478   */\n      revert\n        /* \"#utility.yul\":1428:1480   */\n    tag_263:\n      pop\n        /* \"#utility.yul\":1499:1522   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":1348:1528   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1741:1914   */\n    tag_246:\n        /* \"#utility.yul\":1809:1829   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1858:1889   */\n      dup2\n      and\n        /* \"#utility.yul\":1848:1890   */\n      dup2\n      eq\n        /* \"#utility.yul\":1838:1908   */\n      tag_266\n      jumpi\n        /* \"#utility.yul\":1904:1905   */\n      0x00\n        /* \"#utility.yul\":1901:1902   */\n      dup1\n        /* \"#utility.yul\":1894:1906   */\n      revert\n        /* \"#utility.yul\":1838:1908   */\n    tag_266:\n        /* \"#utility.yul\":1741:1914   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1919:2173   */\n    tag_38:\n        /* \"#utility.yul\":1987:1993   */\n      0x00\n        /* \"#utility.yul\":1995:2001   */\n      dup1\n        /* \"#utility.yul\":2048:2050   */\n      0x40\n        /* \"#utility.yul\":2036:2045   */\n      dup4\n        /* \"#utility.yul\":2027:2034   */\n      dup6\n        /* \"#utility.yul\":2023:2046   */\n      sub\n        /* \"#utility.yul\":2019:2051   */\n      slt\n        /* \"#utility.yul\":2016:2068   */\n      iszero\n      tag_268\n      jumpi\n        /* \"#utility.yul\":2064:2065   */\n      0x00\n        /* \"#utility.yul\":2061:2062   */\n      dup1\n        /* \"#utility.yul\":2054:2066   */\n      revert\n        /* \"#utility.yul\":2016:2068   */\n    tag_268:\n        /* \"#utility.yul\":2087:2116   */\n      tag_269\n        /* \"#utility.yul\":2106:2115   */\n      dup4\n        /* \"#utility.yul\":2087:2116   */\n      tag_246\n      jump\t// in\n    tag_269:\n        /* \"#utility.yul\":2077:2116   */\n      swap5\n        /* \"#utility.yul\":2163:2165   */\n      0x20\n        /* \"#utility.yul\":2148:2166   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":2135:2167   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":1919:2173   */\n      jump\t// out\n        /* \"#utility.yul\":2360:2688   */\n    tag_46:\n        /* \"#utility.yul\":2437:2443   */\n      0x00\n        /* \"#utility.yul\":2445:2451   */\n      dup1\n        /* \"#utility.yul\":2453:2459   */\n      0x00\n        /* \"#utility.yul\":2506:2508   */\n      0x60\n        /* \"#utility.yul\":2494:2503   */\n      dup5\n        /* \"#utility.yul\":2485:2492   */\n      dup7\n        /* \"#utility.yul\":2481:2504   */\n      sub\n        /* \"#utility.yul\":2477:2509   */\n      slt\n        /* \"#utility.yul\":2474:2526   */\n      iszero\n      tag_272\n      jumpi\n        /* \"#utility.yul\":2522:2523   */\n      0x00\n        /* \"#utility.yul\":2519:2520   */\n      dup1\n        /* \"#utility.yul\":2512:2524   */\n      revert\n        /* \"#utility.yul\":2474:2526   */\n    tag_272:\n        /* \"#utility.yul\":2545:2574   */\n      tag_273\n        /* \"#utility.yul\":2564:2573   */\n      dup5\n        /* \"#utility.yul\":2545:2574   */\n      tag_246\n      jump\t// in\n    tag_273:\n        /* \"#utility.yul\":2535:2574   */\n      swap3\n      pop\n        /* \"#utility.yul\":2593:2631   */\n      tag_274\n        /* \"#utility.yul\":2627:2629   */\n      0x20\n        /* \"#utility.yul\":2616:2625   */\n      dup6\n        /* \"#utility.yul\":2612:2630   */\n      add\n        /* \"#utility.yul\":2593:2631   */\n      tag_246\n      jump\t// in\n    tag_274:\n        /* \"#utility.yul\":2583:2631   */\n      swap2\n      pop\n        /* \"#utility.yul\":2678:2680   */\n      0x40\n        /* \"#utility.yul\":2667:2676   */\n      dup5\n        /* \"#utility.yul\":2663:2681   */\n      add\n        /* \"#utility.yul\":2650:2682   */\n      calldataload\n        /* \"#utility.yul\":2640:2682   */\n      swap1\n      pop\n        /* \"#utility.yul\":2360:2688   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":2693:2879   */\n    tag_57:\n        /* \"#utility.yul\":2752:2758   */\n      0x00\n        /* \"#utility.yul\":2805:2807   */\n      0x20\n        /* \"#utility.yul\":2793:2802   */\n      dup3\n        /* \"#utility.yul\":2784:2791   */\n      dup5\n        /* \"#utility.yul\":2780:2803   */\n      sub\n        /* \"#utility.yul\":2776:2808   */\n      slt\n        /* \"#utility.yul\":2773:2825   */\n      iszero\n      tag_276\n      jumpi\n        /* \"#utility.yul\":2821:2822   */\n      0x00\n        /* \"#utility.yul\":2818:2819   */\n      dup1\n        /* \"#utility.yul\":2811:2823   */\n      revert\n        /* \"#utility.yul\":2773:2825   */\n    tag_276:\n        /* \"#utility.yul\":2844:2873   */\n      tag_146\n        /* \"#utility.yul\":2863:2872   */\n      dup3\n        /* \"#utility.yul\":2844:2873   */\n      tag_246\n      jump\t// in\n        /* \"#utility.yul\":2884:3231   */\n    tag_65:\n        /* \"#utility.yul\":2949:2955   */\n      0x00\n        /* \"#utility.yul\":2957:2963   */\n      dup1\n        /* \"#utility.yul\":3010:3012   */\n      0x40\n        /* \"#utility.yul\":2998:3007   */\n      dup4\n        /* \"#utility.yul\":2989:2996   */\n      dup6\n        /* \"#utility.yul\":2985:3008   */\n      sub\n        /* \"#utility.yul\":2981:3013   */\n      slt\n        /* \"#utility.yul\":2978:3030   */\n      iszero\n      tag_279\n      jumpi\n        /* \"#utility.yul\":3026:3027   */\n      0x00\n        /* \"#utility.yul\":3023:3024   */\n      dup1\n        /* \"#utility.yul\":3016:3028   */\n      revert\n        /* \"#utility.yul\":2978:3030   */\n    tag_279:\n        /* \"#utility.yul\":3049:3078   */\n      tag_280\n        /* \"#utility.yul\":3068:3077   */\n      dup4\n        /* \"#utility.yul\":3049:3078   */\n      tag_246\n      jump\t// in\n    tag_280:\n        /* \"#utility.yul\":3039:3078   */\n      swap2\n      pop\n        /* \"#utility.yul\":3128:3130   */\n      0x20\n        /* \"#utility.yul\":3117:3126   */\n      dup4\n        /* \"#utility.yul\":3113:3131   */\n      add\n        /* \"#utility.yul\":3100:3132   */\n      calldataload\n        /* \"#utility.yul\":3175:3180   */\n      dup1\n        /* \"#utility.yul\":3168:3181   */\n      iszero\n        /* \"#utility.yul\":3161:3182   */\n      iszero\n        /* \"#utility.yul\":3154:3159   */\n      dup2\n        /* \"#utility.yul\":3151:3183   */\n      eq\n        /* \"#utility.yul\":3141:3201   */\n      tag_281\n      jumpi\n        /* \"#utility.yul\":3197:3198   */\n      0x00\n        /* \"#utility.yul\":3194:3195   */\n      dup1\n        /* \"#utility.yul\":3187:3199   */\n      revert\n        /* \"#utility.yul\":3141:3201   */\n    tag_281:\n        /* \"#utility.yul\":3220:3225   */\n      dup1\n        /* \"#utility.yul\":3210:3225   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":2884:3231   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3236:3363   */\n    tag_213:\n        /* \"#utility.yul\":3297:3307   */\n      0x4e487b71\n        /* \"#utility.yul\":3292:3295   */\n      0xe0\n        /* \"#utility.yul\":3288:3308   */\n      shl\n        /* \"#utility.yul\":3285:3286   */\n      0x00\n        /* \"#utility.yul\":3278:3309   */\n      mstore\n        /* \"#utility.yul\":3328:3332   */\n      0x41\n        /* \"#utility.yul\":3325:3326   */\n      0x04\n        /* \"#utility.yul\":3318:3333   */\n      mstore\n        /* \"#utility.yul\":3352:3356   */\n      0x24\n        /* \"#utility.yul\":3349:3350   */\n      0x00\n        /* \"#utility.yul\":3342:3357   */\n      revert\n        /* \"#utility.yul\":3368:4506   */\n    tag_69:\n        /* \"#utility.yul\":3463:3469   */\n      0x00\n        /* \"#utility.yul\":3471:3477   */\n      dup1\n        /* \"#utility.yul\":3479:3485   */\n      0x00\n        /* \"#utility.yul\":3487:3493   */\n      dup1\n        /* \"#utility.yul\":3540:3543   */\n      0x80\n        /* \"#utility.yul\":3528:3537   */\n      dup6\n        /* \"#utility.yul\":3519:3526   */\n      dup8\n        /* \"#utility.yul\":3515:3538   */\n      sub\n        /* \"#utility.yul\":3511:3544   */\n      slt\n        /* \"#utility.yul\":3508:3561   */\n      iszero\n      tag_284\n      jumpi\n        /* \"#utility.yul\":3557:3558   */\n      0x00\n        /* \"#utility.yul\":3554:3555   */\n      dup1\n        /* \"#utility.yul\":3547:3559   */\n      revert\n        /* \"#utility.yul\":3508:3561   */\n    tag_284:\n        /* \"#utility.yul\":3580:3609   */\n      tag_285\n        /* \"#utility.yul\":3599:3608   */\n      dup6\n        /* \"#utility.yul\":3580:3609   */\n      tag_246\n      jump\t// in\n    tag_285:\n        /* \"#utility.yul\":3570:3609   */\n      swap4\n      pop\n        /* \"#utility.yul\":3628:3666   */\n      tag_286\n        /* \"#utility.yul\":3662:3664   */\n      0x20\n        /* \"#utility.yul\":3651:3660   */\n      dup7\n        /* \"#utility.yul\":3647:3665   */\n      add\n        /* \"#utility.yul\":3628:3666   */\n      tag_246\n      jump\t// in\n    tag_286:\n        /* \"#utility.yul\":3618:3666   */\n      swap3\n      pop\n        /* \"#utility.yul\":3713:3715   */\n      0x40\n        /* \"#utility.yul\":3702:3711   */\n      dup6\n        /* \"#utility.yul\":3698:3716   */\n      add\n        /* \"#utility.yul\":3685:3717   */\n      calldataload\n        /* \"#utility.yul\":3675:3717   */\n      swap2\n      pop\n        /* \"#utility.yul\":3768:3770   */\n      0x60\n        /* \"#utility.yul\":3757:3766   */\n      dup6\n        /* \"#utility.yul\":3753:3771   */\n      add\n        /* \"#utility.yul\":3740:3772   */\n      calldataload\n        /* \"#utility.yul\":3791:3809   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":3832:3834   */\n      dup1\n        /* \"#utility.yul\":3824:3830   */\n      dup3\n        /* \"#utility.yul\":3821:3835   */\n      gt\n        /* \"#utility.yul\":3818:3852   */\n      iszero\n      tag_287\n      jumpi\n        /* \"#utility.yul\":3848:3849   */\n      0x00\n        /* \"#utility.yul\":3845:3846   */\n      dup1\n        /* \"#utility.yul\":3838:3850   */\n      revert\n        /* \"#utility.yul\":3818:3852   */\n    tag_287:\n        /* \"#utility.yul\":3886:3892   */\n      dup2\n        /* \"#utility.yul\":3875:3884   */\n      dup8\n        /* \"#utility.yul\":3871:3893   */\n      add\n        /* \"#utility.yul\":3861:3893   */\n      swap2\n      pop\n        /* \"#utility.yul\":3931:3938   */\n      dup8\n        /* \"#utility.yul\":3924:3928   */\n      0x1f\n        /* \"#utility.yul\":3920:3922   */\n      dup4\n        /* \"#utility.yul\":3916:3929   */\n      add\n        /* \"#utility.yul\":3912:3939   */\n      slt\n        /* \"#utility.yul\":3902:3957   */\n      tag_288\n      jumpi\n        /* \"#utility.yul\":3953:3954   */\n      0x00\n        /* \"#utility.yul\":3950:3951   */\n      dup1\n        /* \"#utility.yul\":3943:3955   */\n      revert\n        /* \"#utility.yul\":3902:3957   */\n    tag_288:\n        /* \"#utility.yul\":3989:3991   */\n      dup2\n        /* \"#utility.yul\":3976:3992   */\n      calldataload\n        /* \"#utility.yul\":4011:4013   */\n      dup2\n        /* \"#utility.yul\":4007:4009   */\n      dup2\n        /* \"#utility.yul\":4004:4014   */\n      gt\n        /* \"#utility.yul\":4001:4037   */\n      iszero\n      tag_290\n      jumpi\n        /* \"#utility.yul\":4017:4035   */\n      tag_290\n      tag_213\n      jump\t// in\n    tag_290:\n        /* \"#utility.yul\":4092:4094   */\n      0x40\n        /* \"#utility.yul\":4086:4095   */\n      mload\n        /* \"#utility.yul\":4060:4062   */\n      0x1f\n        /* \"#utility.yul\":4146:4159   */\n      dup3\n      add\n      not(0x1f)\n        /* \"#utility.yul\":4142:4164   */\n      swap1\n      dup2\n      and\n        /* \"#utility.yul\":4166:4168   */\n      0x3f\n        /* \"#utility.yul\":4138:4169   */\n      add\n        /* \"#utility.yul\":4134:4174   */\n      and\n        /* \"#utility.yul\":4122:4175   */\n      dup2\n      add\n      swap1\n        /* \"#utility.yul\":4190:4208   */\n      dup4\n      dup3\n      gt\n        /* \"#utility.yul\":4210:4232   */\n      dup2\n      dup4\n      lt\n        /* \"#utility.yul\":4187:4233   */\n      or\n        /* \"#utility.yul\":4184:4256   */\n      iszero\n      tag_292\n      jumpi\n        /* \"#utility.yul\":4236:4254   */\n      tag_292\n      tag_213\n      jump\t// in\n    tag_292:\n        /* \"#utility.yul\":4276:4286   */\n      dup2\n        /* \"#utility.yul\":4272:4274   */\n      0x40\n        /* \"#utility.yul\":4265:4287   */\n      mstore\n        /* \"#utility.yul\":4311:4313   */\n      dup3\n        /* \"#utility.yul\":4303:4309   */\n      dup2\n        /* \"#utility.yul\":4296:4314   */\n      mstore\n        /* \"#utility.yul\":4351:4358   */\n      dup11\n        /* \"#utility.yul\":4346:4348   */\n      0x20\n        /* \"#utility.yul\":4341:4343   */\n      dup5\n        /* \"#utility.yul\":4337:4339   */\n      dup8\n        /* \"#utility.yul\":4333:4344   */\n      add\n        /* \"#utility.yul\":4329:4349   */\n      add\n        /* \"#utility.yul\":4326:4359   */\n      gt\n        /* \"#utility.yul\":4323:4376   */\n      iszero\n      tag_293\n      jumpi\n        /* \"#utility.yul\":4372:4373   */\n      0x00\n        /* \"#utility.yul\":4369:4370   */\n      dup1\n        /* \"#utility.yul\":4362:4374   */\n      revert\n        /* \"#utility.yul\":4323:4376   */\n    tag_293:\n        /* \"#utility.yul\":4428:4430   */\n      dup3\n        /* \"#utility.yul\":4423:4425   */\n      0x20\n        /* \"#utility.yul\":4419:4421   */\n      dup7\n        /* \"#utility.yul\":4415:4426   */\n      add\n        /* \"#utility.yul\":4410:4412   */\n      0x20\n        /* \"#utility.yul\":4402:4408   */\n      dup4\n        /* \"#utility.yul\":4398:4413   */\n      add\n        /* \"#utility.yul\":4385:4431   */\n      calldatacopy\n        /* \"#utility.yul\":4473:4474   */\n      0x00\n        /* \"#utility.yul\":4468:4470   */\n      0x20\n        /* \"#utility.yul\":4463:4465   */\n      dup5\n        /* \"#utility.yul\":4455:4461   */\n      dup4\n        /* \"#utility.yul\":4451:4466   */\n      add\n        /* \"#utility.yul\":4447:4471   */\n      add\n        /* \"#utility.yul\":4440:4475   */\n      mstore\n        /* \"#utility.yul\":4494:4500   */\n      dup1\n        /* \"#utility.yul\":4484:4500   */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":3368:4506   */\n      swap3\n      swap6\n      swap2\n      swap5\n      pop\n      swap3\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4511:4771   */\n    tag_77:\n        /* \"#utility.yul\":4579:4585   */\n      0x00\n        /* \"#utility.yul\":4587:4593   */\n      dup1\n        /* \"#utility.yul\":4640:4642   */\n      0x40\n        /* \"#utility.yul\":4628:4637   */\n      dup4\n        /* \"#utility.yul\":4619:4626   */\n      dup6\n        /* \"#utility.yul\":4615:4638   */\n      sub\n        /* \"#utility.yul\":4611:4643   */\n      slt\n        /* \"#utility.yul\":4608:4660   */\n      iszero\n      tag_295\n      jumpi\n        /* \"#utility.yul\":4656:4657   */\n      0x00\n        /* \"#utility.yul\":4653:4654   */\n      dup1\n        /* \"#utility.yul\":4646:4658   */\n      revert\n        /* \"#utility.yul\":4608:4660   */\n    tag_295:\n        /* \"#utility.yul\":4679:4708   */\n      tag_296\n        /* \"#utility.yul\":4698:4707   */\n      dup4\n        /* \"#utility.yul\":4679:4708   */\n      tag_246\n      jump\t// in\n    tag_296:\n        /* \"#utility.yul\":4669:4708   */\n      swap2\n      pop\n        /* \"#utility.yul\":4727:4765   */\n      tag_297\n        /* \"#utility.yul\":4761:4763   */\n      0x20\n        /* \"#utility.yul\":4750:4759   */\n      dup5\n        /* \"#utility.yul\":4746:4764   */\n      add\n        /* \"#utility.yul\":4727:4765   */\n      tag_246\n      jump\t// in\n    tag_297:\n        /* \"#utility.yul\":4717:4765   */\n      swap1\n      pop\n        /* \"#utility.yul\":4511:4771   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4776:5156   */\n    tag_87:\n        /* \"#utility.yul\":4855:4856   */\n      0x01\n        /* \"#utility.yul\":4851:4863   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":4898:4910   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":4919:4980   */\n      tag_299\n      jumpi\n        /* \"#utility.yul\":4973:4977   */\n      0x7f\n        /* \"#utility.yul\":4965:4971   */\n      dup3\n        /* \"#utility.yul\":4961:4978   */\n      and\n        /* \"#utility.yul\":4951:4978   */\n      swap2\n      pop\n        /* \"#utility.yul\":4919:4980   */\n    tag_299:\n        /* \"#utility.yul\":5026:5028   */\n      0x20\n        /* \"#utility.yul\":5018:5024   */\n      dup3\n        /* \"#utility.yul\":5015:5029   */\n      lt\n        /* \"#utility.yul\":4995:5013   */\n      dup2\n        /* \"#utility.yul\":4992:5030   */\n      sub\n        /* \"#utility.yul\":4989:5150   */\n      tag_300\n      jumpi\n        /* \"#utility.yul\":5072:5082   */\n      0x4e487b71\n        /* \"#utility.yul\":5067:5070   */\n      0xe0\n        /* \"#utility.yul\":5063:5083   */\n      shl\n        /* \"#utility.yul\":5060:5061   */\n      0x00\n        /* \"#utility.yul\":5053:5084   */\n      mstore\n        /* \"#utility.yul\":5107:5111   */\n      0x22\n        /* \"#utility.yul\":5104:5105   */\n      0x04\n        /* \"#utility.yul\":5097:5112   */\n      mstore\n        /* \"#utility.yul\":5135:5139   */\n      0x24\n        /* \"#utility.yul\":5132:5133   */\n      0x00\n        /* \"#utility.yul\":5125:5140   */\n      revert\n        /* \"#utility.yul\":4989:5150   */\n    tag_300:\n      pop\n        /* \"#utility.yul\":4776:5156   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5161:5657   */\n    tag_150:\n        /* \"#utility.yul\":5340:5343   */\n      0x00\n        /* \"#utility.yul\":5378:5384   */\n      dup4\n        /* \"#utility.yul\":5372:5385   */\n      mload\n        /* \"#utility.yul\":5394:5460   */\n      tag_302\n        /* \"#utility.yul\":5453:5459   */\n      dup2\n        /* \"#utility.yul\":5448:5451   */\n      dup5\n        /* \"#utility.yul\":5441:5445   */\n      0x20\n        /* \"#utility.yul\":5433:5439   */\n      dup9\n        /* \"#utility.yul\":5429:5446   */\n      add\n        /* \"#utility.yul\":5394:5460   */\n      tag_244\n      jump\t// in\n    tag_302:\n        /* \"#utility.yul\":5523:5536   */\n      dup4\n      mload\n        /* \"#utility.yul\":5482:5498   */\n      swap1\n      dup4\n      add\n      swap1\n        /* \"#utility.yul\":5545:5615   */\n      tag_303\n        /* \"#utility.yul\":5523:5536   */\n      dup2\n        /* \"#utility.yul\":5482:5498   */\n      dup4\n        /* \"#utility.yul\":5592:5596   */\n      0x20\n        /* \"#utility.yul\":5580:5597   */\n      dup9\n      add\n        /* \"#utility.yul\":5545:5615   */\n      tag_244\n      jump\t// in\n    tag_303:\n        /* \"#utility.yul\":5631:5651   */\n      add\n      swap5\n        /* \"#utility.yul\":5161:5657   */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5662:6151   */\n    tag_194:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":5931:5946   */\n      dup6\n      dup2\n      and\n        /* \"#utility.yul\":5913:5947   */\n      dup3\n      mstore\n        /* \"#utility.yul\":5983:5998   */\n      dup5\n      and\n        /* \"#utility.yul\":5978:5980   */\n      0x20\n        /* \"#utility.yul\":5963:5981   */\n      dup3\n      add\n        /* \"#utility.yul\":5956:5999   */\n      mstore\n        /* \"#utility.yul\":6030:6032   */\n      0x40\n        /* \"#utility.yul\":6015:6033   */\n      dup2\n      add\n        /* \"#utility.yul\":6008:6042   */\n      dup4\n      swap1\n      mstore\n        /* \"#utility.yul\":6078:6081   */\n      0x80\n        /* \"#utility.yul\":6073:6075   */\n      0x60\n        /* \"#utility.yul\":6058:6076   */\n      dup3\n      add\n        /* \"#utility.yul\":6051:6082   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":5856:5860   */\n      0x00\n      swap1\n        /* \"#utility.yul\":6099:6145   */\n      tag_305\n      swap1\n        /* \"#utility.yul\":6125:6144   */\n      dup4\n      add\n        /* \"#utility.yul\":6117:6123   */\n      dup5\n        /* \"#utility.yul\":6099:6145   */\n      tag_245\n      jump\t// in\n    tag_305:\n        /* \"#utility.yul\":6091:6145   */\n      swap7\n        /* \"#utility.yul\":5662:6151   */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6156:6405   */\n    tag_197:\n        /* \"#utility.yul\":6225:6231   */\n      0x00\n        /* \"#utility.yul\":6278:6280   */\n      0x20\n        /* \"#utility.yul\":6266:6275   */\n      dup3\n        /* \"#utility.yul\":6257:6264   */\n      dup5\n        /* \"#utility.yul\":6253:6276   */\n      sub\n        /* \"#utility.yul\":6249:6281   */\n      slt\n        /* \"#utility.yul\":6246:6298   */\n      iszero\n      tag_307\n      jumpi\n        /* \"#utility.yul\":6294:6295   */\n      0x00\n        /* \"#utility.yul\":6291:6292   */\n      dup1\n        /* \"#utility.yul\":6284:6296   */\n      revert\n        /* \"#utility.yul\":6246:6298   */\n    tag_307:\n        /* \"#utility.yul\":6326:6335   */\n      dup2\n        /* \"#utility.yul\":6320:6336   */\n      mload\n        /* \"#utility.yul\":6345:6375   */\n      tag_146\n        /* \"#utility.yul\":6369:6374   */\n      dup2\n        /* \"#utility.yul\":6345:6375   */\n      tag_243\n      jump\t// in\n\n    auxdata: 0xa2646970667358221220c4293a69f26d92ab5ded0d0da379ac1d0ac129ea7ef9a528a9bca63254b82f4d64736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_2235": {
									"entryPoint": null,
									"id": 2235,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_startTokenId_2244": {
									"entryPoint": null,
									"id": 2244,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_decode_string_fromMemory": {
									"entryPoint": 116,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory": {
									"entryPoint": 291,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"array_dataslot_string_storage": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"clean_up_bytearray_end_slots_string_storage": {
									"entryPoint": 457,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
									"entryPoint": 540,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 397,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_used_part_and_set_length_of_short_byte_array": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x41": {
									"entryPoint": 94,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:4144:14",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:14",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "46:95:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "63:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "70:3:14",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "75:10:14",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "66:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "66:20:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "56:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "56:31:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "56:31:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "103:1:14",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "106:4:14",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "96:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "96:15:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "96:15:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "127:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "130:4:14",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "120:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "120:15:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "120:15:14"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "14:127:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "210:776:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "259:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "268:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "271:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "261:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "261:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "261:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "238:6:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "246:4:14",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "234:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "234:17:14"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "253:3:14"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "230:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "230:27:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "223:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "223:35:14"
															},
															"nodeType": "YulIf",
															"src": "220:55:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "284:23:14",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "300:6:14"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "294:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "294:13:14"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "288:2:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "316:28:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "334:2:14",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "338:1:14",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "330:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "330:10:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "342:1:14",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "326:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "326:18:14"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "320:2:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "367:22:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "369:16:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "369:18:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "369:18:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "359:2:14"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "363:2:14"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "356:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "356:10:14"
															},
															"nodeType": "YulIf",
															"src": "353:36:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "398:17:14",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "412:2:14",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nodeType": "YulIdentifier",
																	"src": "408:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "408:7:14"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "402:2:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "424:23:14",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "444:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "438:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "438:9:14"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "428:6:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "456:71:14",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "478:6:14"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"name": "_1",
																										"nodeType": "YulIdentifier",
																										"src": "502:2:14"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "506:4:14",
																										"type": "",
																										"value": "0x1f"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "498:3:14"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "498:13:14"
																							},
																							{
																								"name": "_3",
																								"nodeType": "YulIdentifier",
																								"src": "513:2:14"
																							}
																						],
																						"functionName": {
																							"name": "and",
																							"nodeType": "YulIdentifier",
																							"src": "494:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "494:22:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "518:2:14",
																						"type": "",
																						"value": "63"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "490:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "490:31:14"
																			},
																			{
																				"name": "_3",
																				"nodeType": "YulIdentifier",
																				"src": "523:2:14"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "486:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "486:40:14"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "474:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "474:53:14"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "460:10:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "586:22:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "588:16:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "588:18:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "588:18:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "545:10:14"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "557:2:14"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "542:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "542:18:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "565:10:14"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "577:6:14"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "562:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "562:22:14"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "539:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "539:46:14"
															},
															"nodeType": "YulIf",
															"src": "536:72:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "624:2:14",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "628:10:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "617:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "617:22:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "617:22:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "655:6:14"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "663:2:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "648:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "648:18:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "648:18:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "675:14:14",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "685:4:14",
																"type": "",
																"value": "0x20"
															},
															"variables": [
																{
																	"name": "_4",
																	"nodeType": "YulTypedName",
																	"src": "679:2:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "735:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "744:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "747:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "737:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "737:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "737:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "712:6:14"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "720:2:14"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "708:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "708:15:14"
																			},
																			{
																				"name": "_4",
																				"nodeType": "YulIdentifier",
																				"src": "725:2:14"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "704:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "704:24:14"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "730:3:14"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "701:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "701:33:14"
															},
															"nodeType": "YulIf",
															"src": "698:53:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "760:10:14",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "769:1:14",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "764:1:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "825:87:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "memPtr",
																									"nodeType": "YulIdentifier",
																									"src": "854:6:14"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "862:1:14"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "850:3:14"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "850:14:14"
																						},
																						{
																							"name": "_4",
																							"nodeType": "YulIdentifier",
																							"src": "866:2:14"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "846:3:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "846:23:14"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "offset",
																											"nodeType": "YulIdentifier",
																											"src": "885:6:14"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "893:1:14"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "881:3:14"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "881:14:14"
																								},
																								{
																									"name": "_4",
																									"nodeType": "YulIdentifier",
																									"src": "897:2:14"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "877:3:14"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "877:23:14"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "871:5:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "871:30:14"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "839:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "839:63:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "839:63:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "790:1:14"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "793:2:14"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "787:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "787:9:14"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "797:19:14",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "799:15:14",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "808:1:14"
																				},
																				{
																					"name": "_4",
																					"nodeType": "YulIdentifier",
																					"src": "811:2:14"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "804:3:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "804:10:14"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "799:1:14"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "783:3:14",
																"statements": []
															},
															"src": "779:133:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memPtr",
																						"nodeType": "YulIdentifier",
																						"src": "936:6:14"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "944:2:14"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "932:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "932:15:14"
																			},
																			{
																				"name": "_4",
																				"nodeType": "YulIdentifier",
																				"src": "949:2:14"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "928:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "928:24:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "954:1:14",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "921:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "921:35:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "921:35:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "965:15:14",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "974:6:14"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "965:5:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_string_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "184:6:14",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "192:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "200:5:14",
														"type": ""
													}
												],
												"src": "146:840:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1109:444:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1155:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1164:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1167:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1157:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1157:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1157:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1130:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1139:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1126:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1126:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1151:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1122:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1122:32:14"
															},
															"nodeType": "YulIf",
															"src": "1119:52:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1180:30:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1200:9:14"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1194:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1194:16:14"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "1184:6:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1219:28:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1237:2:14",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1241:1:14",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "1233:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1233:10:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1245:1:14",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "1229:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1229:18:14"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "1223:2:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1274:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1283:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1286:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1276:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1276:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1276:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1262:6:14"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1270:2:14"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1259:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1259:14:14"
															},
															"nodeType": "YulIf",
															"src": "1256:34:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1299:71:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1342:9:14"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "1353:6:14"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1338:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1338:22:14"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1362:7:14"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "1309:28:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1309:61:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1299:6:14"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1379:41:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1405:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1416:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1401:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1401:18:14"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1395:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1395:25:14"
															},
															"variables": [
																{
																	"name": "offset_1",
																	"nodeType": "YulTypedName",
																	"src": "1383:8:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1449:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1458:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1461:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1451:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1451:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1451:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset_1",
																		"nodeType": "YulIdentifier",
																		"src": "1435:8:14"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1445:2:14"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1432:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1432:16:14"
															},
															"nodeType": "YulIf",
															"src": "1429:36:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1474:73:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1517:9:14"
																			},
																			{
																				"name": "offset_1",
																				"nodeType": "YulIdentifier",
																				"src": "1528:8:14"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1513:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1513:24:14"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1539:7:14"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "1484:28:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1484:63:14"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1474:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1067:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1078:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1090:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1098:6:14",
														"type": ""
													}
												],
												"src": "991:562:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1613:325:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1623:22:14",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1637:1:14",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "1640:4:14"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "1633:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1633:12:14"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "1623:6:14"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1654:38:14",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "1684:4:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1690:1:14",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "1680:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1680:12:14"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "1658:18:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1731:31:14",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1733:27:14",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "1747:6:14"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1755:4:14",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "1743:3:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1743:17:14"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1733:6:14"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "1711:18:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1704:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1704:26:14"
															},
															"nodeType": "YulIf",
															"src": "1701:61:14"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1821:111:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1842:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1849:3:14",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1854:10:14",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "1845:3:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1845:20:14"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1835:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1835:31:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1835:31:14"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1886:1:14",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1889:4:14",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1879:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1879:15:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1879:15:14"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1914:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1917:4:14",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1907:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1907:15:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1907:15:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "1777:18:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1800:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1808:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "1797:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1797:14:14"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "1774:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1774:38:14"
															},
															"nodeType": "YulIf",
															"src": "1771:161:14"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "1593:4:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1602:6:14",
														"type": ""
													}
												],
												"src": "1558:380:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1999:65:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2016:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"name": "ptr",
																		"nodeType": "YulIdentifier",
																		"src": "2019:3:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2009:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2009:14:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2009:14:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2032:26:14",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2050:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2053:4:14",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nodeType": "YulIdentifier",
																	"src": "2040:9:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2040:18:14"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "2032:4:14"
																}
															]
														}
													]
												},
												"name": "array_dataslot_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nodeType": "YulTypedName",
														"src": "1982:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "1990:4:14",
														"type": ""
													}
												],
												"src": "1943:121:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2150:464:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2183:425:14",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "2197:11:14",
																		"value": {
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "2207:1:14",
																			"type": "",
																			"value": "0"
																		},
																		"variables": [
																			{
																				"name": "_1",
																				"nodeType": "YulTypedName",
																				"src": "2201:2:14",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "2228:2:14"
																				},
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "2232:5:14"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2221:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2221:17:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2221:17:14"
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "2251:31:14",
																		"value": {
																			"arguments": [
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "2273:2:14"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2277:4:14",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "keccak256",
																				"nodeType": "YulIdentifier",
																				"src": "2263:9:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2263:19:14"
																		},
																		"variables": [
																			{
																				"name": "data",
																				"nodeType": "YulTypedName",
																				"src": "2255:4:14",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "2295:57:14",
																		"value": {
																			"arguments": [
																				{
																					"name": "data",
																					"nodeType": "YulIdentifier",
																					"src": "2318:4:14"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2328:1:14",
																							"type": "",
																							"value": "5"
																						},
																						{
																							"arguments": [
																								{
																									"name": "startIndex",
																									"nodeType": "YulIdentifier",
																									"src": "2335:10:14"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "2347:2:14",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "2331:3:14"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "2331:19:14"
																						}
																					],
																					"functionName": {
																						"name": "shr",
																						"nodeType": "YulIdentifier",
																						"src": "2324:3:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2324:27:14"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "2314:3:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2314:38:14"
																		},
																		"variables": [
																			{
																				"name": "deleteStart",
																				"nodeType": "YulTypedName",
																				"src": "2299:11:14",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "2389:23:14",
																			"statements": [
																				{
																					"nodeType": "YulAssignment",
																					"src": "2391:19:14",
																					"value": {
																						"name": "data",
																						"nodeType": "YulIdentifier",
																						"src": "2406:4:14"
																					},
																					"variableNames": [
																						{
																							"name": "deleteStart",
																							"nodeType": "YulIdentifier",
																							"src": "2391:11:14"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "startIndex",
																					"nodeType": "YulIdentifier",
																					"src": "2371:10:14"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2383:4:14",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nodeType": "YulIdentifier",
																				"src": "2368:2:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2368:20:14"
																		},
																		"nodeType": "YulIf",
																		"src": "2365:47:14"
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "2425:41:14",
																		"value": {
																			"arguments": [
																				{
																					"name": "data",
																					"nodeType": "YulIdentifier",
																					"src": "2439:4:14"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2449:1:14",
																							"type": "",
																							"value": "5"
																						},
																						{
																							"arguments": [
																								{
																									"name": "len",
																									"nodeType": "YulIdentifier",
																									"src": "2456:3:14"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "2461:2:14",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "2452:3:14"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "2452:12:14"
																						}
																					],
																					"functionName": {
																						"name": "shr",
																						"nodeType": "YulIdentifier",
																						"src": "2445:3:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2445:20:14"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "2435:3:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2435:31:14"
																		},
																		"variables": [
																			{
																				"name": "_2",
																				"nodeType": "YulTypedName",
																				"src": "2429:2:14",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "2479:24:14",
																		"value": {
																			"name": "deleteStart",
																			"nodeType": "YulIdentifier",
																			"src": "2492:11:14"
																		},
																		"variables": [
																			{
																				"name": "start",
																				"nodeType": "YulTypedName",
																				"src": "2483:5:14",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "2577:21:14",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [
																							{
																								"name": "start",
																								"nodeType": "YulIdentifier",
																								"src": "2586:5:14"
																							},
																							{
																								"name": "_1",
																								"nodeType": "YulIdentifier",
																								"src": "2593:2:14"
																							}
																						],
																						"functionName": {
																							"name": "sstore",
																							"nodeType": "YulIdentifier",
																							"src": "2579:6:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2579:17:14"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "2579:17:14"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "start",
																					"nodeType": "YulIdentifier",
																					"src": "2527:5:14"
																				},
																				{
																					"name": "_2",
																					"nodeType": "YulIdentifier",
																					"src": "2534:2:14"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nodeType": "YulIdentifier",
																				"src": "2524:2:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2524:13:14"
																		},
																		"nodeType": "YulForLoop",
																		"post": {
																			"nodeType": "YulBlock",
																			"src": "2538:26:14",
																			"statements": [
																				{
																					"nodeType": "YulAssignment",
																					"src": "2540:22:14",
																					"value": {
																						"arguments": [
																							{
																								"name": "start",
																								"nodeType": "YulIdentifier",
																								"src": "2553:5:14"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2560:1:14",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "2549:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2549:13:14"
																					},
																					"variableNames": [
																						{
																							"name": "start",
																							"nodeType": "YulIdentifier",
																							"src": "2540:5:14"
																						}
																					]
																				}
																			]
																		},
																		"pre": {
																			"nodeType": "YulBlock",
																			"src": "2520:3:14",
																			"statements": []
																		},
																		"src": "2516:82:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "len",
																		"nodeType": "YulIdentifier",
																		"src": "2166:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2171:2:14",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2163:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2163:11:14"
															},
															"nodeType": "YulIf",
															"src": "2160:448:14"
														}
													]
												},
												"name": "clean_up_bytearray_end_slots_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "2122:5:14",
														"type": ""
													},
													{
														"name": "len",
														"nodeType": "YulTypedName",
														"src": "2129:3:14",
														"type": ""
													},
													{
														"name": "startIndex",
														"nodeType": "YulTypedName",
														"src": "2134:10:14",
														"type": ""
													}
												],
												"src": "2069:545:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2704:81:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2714:65:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nodeType": "YulIdentifier",
																				"src": "2729:4:14"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "2747:1:14",
																										"type": "",
																										"value": "3"
																									},
																									{
																										"name": "len",
																										"nodeType": "YulIdentifier",
																										"src": "2750:3:14"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "2743:3:14"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "2743:11:14"
																							},
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "2760:1:14",
																										"type": "",
																										"value": "0"
																									}
																								],
																								"functionName": {
																									"name": "not",
																									"nodeType": "YulIdentifier",
																									"src": "2756:3:14"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "2756:6:14"
																							}
																						],
																						"functionName": {
																							"name": "shr",
																							"nodeType": "YulIdentifier",
																							"src": "2739:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2739:24:14"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "2735:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2735:29:14"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "2725:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2725:40:14"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2771:1:14",
																				"type": "",
																				"value": "1"
																			},
																			{
																				"name": "len",
																				"nodeType": "YulIdentifier",
																				"src": "2774:3:14"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "2767:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2767:11:14"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "2722:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2722:57:14"
															},
															"variableNames": [
																{
																	"name": "used",
																	"nodeType": "YulIdentifier",
																	"src": "2714:4:14"
																}
															]
														}
													]
												},
												"name": "extract_used_part_and_set_length_of_short_byte_array",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "2681:4:14",
														"type": ""
													},
													{
														"name": "len",
														"nodeType": "YulTypedName",
														"src": "2687:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "used",
														"nodeType": "YulTypedName",
														"src": "2695:4:14",
														"type": ""
													}
												],
												"src": "2619:166:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2886:1256:14",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2896:24:14",
															"value": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "2916:3:14"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "2910:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2910:10:14"
															},
															"variables": [
																{
																	"name": "newLen",
																	"nodeType": "YulTypedName",
																	"src": "2900:6:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2963:22:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "2965:16:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2965:18:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2965:18:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "2935:6:14"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2951:2:14",
																						"type": "",
																						"value": "64"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2955:1:14",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nodeType": "YulIdentifier",
																					"src": "2947:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2947:10:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2959:1:14",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2943:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2943:18:14"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2932:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2932:30:14"
															},
															"nodeType": "YulIf",
															"src": "2929:56:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nodeType": "YulIdentifier",
																		"src": "3038:4:14"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "slot",
																						"nodeType": "YulIdentifier",
																						"src": "3076:4:14"
																					}
																				],
																				"functionName": {
																					"name": "sload",
																					"nodeType": "YulIdentifier",
																					"src": "3070:5:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3070:11:14"
																			}
																		],
																		"functionName": {
																			"name": "extract_byte_array_length",
																			"nodeType": "YulIdentifier",
																			"src": "3044:25:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3044:38:14"
																	},
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "3084:6:14"
																	}
																],
																"functionName": {
																	"name": "clean_up_bytearray_end_slots_string_storage",
																	"nodeType": "YulIdentifier",
																	"src": "2994:43:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2994:97:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2994:97:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3100:18:14",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3117:1:14",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "srcOffset",
																	"nodeType": "YulTypedName",
																	"src": "3104:9:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3127:23:14",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3146:4:14",
																"type": "",
																"value": "0x20"
															},
															"variables": [
																{
																	"name": "srcOffset_1",
																	"nodeType": "YulTypedName",
																	"src": "3131:11:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3159:24:14",
															"value": {
																"name": "srcOffset_1",
																"nodeType": "YulIdentifier",
																"src": "3172:11:14"
															},
															"variableNames": [
																{
																	"name": "srcOffset",
																	"nodeType": "YulIdentifier",
																	"src": "3159:9:14"
																}
															]
														},
														{
															"cases": [
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "3229:656:14",
																		"statements": [
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "3243:35:14",
																				"value": {
																					"arguments": [
																						{
																							"name": "newLen",
																							"nodeType": "YulIdentifier",
																							"src": "3262:6:14"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "3274:2:14",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nodeType": "YulIdentifier",
																								"src": "3270:3:14"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "3270:7:14"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nodeType": "YulIdentifier",
																						"src": "3258:3:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3258:20:14"
																				},
																				"variables": [
																					{
																						"name": "loopEnd",
																						"nodeType": "YulTypedName",
																						"src": "3247:7:14",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "3291:49:14",
																				"value": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nodeType": "YulIdentifier",
																							"src": "3335:4:14"
																						}
																					],
																					"functionName": {
																						"name": "array_dataslot_string_storage",
																						"nodeType": "YulIdentifier",
																						"src": "3305:29:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3305:35:14"
																				},
																				"variables": [
																					{
																						"name": "dstPtr",
																						"nodeType": "YulTypedName",
																						"src": "3295:6:14",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "3353:10:14",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3362:1:14",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "i",
																						"nodeType": "YulTypedName",
																						"src": "3357:1:14",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "3440:172:14",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nodeType": "YulIdentifier",
																										"src": "3465:6:14"
																									},
																									{
																										"arguments": [
																											{
																												"arguments": [
																													{
																														"name": "src",
																														"nodeType": "YulIdentifier",
																														"src": "3483:3:14"
																													},
																													{
																														"name": "srcOffset",
																														"nodeType": "YulIdentifier",
																														"src": "3488:9:14"
																													}
																												],
																												"functionName": {
																													"name": "add",
																													"nodeType": "YulIdentifier",
																													"src": "3479:3:14"
																												},
																												"nodeType": "YulFunctionCall",
																												"src": "3479:19:14"
																											}
																										],
																										"functionName": {
																											"name": "mload",
																											"nodeType": "YulIdentifier",
																											"src": "3473:5:14"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "3473:26:14"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nodeType": "YulIdentifier",
																									"src": "3458:6:14"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "3458:42:14"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "3458:42:14"
																						},
																						{
																							"nodeType": "YulAssignment",
																							"src": "3517:24:14",
																							"value": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nodeType": "YulIdentifier",
																										"src": "3531:6:14"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "3539:1:14",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "3527:3:14"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "3527:14:14"
																							},
																							"variableNames": [
																								{
																									"name": "dstPtr",
																									"nodeType": "YulIdentifier",
																									"src": "3517:6:14"
																								}
																							]
																						},
																						{
																							"nodeType": "YulAssignment",
																							"src": "3558:40:14",
																							"value": {
																								"arguments": [
																									{
																										"name": "srcOffset",
																										"nodeType": "YulIdentifier",
																										"src": "3575:9:14"
																									},
																									{
																										"name": "srcOffset_1",
																										"nodeType": "YulIdentifier",
																										"src": "3586:11:14"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "3571:3:14"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "3571:27:14"
																							},
																							"variableNames": [
																								{
																									"name": "srcOffset",
																									"nodeType": "YulIdentifier",
																									"src": "3558:9:14"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "3387:1:14"
																						},
																						{
																							"name": "loopEnd",
																							"nodeType": "YulIdentifier",
																							"src": "3390:7:14"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nodeType": "YulIdentifier",
																						"src": "3384:2:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3384:14:14"
																				},
																				"nodeType": "YulForLoop",
																				"post": {
																					"nodeType": "YulBlock",
																					"src": "3399:28:14",
																					"statements": [
																						{
																							"nodeType": "YulAssignment",
																							"src": "3401:24:14",
																							"value": {
																								"arguments": [
																									{
																										"name": "i",
																										"nodeType": "YulIdentifier",
																										"src": "3410:1:14"
																									},
																									{
																										"name": "srcOffset_1",
																										"nodeType": "YulIdentifier",
																										"src": "3413:11:14"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "3406:3:14"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "3406:19:14"
																							},
																							"variableNames": [
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "3401:1:14"
																								}
																							]
																						}
																					]
																				},
																				"pre": {
																					"nodeType": "YulBlock",
																					"src": "3380:3:14",
																					"statements": []
																				},
																				"src": "3376:236:14"
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "3660:166:14",
																					"statements": [
																						{
																							"nodeType": "YulVariableDeclaration",
																							"src": "3678:43:14",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nodeType": "YulIdentifier",
																												"src": "3705:3:14"
																											},
																											{
																												"name": "srcOffset",
																												"nodeType": "YulIdentifier",
																												"src": "3710:9:14"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nodeType": "YulIdentifier",
																											"src": "3701:3:14"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "3701:19:14"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nodeType": "YulIdentifier",
																									"src": "3695:5:14"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "3695:26:14"
																							},
																							"variables": [
																								{
																									"name": "lastValue",
																									"nodeType": "YulTypedName",
																									"src": "3682:9:14",
																									"type": ""
																								}
																							]
																						},
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nodeType": "YulIdentifier",
																										"src": "3745:6:14"
																									},
																									{
																										"arguments": [
																											{
																												"name": "lastValue",
																												"nodeType": "YulIdentifier",
																												"src": "3757:9:14"
																											},
																											{
																												"arguments": [
																													{
																														"arguments": [
																															{
																																"arguments": [
																																	{
																																		"arguments": [
																																			{
																																				"kind": "number",
																																				"nodeType": "YulLiteral",
																																				"src": "3784:1:14",
																																				"type": "",
																																				"value": "3"
																																			},
																																			{
																																				"name": "newLen",
																																				"nodeType": "YulIdentifier",
																																				"src": "3787:6:14"
																																			}
																																		],
																																		"functionName": {
																																			"name": "shl",
																																			"nodeType": "YulIdentifier",
																																			"src": "3780:3:14"
																																		},
																																		"nodeType": "YulFunctionCall",
																																		"src": "3780:14:14"
																																	},
																																	{
																																		"kind": "number",
																																		"nodeType": "YulLiteral",
																																		"src": "3796:3:14",
																																		"type": "",
																																		"value": "248"
																																	}
																																],
																																"functionName": {
																																	"name": "and",
																																	"nodeType": "YulIdentifier",
																																	"src": "3776:3:14"
																																},
																																"nodeType": "YulFunctionCall",
																																"src": "3776:24:14"
																															},
																															{
																																"arguments": [
																																	{
																																		"kind": "number",
																																		"nodeType": "YulLiteral",
																																		"src": "3806:1:14",
																																		"type": "",
																																		"value": "0"
																																	}
																																],
																																"functionName": {
																																	"name": "not",
																																	"nodeType": "YulIdentifier",
																																	"src": "3802:3:14"
																																},
																																"nodeType": "YulFunctionCall",
																																"src": "3802:6:14"
																															}
																														],
																														"functionName": {
																															"name": "shr",
																															"nodeType": "YulIdentifier",
																															"src": "3772:3:14"
																														},
																														"nodeType": "YulFunctionCall",
																														"src": "3772:37:14"
																													}
																												],
																												"functionName": {
																													"name": "not",
																													"nodeType": "YulIdentifier",
																													"src": "3768:3:14"
																												},
																												"nodeType": "YulFunctionCall",
																												"src": "3768:42:14"
																											}
																										],
																										"functionName": {
																											"name": "and",
																											"nodeType": "YulIdentifier",
																											"src": "3753:3:14"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "3753:58:14"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nodeType": "YulIdentifier",
																									"src": "3738:6:14"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "3738:74:14"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "3738:74:14"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "loopEnd",
																							"nodeType": "YulIdentifier",
																							"src": "3631:7:14"
																						},
																						{
																							"name": "newLen",
																							"nodeType": "YulIdentifier",
																							"src": "3640:6:14"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nodeType": "YulIdentifier",
																						"src": "3628:2:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3628:19:14"
																				},
																				"nodeType": "YulIf",
																				"src": "3625:201:14"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nodeType": "YulIdentifier",
																							"src": "3846:4:14"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "3860:1:14",
																											"type": "",
																											"value": "1"
																										},
																										{
																											"name": "newLen",
																											"nodeType": "YulIdentifier",
																											"src": "3863:6:14"
																										}
																									],
																									"functionName": {
																										"name": "shl",
																										"nodeType": "YulIdentifier",
																										"src": "3856:3:14"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "3856:14:14"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "3872:1:14",
																									"type": "",
																									"value": "1"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "3852:3:14"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "3852:22:14"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nodeType": "YulIdentifier",
																						"src": "3839:6:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3839:36:14"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "3839:36:14"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "3222:663:14",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3227:1:14",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "3902:234:14",
																		"statements": [
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "3916:14:14",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3929:1:14",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "value",
																						"nodeType": "YulTypedName",
																						"src": "3920:5:14",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "3965:67:14",
																					"statements": [
																						{
																							"nodeType": "YulAssignment",
																							"src": "3983:35:14",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nodeType": "YulIdentifier",
																												"src": "4002:3:14"
																											},
																											{
																												"name": "srcOffset",
																												"nodeType": "YulIdentifier",
																												"src": "4007:9:14"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nodeType": "YulIdentifier",
																											"src": "3998:3:14"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "3998:19:14"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nodeType": "YulIdentifier",
																									"src": "3992:5:14"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "3992:26:14"
																							},
																							"variableNames": [
																								{
																									"name": "value",
																									"nodeType": "YulIdentifier",
																									"src": "3983:5:14"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"name": "newLen",
																					"nodeType": "YulIdentifier",
																					"src": "3946:6:14"
																				},
																				"nodeType": "YulIf",
																				"src": "3943:89:14"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nodeType": "YulIdentifier",
																							"src": "4052:4:14"
																						},
																						{
																							"arguments": [
																								{
																									"name": "value",
																									"nodeType": "YulIdentifier",
																									"src": "4111:5:14"
																								},
																								{
																									"name": "newLen",
																									"nodeType": "YulIdentifier",
																									"src": "4118:6:14"
																								}
																							],
																							"functionName": {
																								"name": "extract_used_part_and_set_length_of_short_byte_array",
																								"nodeType": "YulIdentifier",
																								"src": "4058:52:14"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "4058:67:14"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nodeType": "YulIdentifier",
																						"src": "4045:6:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4045:81:14"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "4045:81:14"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "3894:242:14",
																	"value": "default"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "3202:6:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3210:2:14",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3199:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3199:14:14"
															},
															"nodeType": "YulSwitch",
															"src": "3192:944:14"
														}
													]
												},
												"name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nodeType": "YulTypedName",
														"src": "2871:4:14",
														"type": ""
													},
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "2877:3:14",
														"type": ""
													}
												],
												"src": "2790:1352:14"
											}
										]
									},
									"contents": "{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        let _4 := 0x20\n        if gt(add(add(offset, _1), _4), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _1) { i := add(i, _4) }\n        {\n            mstore(add(add(memPtr, i), _4), mload(add(add(offset, i), _4)))\n        }\n        mstore(add(add(memPtr, _1), _4), 0)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n}",
									"id": 14,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1296 CODESIZE SUB DUP1 PUSH3 0x1296 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x123 JUMP JUMPDEST PUSH1 0x2 PUSH3 0x42 DUP4 DUP3 PUSH3 0x21C JUMP JUMPDEST POP PUSH1 0x3 PUSH3 0x51 DUP3 DUP3 PUSH3 0x21C JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 SSTORE POP PUSH3 0x2E8 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0xA3 JUMPI PUSH3 0xA3 PUSH3 0x5E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0xCE JUMPI PUSH3 0xCE PUSH3 0x5E JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0xEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x10F JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0xF0 JUMP JUMPDEST PUSH1 0x0 SWAP4 DUP2 ADD SWAP1 SWAP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x137 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x14F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x15D DUP7 DUP4 DUP8 ADD PUSH3 0x74 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x174 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x183 DUP6 DUP3 DUP7 ADD PUSH3 0x74 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x1A2 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x1C3 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x217 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x1F2 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x213 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x1FE JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x238 JUMPI PUSH3 0x238 PUSH3 0x5E JUMP JUMPDEST PUSH3 0x250 DUP2 PUSH3 0x249 DUP5 SLOAD PUSH3 0x18D JUMP JUMPDEST DUP5 PUSH3 0x1C9 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x288 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x26F JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x213 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x2B9 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x298 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x2D8 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0xF9E DUP1 PUSH3 0x2F8 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xEA JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x1D6 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x1E9 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x20F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1A8 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1BB JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x157 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x16C JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x195 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x117 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x12C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x102 PUSH2 0xFD CALLDATASIZE PUSH1 0x4 PUSH2 0xC0E JUMP JUMPDEST PUSH2 0x24B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x11F PUSH2 0x29D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10E SWAP2 SWAP1 PUSH2 0xC7B JUMP JUMPDEST PUSH2 0x13F PUSH2 0x13A CALLDATASIZE PUSH1 0x4 PUSH2 0xC8E JUMP JUMPDEST PUSH2 0x32F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x10E JUMP JUMPDEST PUSH2 0x16A PUSH2 0x165 CALLDATASIZE PUSH1 0x4 PUSH2 0xCC3 JUMP JUMPDEST PUSH2 0x373 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SLOAD SUB JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x10E JUMP JUMPDEST PUSH2 0x16A PUSH2 0x190 CALLDATASIZE PUSH1 0x4 PUSH2 0xCED JUMP JUMPDEST PUSH2 0x400 JUMP JUMPDEST PUSH2 0x16A PUSH2 0x1A3 CALLDATASIZE PUSH1 0x4 PUSH2 0xCED JUMP JUMPDEST PUSH2 0x40B JUMP JUMPDEST PUSH2 0x13F PUSH2 0x1B6 CALLDATASIZE PUSH1 0x4 PUSH2 0xC8E JUMP JUMPDEST PUSH2 0x426 JUMP JUMPDEST PUSH2 0x174 PUSH2 0x1C9 CALLDATASIZE PUSH1 0x4 PUSH2 0xD29 JUMP JUMPDEST PUSH2 0x438 JUMP JUMPDEST PUSH2 0x11F PUSH2 0x487 JUMP JUMPDEST PUSH2 0x16A PUSH2 0x1E4 CALLDATASIZE PUSH1 0x4 PUSH2 0xD44 JUMP JUMPDEST PUSH2 0x496 JUMP JUMPDEST PUSH2 0x16A PUSH2 0x1F7 CALLDATASIZE PUSH1 0x4 PUSH2 0xD96 JUMP JUMPDEST PUSH2 0x52B JUMP JUMPDEST PUSH2 0x11F PUSH2 0x20A CALLDATASIZE PUSH1 0x4 PUSH2 0xC8E JUMP JUMPDEST PUSH2 0x57C JUMP JUMPDEST PUSH2 0x102 PUSH2 0x21D CALLDATASIZE PUSH1 0x4 PUSH2 0xE72 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x27C JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x297 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x2AC SWAP1 PUSH2 0xEA5 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2D8 SWAP1 PUSH2 0xEA5 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x325 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2FA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x325 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x308 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33A DUP3 PUSH2 0x60D JUMP JUMPDEST PUSH2 0x357 JUMPI PUSH1 0x40 MLOAD PUSH4 0x33D1C039 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x37E DUP3 PUSH2 0x426 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x3B2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x250FDEE3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 ISZERO SWAP1 PUSH2 0x3D2 JUMPI POP PUSH2 0x3D0 DUP2 CALLER PUSH2 0x21D JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x3F0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x67D9DCA1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3FB DUP4 DUP4 DUP4 PUSH2 0x638 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x3FB DUP4 DUP4 DUP4 PUSH2 0x694 JUMP JUMPDEST PUSH2 0x3FB DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x52B JUMP JUMPDEST PUSH1 0x0 PUSH2 0x431 DUP3 PUSH2 0x883 JUMP JUMPDEST MLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x461 JUMPI PUSH1 0x40 MLOAD PUSH4 0x23D3AD81 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x2AC SWAP1 PUSH2 0xEA5 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SUB PUSH2 0x4BF JUMPI PUSH1 0x40 MLOAD PUSH4 0xB06307DB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP1 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x536 DUP5 DUP5 DUP5 PUSH2 0x694 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE ISZERO ISZERO DUP1 ISZERO PUSH2 0x558 JUMPI POP PUSH2 0x556 DUP5 DUP5 DUP5 DUP5 PUSH2 0x99F JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x576 JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x587 DUP3 PUSH2 0x60D JUMP JUMPDEST PUSH2 0x5A4 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA14C4B5 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x5BB PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x5DB JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x606 JUMP JUMPDEST DUP1 PUSH2 0x5E5 DUP5 PUSH2 0xA8A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5F6 SWAP3 SWAP2 SWAP1 PUSH2 0xEDF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP3 LT DUP1 ISZERO PUSH2 0x297 JUMPI POP POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP6 SWAP4 SWAP2 DUP6 AND SWAP2 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x69F DUP3 PUSH2 0x883 JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x6D6 JUMPI PUSH1 0x40 MLOAD PUSH3 0xA11481 PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND EQ DUP1 PUSH2 0x6F4 JUMPI POP PUSH2 0x6F4 DUP6 CALLER PUSH2 0x21D JUMP JUMPDEST DUP1 PUSH2 0x70F JUMPI POP CALLER PUSH2 0x704 DUP5 PUSH2 0x32F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP1 POP DUP1 PUSH2 0x72F JUMPI PUSH1 0x40 MLOAD PUSH4 0x2CE44B5F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x756 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3A954ECD PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x762 PUSH1 0x0 DUP5 DUP8 PUSH2 0x638 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT DUP1 DUP3 AND PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP4 AND PUSH1 0x0 NOT ADD DUP4 AND OR SWAP1 SWAP3 SSTORE DUP10 DUP7 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD SWAP4 DUP5 AND SWAP4 DUP4 AND PUSH1 0x1 SWAP1 DUP2 ADD DUP5 AND SWAP5 SWAP1 SWAP5 OR SWAP1 SSTORE DUP10 DUP7 MSTORE PUSH1 0x4 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP1 SWAP5 OR PUSH1 0x1 PUSH1 0xA0 SHL TIMESTAMP SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 MUL OR DUP4 SSTORE DUP8 ADD DUP1 DUP5 MSTORE SWAP3 KECCAK256 DUP1 SLOAD SWAP2 SWAP4 SWAP1 SWAP2 AND PUSH2 0x838 JUMPI PUSH1 0x0 SLOAD DUP3 EQ PUSH2 0x838 JUMPI DUP1 SLOAD PUSH1 0x20 DUP7 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND OR OR DUP2 SSTORE JUMPDEST POP POP POP DUP3 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 PUSH1 0x0 SLOAD DUP2 LT ISZERO PUSH2 0x986 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE SWAP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0xA0 SHL DUP2 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 SWAP2 DIV PUSH1 0xFF AND ISZERO ISZERO SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 PUSH2 0x984 JUMPI DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x91A JUMPI SWAP4 SWAP3 POP POP POP JUMP JUMPDEST POP PUSH1 0x0 NOT ADD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE SWAP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP1 DUP4 MSTORE PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP4 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE ISZERO PUSH2 0x97F JUMPI SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x91A JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6F96CDA1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x9D4 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xF0E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xA0F JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xA0C SWAP2 DUP2 ADD SWAP1 PUSH2 0xF4B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xA6D JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xA3D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xA42 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0xA65 JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xA97 DUP4 PUSH2 0xB1D JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xAB7 JUMPI PUSH2 0xAB7 PUSH2 0xD80 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xAE1 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0xAEB JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0xB5C JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0xB88 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0xBA6 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0xBBE JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0xBD2 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0xBE4 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x297 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xC0B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x606 DUP2 PUSH2 0xBF5 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xC46 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xC2E JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xC67 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xC2B JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x606 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xC4F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xCBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xCD6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCDF DUP4 PUSH2 0xCA7 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xD02 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD0B DUP5 PUSH2 0xCA7 JUMP JUMPDEST SWAP3 POP PUSH2 0xD19 PUSH1 0x20 DUP6 ADD PUSH2 0xCA7 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x606 DUP3 PUSH2 0xCA7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD57 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD60 DUP4 PUSH2 0xCA7 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xD75 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xDAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDB5 DUP6 PUSH2 0xCA7 JUMP JUMPDEST SWAP4 POP PUSH2 0xDC3 PUSH1 0x20 DUP7 ADD PUSH2 0xCA7 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xDE7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xDFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xE0D JUMPI PUSH2 0xE0D PUSH2 0xD80 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0xE35 JUMPI PUSH2 0xE35 PUSH2 0xD80 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0xE4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE85 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE8E DUP4 PUSH2 0xCA7 JUMP JUMPDEST SWAP2 POP PUSH2 0xE9C PUSH1 0x20 DUP5 ADD PUSH2 0xCA7 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xEB9 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xED9 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0xEF1 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0xC2B JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0xF05 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0xC2B JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0xF41 SWAP1 DUP4 ADD DUP5 PUSH2 0xC4F JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x606 DUP2 PUSH2 0xBF5 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC4 0x29 GASPRICE PUSH10 0xF26D92AB5DED0D0DA379 0xAC SAR EXP 0xC1 0x29 0xEA PUSH31 0xF9A528A9BCA63254B82F4D64736F6C63430008120033000000000000000000 ",
							"sourceMap": "1515:20351:12:-:0;;;3413:154;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3479:5;:13;3487:5;3479;:13;:::i;:::-;-1:-1:-1;3502:7:12;:17;3512:7;3502;:17;:::i;:::-;-1:-1:-1;;3715:7:12;3529:31;;-1:-1:-1;1515:20351:12;;14:127:14;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:840;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:14;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:14;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;954:1;932:15;;;928:24;;;921:35;;;;936:6;146:840;-1:-1:-1;;;;146:840:14:o;991:562::-;1090:6;1098;1151:2;1139:9;1130:7;1126:23;1122:32;1119:52;;;1167:1;1164;1157:12;1119:52;1194:16;;-1:-1:-1;;;;;1259:14:14;;;1256:34;;;1286:1;1283;1276:12;1256:34;1309:61;1362:7;1353:6;1342:9;1338:22;1309:61;:::i;:::-;1299:71;;1416:2;1405:9;1401:18;1395:25;1379:41;;1445:2;1435:8;1432:16;1429:36;;;1461:1;1458;1451:12;1429:36;;1484:63;1539:7;1528:8;1517:9;1513:24;1484:63;:::i;:::-;1474:73;;;991:562;;;;;:::o;1558:380::-;1637:1;1633:12;;;;1680;;;1701:61;;1755:4;1747:6;1743:17;1733:27;;1701:61;1808:2;1800:6;1797:14;1777:18;1774:38;1771:161;;1854:10;1849:3;1845:20;1842:1;1835:31;1889:4;1886:1;1879:15;1917:4;1914:1;1907:15;1771:161;;1558:380;;;:::o;2069:545::-;2171:2;2166:3;2163:11;2160:448;;;2207:1;2232:5;2228:2;2221:17;2277:4;2273:2;2263:19;2347:2;2335:10;2331:19;2328:1;2324:27;2318:4;2314:38;2383:4;2371:10;2368:20;2365:47;;;-1:-1:-1;2406:4:14;2365:47;2461:2;2456:3;2452:12;2449:1;2445:20;2439:4;2435:31;2425:41;;2516:82;2534:2;2527:5;2524:13;2516:82;;;2579:17;;;2560:1;2549:13;2516:82;;;2520:3;;;2160:448;2069:545;;;:::o;2790:1352::-;2910:10;;-1:-1:-1;;;;;2932:30:14;;2929:56;;;2965:18;;:::i;:::-;2994:97;3084:6;3044:38;3076:4;3070:11;3044:38;:::i;:::-;3038:4;2994:97;:::i;:::-;3146:4;;3210:2;3199:14;;3227:1;3222:663;;;;3929:1;3946:6;3943:89;;;-1:-1:-1;3998:19:14;;;3992:26;3943:89;-1:-1:-1;;2747:1:14;2743:11;;;2739:24;2735:29;2725:40;2771:1;2767:11;;;2722:57;4045:81;;3192:944;;3222:663;2016:1;2009:14;;;2053:4;2040:18;;-1:-1:-1;;3258:20:14;;;3376:236;3390:7;3387:1;3384:14;3376:236;;;3479:19;;;3473:26;3458:42;;3571:27;;;;3539:1;3527:14;;;;3406:19;;3376:236;;;3380:3;3640:6;3631:7;3628:19;3625:201;;;3701:19;;;3695:26;-1:-1:-1;;3784:1:14;3780:14;;;3796:3;3776:24;3772:37;3768:42;3753:58;3738:74;;3625:201;-1:-1:-1;;;;;3872:1:14;3856:14;;;3852:22;3839:36;;-1:-1:-1;2790:1352:14:o;:::-;1515:20351:12;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_afterTokenTransfers_3440": {
									"entryPoint": null,
									"id": 3440,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_approve_3359": {
									"entryPoint": 1592,
									"id": 3359,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_baseURI_2556": {
									"entryPoint": null,
									"id": 2556,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_beforeTokenTransfers_3427": {
									"entryPoint": null,
									"id": 3427,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_checkContractOnERC721Received_3414": {
									"entryPoint": 2463,
									"id": 3414,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@_exists_2773": {
									"entryPoint": 1549,
									"id": 2773,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_msgSender_615": {
									"entryPoint": null,
									"id": 615,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_ownershipOf_2469": {
									"entryPoint": 2179,
									"id": 2469,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_startTokenId_2244": {
									"entryPoint": null,
									"id": 2244,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transfer_3142": {
									"entryPoint": 1684,
									"id": 3142,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@approve_2602": {
									"entryPoint": 883,
									"id": 2602,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@balanceOf_2331": {
									"entryPoint": 1080,
									"id": 2331,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@getApproved_2624": {
									"entryPoint": 815,
									"id": 2624,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@isApprovedForAll_2676": {
									"entryPoint": null,
									"id": 2676,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@isContract_291": {
									"entryPoint": null,
									"id": 291,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@log10_1593": {
									"entryPoint": 2845,
									"id": 1593,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@name_2494": {
									"entryPoint": 669,
									"id": 2494,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@ownerOf_2484": {
									"entryPoint": 1062,
									"id": 2484,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@safeTransferFrom_2713": {
									"entryPoint": 1035,
									"id": 2713,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@safeTransferFrom_2749": {
									"entryPoint": 1323,
									"id": 2749,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@setApprovalForAll_2658": {
									"entryPoint": 1174,
									"id": 2658,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@supportsInterface_2303": {
									"entryPoint": 587,
									"id": 2303,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@supportsInterface_877": {
									"entryPoint": null,
									"id": 877,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@symbol_2504": {
									"entryPoint": 1159,
									"id": 2504,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@toString_684": {
									"entryPoint": 2698,
									"id": 684,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@tokenURI_2547": {
									"entryPoint": 1404,
									"id": 2547,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@totalSupply_2259": {
									"entryPoint": null,
									"id": 2259,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_2694": {
									"entryPoint": 1024,
									"id": 2694,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"abi_decode_address": {
									"entryPoint": 3239,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 3369,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 3698,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 3309,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr": {
									"entryPoint": 3478,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 4
								},
								"abi_decode_tuple_t_addresst_bool": {
									"entryPoint": 3396,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 3267,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_bytes4": {
									"entryPoint": 3086,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bytes4_fromMemory": {
									"entryPoint": 3915,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 3214,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_string": {
									"entryPoint": 3151,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 3807,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed": {
									"entryPoint": 3854,
									"id": null,
									"parameterSlots": 5,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 3195,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"copy_memory_to_memory_with_cleanup": {
									"entryPoint": 3115,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 3749,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x12": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 3456,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_bytes4": {
									"entryPoint": 3061,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:6539:14",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:14",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "58:87:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "123:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "132:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "135:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "125:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "125:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "125:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "81:5:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "92:5:14"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "103:3:14",
																								"type": "",
																								"value": "224"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "108:10:14",
																								"type": "",
																								"value": "0xffffffff"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "99:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "99:20:14"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "88:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "88:32:14"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "78:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "78:43:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "71:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "71:51:14"
															},
															"nodeType": "YulIf",
															"src": "68:71:14"
														}
													]
												},
												"name": "validator_revert_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "47:5:14",
														"type": ""
													}
												],
												"src": "14:131:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "219:176:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "265:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "274:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "277:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "267:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "267:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "267:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "240:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "249:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "236:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "236:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "261:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "232:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "232:32:14"
															},
															"nodeType": "YulIf",
															"src": "229:52:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "290:36:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "316:9:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "303:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "303:23:14"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "294:5:14",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "359:5:14"
																	}
																],
																"functionName": {
																	"name": "validator_revert_bytes4",
																	"nodeType": "YulIdentifier",
																	"src": "335:23:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "335:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "335:30:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "374:15:14",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "384:5:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "374:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "185:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "196:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "208:6:14",
														"type": ""
													}
												],
												"src": "150:245:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "495:92:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "505:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "517:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "528:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "513:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "513:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "505:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "547:9:14"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "572:6:14"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "565:6:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "565:14:14"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "558:6:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "558:22:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "540:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "540:41:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "540:41:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "464:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "475:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "486:4:14",
														"type": ""
													}
												],
												"src": "400:187:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "658:184:14",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "668:10:14",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "677:1:14",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "672:1:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "737:63:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "762:3:14"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "767:1:14"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "758:3:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "758:11:14"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "781:3:14"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "786:1:14"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "777:3:14"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "777:11:14"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "771:5:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "771:18:14"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "751:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "751:39:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "751:39:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "698:1:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "701:6:14"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "695:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "695:13:14"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "709:19:14",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "711:15:14",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "720:1:14"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "723:2:14",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "716:3:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "716:10:14"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "711:1:14"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "691:3:14",
																"statements": []
															},
															"src": "687:113:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nodeType": "YulIdentifier",
																				"src": "820:3:14"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "825:6:14"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "816:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "816:16:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "834:1:14",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "809:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "809:27:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "809:27:14"
														}
													]
												},
												"name": "copy_memory_to_memory_with_cleanup",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "636:3:14",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "641:3:14",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "646:6:14",
														"type": ""
													}
												],
												"src": "592:250:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "897:221:14",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "907:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "927:5:14"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "921:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "921:12:14"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "911:6:14",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "949:3:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "954:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "942:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "942:19:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "942:19:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1009:5:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1016:4:14",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1005:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1005:16:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "1027:3:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1032:4:14",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1023:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1023:14:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1039:6:14"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nodeType": "YulIdentifier",
																	"src": "970:34:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "970:76:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "970:76:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1055:57:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "1070:3:14"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "1083:6:14"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1091:2:14",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "1079:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1079:15:14"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1100:2:14",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "1096:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1096:7:14"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "1075:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1075:29:14"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1066:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1066:39:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1107:4:14",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1062:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1062:50:14"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "1055:3:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_string",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "874:5:14",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "881:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "889:3:14",
														"type": ""
													}
												],
												"src": "847:271:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1244:99:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1261:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1272:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1254:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1254:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1254:21:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1284:53:14",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1310:6:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1322:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1333:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1318:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1318:18:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_string",
																	"nodeType": "YulIdentifier",
																	"src": "1292:17:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1292:45:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1284:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1213:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1224:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1235:4:14",
														"type": ""
													}
												],
												"src": "1123:220:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1418:110:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1464:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1473:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1476:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1466:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1466:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1466:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1439:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1448:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1435:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1435:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1460:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1431:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1431:32:14"
															},
															"nodeType": "YulIf",
															"src": "1428:52:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1489:33:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1512:9:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1499:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1499:23:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1489:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1384:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1395:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1407:6:14",
														"type": ""
													}
												],
												"src": "1348:180:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1634:102:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1644:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1656:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1667:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1652:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1652:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1644:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1686:9:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1701:6:14"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1717:3:14",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1722:1:14",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "1713:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1713:11:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1726:1:14",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "1709:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1709:19:14"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1697:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1697:32:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1679:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1679:51:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1679:51:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1603:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1614:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1625:4:14",
														"type": ""
													}
												],
												"src": "1533:203:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1790:124:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1800:29:14",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1822:6:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1809:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1809:20:14"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "1800:5:14"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1892:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1901:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1904:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1894:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1894:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1894:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1851:5:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1862:5:14"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "1877:3:14",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "1882:1:14",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "1873:3:14"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "1873:11:14"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1886:1:14",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "1869:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1869:19:14"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "1858:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1858:31:14"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1848:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1848:42:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1841:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1841:50:14"
															},
															"nodeType": "YulIf",
															"src": "1838:70:14"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1769:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1780:5:14",
														"type": ""
													}
												],
												"src": "1741:173:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2006:167:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2052:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2061:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2064:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2054:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2054:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2054:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2027:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2036:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2023:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2023:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2048:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2019:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2019:32:14"
															},
															"nodeType": "YulIf",
															"src": "2016:52:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2077:39:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2106:9:14"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2087:18:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2087:29:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2077:6:14"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2125:42:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2152:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2163:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2148:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2148:18:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2135:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2135:32:14"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2125:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1964:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1975:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1987:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1995:6:14",
														"type": ""
													}
												],
												"src": "1919:254:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2279:76:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2289:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2301:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2312:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2297:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2297:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2289:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2331:9:14"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2342:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2324:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2324:25:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2324:25:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2248:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2259:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2270:4:14",
														"type": ""
													}
												],
												"src": "2178:177:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2464:224:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2510:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2519:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2522:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2512:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2512:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2512:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2485:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2494:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2481:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2481:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2506:2:14",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2477:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2477:32:14"
															},
															"nodeType": "YulIf",
															"src": "2474:52:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2535:39:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2564:9:14"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2545:18:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2545:29:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2535:6:14"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2583:48:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2616:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2627:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2612:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2612:18:14"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2593:18:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2593:38:14"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2583:6:14"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2640:42:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2667:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2678:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2663:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2663:18:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2650:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2650:32:14"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "2640:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2414:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2425:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2437:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2445:6:14",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "2453:6:14",
														"type": ""
													}
												],
												"src": "2360:328:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2763:116:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2809:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2818:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2821:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2811:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2811:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2811:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2784:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2793:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2780:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2780:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2805:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2776:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2776:32:14"
															},
															"nodeType": "YulIf",
															"src": "2773:52:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2834:39:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2863:9:14"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2844:18:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2844:29:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2834:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2729:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2740:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2752:6:14",
														"type": ""
													}
												],
												"src": "2693:186:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2968:263:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3014:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3023:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3026:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3016:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3016:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3016:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2989:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2998:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2985:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2985:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3010:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2981:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2981:32:14"
															},
															"nodeType": "YulIf",
															"src": "2978:52:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3039:39:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3068:9:14"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "3049:18:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3049:29:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3039:6:14"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3087:45:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3117:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3128:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3113:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3113:18:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3100:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3100:32:14"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "3091:5:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3185:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3194:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3197:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3187:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3187:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3187:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3154:5:14"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "3175:5:14"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "3168:6:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3168:13:14"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "3161:6:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3161:21:14"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "3151:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3151:32:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3144:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3144:40:14"
															},
															"nodeType": "YulIf",
															"src": "3141:60:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3210:15:14",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "3220:5:14"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "3210:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2926:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2937:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2949:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2957:6:14",
														"type": ""
													}
												],
												"src": "2884:347:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3268:95:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3285:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3292:3:14",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3297:10:14",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "3288:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3288:20:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3278:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3278:31:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3278:31:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3325:1:14",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3328:4:14",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3318:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3318:15:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3318:15:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3349:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3352:4:14",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "3342:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3342:15:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3342:15:14"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "3236:127:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3498:1008:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3545:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3554:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3557:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3547:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3547:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3547:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3519:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3528:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3515:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3515:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3540:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3511:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3511:33:14"
															},
															"nodeType": "YulIf",
															"src": "3508:53:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3570:39:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3599:9:14"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "3580:18:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3580:29:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3570:6:14"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3618:48:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3651:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3662:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3647:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3647:18:14"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "3628:18:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3628:38:14"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "3618:6:14"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3675:42:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3702:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3713:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3698:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3698:18:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3685:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3685:32:14"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "3675:6:14"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3726:46:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3757:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3768:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3753:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3753:18:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3740:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3740:32:14"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "3730:6:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3781:28:14",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3791:18:14",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "3785:2:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3836:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3845:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3848:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3838:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3838:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3838:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3824:6:14"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "3832:2:14"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3821:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3821:14:14"
															},
															"nodeType": "YulIf",
															"src": "3818:34:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3861:32:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3875:9:14"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3886:6:14"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3871:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3871:22:14"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "3865:2:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3941:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3950:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3953:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3943:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3943:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3943:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "3920:2:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3924:4:14",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3916:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3916:13:14"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3931:7:14"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "3912:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3912:27:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3905:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3905:35:14"
															},
															"nodeType": "YulIf",
															"src": "3902:55:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3966:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "3989:2:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3976:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3976:16:14"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "3970:2:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4015:22:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "4017:16:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4017:18:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4017:18:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "4007:2:14"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "4011:2:14"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4004:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4004:10:14"
															},
															"nodeType": "YulIf",
															"src": "4001:36:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4046:17:14",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4060:2:14",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nodeType": "YulIdentifier",
																	"src": "4056:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4056:7:14"
															},
															"variables": [
																{
																	"name": "_4",
																	"nodeType": "YulTypedName",
																	"src": "4050:2:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4072:23:14",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4092:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4086:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4086:9:14"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "4076:6:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4104:71:14",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "4126:6:14"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"name": "_3",
																										"nodeType": "YulIdentifier",
																										"src": "4150:2:14"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "4154:4:14",
																										"type": "",
																										"value": "0x1f"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "4146:3:14"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "4146:13:14"
																							},
																							{
																								"name": "_4",
																								"nodeType": "YulIdentifier",
																								"src": "4161:2:14"
																							}
																						],
																						"functionName": {
																							"name": "and",
																							"nodeType": "YulIdentifier",
																							"src": "4142:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4142:22:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4166:2:14",
																						"type": "",
																						"value": "63"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4138:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4138:31:14"
																			},
																			{
																				"name": "_4",
																				"nodeType": "YulIdentifier",
																				"src": "4171:2:14"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4134:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4134:40:14"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4122:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4122:53:14"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "4108:10:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4234:22:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "4236:16:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4236:18:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4236:18:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "4193:10:14"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "4205:2:14"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "4190:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4190:18:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "4213:10:14"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "4225:6:14"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "4210:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4210:22:14"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "4187:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4187:46:14"
															},
															"nodeType": "YulIf",
															"src": "4184:72:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4272:2:14",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "4276:10:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4265:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4265:22:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4265:22:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "4303:6:14"
																	},
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "4311:2:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4296:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4296:18:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4296:18:14"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4360:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4369:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4372:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4362:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4362:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4362:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "4337:2:14"
																					},
																					{
																						"name": "_3",
																						"nodeType": "YulIdentifier",
																						"src": "4341:2:14"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4333:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4333:11:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4346:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4329:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4329:20:14"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "4351:7:14"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4326:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4326:33:14"
															},
															"nodeType": "YulIf",
															"src": "4323:53:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "4402:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4410:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4398:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4398:15:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "4419:2:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4423:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4415:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4415:11:14"
																	},
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "4428:2:14"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nodeType": "YulIdentifier",
																	"src": "4385:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4385:46:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4385:46:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memPtr",
																						"nodeType": "YulIdentifier",
																						"src": "4455:6:14"
																					},
																					{
																						"name": "_3",
																						"nodeType": "YulIdentifier",
																						"src": "4463:2:14"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4451:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4451:15:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4468:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4447:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4447:24:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4473:1:14",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4440:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4440:35:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4440:35:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4484:16:14",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "4494:6:14"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "4484:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3440:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3451:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3463:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3471:6:14",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "3479:6:14",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "3487:6:14",
														"type": ""
													}
												],
												"src": "3368:1138:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4598:173:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4644:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4653:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4656:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4646:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4646:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4646:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4619:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4628:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4615:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4615:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4640:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4611:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4611:32:14"
															},
															"nodeType": "YulIf",
															"src": "4608:52:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4669:39:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4698:9:14"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "4679:18:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4679:29:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "4669:6:14"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4717:48:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4750:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4761:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4746:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4746:18:14"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "4727:18:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4727:38:14"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "4717:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4556:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4567:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4579:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4587:6:14",
														"type": ""
													}
												],
												"src": "4511:260:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4831:325:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4841:22:14",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4855:1:14",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "4858:4:14"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "4851:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4851:12:14"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "4841:6:14"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4872:38:14",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "4902:4:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4908:1:14",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "4898:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4898:12:14"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "4876:18:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4949:31:14",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "4951:27:14",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "4965:6:14"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4973:4:14",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "4961:3:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4961:17:14"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "4951:6:14"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "4929:18:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4922:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4922:26:14"
															},
															"nodeType": "YulIf",
															"src": "4919:61:14"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5039:111:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5060:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5067:3:14",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5072:10:14",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "5063:3:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5063:20:14"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5053:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5053:31:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5053:31:14"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5104:1:14",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5107:4:14",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5097:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5097:15:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5097:15:14"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5132:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5135:4:14",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5125:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5125:15:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5125:15:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "4995:18:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "5018:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5026:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "5015:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5015:14:14"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "4992:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4992:38:14"
															},
															"nodeType": "YulIf",
															"src": "4989:161:14"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "4811:4:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "4820:6:14",
														"type": ""
													}
												],
												"src": "4776:380:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5348:309:14",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5358:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5378:6:14"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5372:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5372:13:14"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "5362:6:14",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "5433:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5441:4:14",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5429:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5429:17:14"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5448:3:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5453:6:14"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nodeType": "YulIdentifier",
																	"src": "5394:34:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5394:66:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5394:66:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5469:29:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5486:3:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5491:6:14"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5482:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5482:16:14"
															},
															"variables": [
																{
																	"name": "end_1",
																	"nodeType": "YulTypedName",
																	"src": "5473:5:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5507:29:14",
															"value": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "5529:6:14"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5523:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5523:13:14"
															},
															"variables": [
																{
																	"name": "length_1",
																	"nodeType": "YulTypedName",
																	"src": "5511:8:14",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "5584:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5592:4:14",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5580:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5580:17:14"
																	},
																	{
																		"name": "end_1",
																		"nodeType": "YulIdentifier",
																		"src": "5599:5:14"
																	},
																	{
																		"name": "length_1",
																		"nodeType": "YulIdentifier",
																		"src": "5606:8:14"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nodeType": "YulIdentifier",
																	"src": "5545:34:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5545:70:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5545:70:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5624:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "end_1",
																		"nodeType": "YulIdentifier",
																		"src": "5635:5:14"
																	},
																	{
																		"name": "length_1",
																		"nodeType": "YulIdentifier",
																		"src": "5642:8:14"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5631:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5631:20:14"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "5624:3:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5316:3:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5321:6:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5329:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "5340:3:14",
														"type": ""
													}
												],
												"src": "5161:496:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5865:286:14",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5875:29:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5893:3:14",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5898:1:14",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "5889:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5889:11:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5902:1:14",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "5885:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5885:19:14"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "5879:2:14",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5920:9:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "5935:6:14"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "5943:2:14"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5931:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5931:15:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5913:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5913:34:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5913:34:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5967:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5978:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5963:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5963:18:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "5987:6:14"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "5995:2:14"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5983:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5983:15:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5956:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5956:43:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5956:43:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6019:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6030:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6015:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6015:18:14"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "6035:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6008:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6008:34:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6008:34:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6062:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6073:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6058:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6058:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6078:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6051:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6051:31:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6051:31:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6091:54:14",
															"value": {
																"arguments": [
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "6117:6:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6129:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6140:3:14",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6125:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6125:19:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_string",
																	"nodeType": "YulIdentifier",
																	"src": "6099:17:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6099:46:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6091:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5810:9:14",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "5821:6:14",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "5829:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5837:6:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5845:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5856:4:14",
														"type": ""
													}
												],
												"src": "5662:489:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6236:169:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6282:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6291:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6294:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6284:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6284:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6284:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6257:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6266:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6253:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6253:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6278:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "6249:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6249:32:14"
															},
															"nodeType": "YulIf",
															"src": "6246:52:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6307:29:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6326:9:14"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "6320:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6320:16:14"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "6311:5:14",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "6369:5:14"
																	}
																],
																"functionName": {
																	"name": "validator_revert_bytes4",
																	"nodeType": "YulIdentifier",
																	"src": "6345:23:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6345:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6345:30:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6384:15:14",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "6394:5:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "6384:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes4_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6202:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "6213:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6225:6:14",
														"type": ""
													}
												],
												"src": "6156:249:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6442:95:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6459:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6466:3:14",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6471:10:14",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6462:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6462:20:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6452:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6452:31:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6452:31:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6499:1:14",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6502:4:14",
																		"type": "",
																		"value": "0x12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6492:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6492:15:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6492:15:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6523:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6526:4:14",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "6516:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6516:15:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6516:15:14"
														}
													]
												},
												"name": "panic_error_0x12",
												"nodeType": "YulFunctionDefinition",
												"src": "6410:127:14"
											}
										]
									},
									"contents": "{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), 0)\n        value3 := memPtr\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), end_1, length_1)\n        end := add(end_1, length_1)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n}",
									"id": 14,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100ea5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb465146101d6578063b88d4fde146101e9578063c87b56dd146101fc578063e985e9c51461020f57600080fd5b80636352211e146101a857806370a08231146101bb57806395d89b41146101ce57600080fd5b8063095ea7b3116100c8578063095ea7b31461015757806318160ddd1461016c57806323b872dd1461018257806342842e0e1461019557600080fd5b806301ffc9a7146100ef57806306fdde0314610117578063081812fc1461012c575b600080fd5b6101026100fd366004610c0e565b61024b565b60405190151581526020015b60405180910390f35b61011f61029d565b60405161010e9190610c7b565b61013f61013a366004610c8e565b61032f565b6040516001600160a01b03909116815260200161010e565b61016a610165366004610cc3565b610373565b005b600154600054035b60405190815260200161010e565b61016a610190366004610ced565b610400565b61016a6101a3366004610ced565b61040b565b61013f6101b6366004610c8e565b610426565b6101746101c9366004610d29565b610438565b61011f610487565b61016a6101e4366004610d44565b610496565b61016a6101f7366004610d96565b61052b565b61011f61020a366004610c8e565b61057c565b61010261021d366004610e72565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b148061027c57506001600160e01b03198216635b5e139f60e01b145b8061029757506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600280546102ac90610ea5565b80601f01602080910402602001604051908101604052809291908181526020018280546102d890610ea5565b80156103255780601f106102fa57610100808354040283529160200191610325565b820191906000526020600020905b81548152906001019060200180831161030857829003601f168201915b5050505050905090565b600061033a8261060d565b610357576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b600061037e82610426565b9050806001600160a01b0316836001600160a01b0316036103b25760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b038216148015906103d257506103d0813361021d565b155b156103f0576040516367d9dca160e11b815260040160405180910390fd5b6103fb838383610638565b505050565b6103fb838383610694565b6103fb8383836040518060200160405280600081525061052b565b600061043182610883565b5192915050565b60006001600160a01b038216610461576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b031660009081526005602052604090205467ffffffffffffffff1690565b6060600380546102ac90610ea5565b336001600160a01b038316036104bf5760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610536848484610694565b6001600160a01b0383163b1515801561055857506105568484848461099f565b155b15610576576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b60606105878261060d565b6105a457604051630a14c4b560e41b815260040160405180910390fd5b60006105bb60408051602081019091526000815290565b905080516000036105db5760405180602001604052806000815250610606565b806105e584610a8a565b6040516020016105f6929190610edf565b6040516020818303038152906040525b9392505050565b6000805482108015610297575050600090815260046020526040902054600160e01b900460ff161590565b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600061069f82610883565b9050836001600160a01b031681600001516001600160a01b0316146106d65760405162a1148160e81b815260040160405180910390fd5b6000336001600160a01b03861614806106f457506106f4853361021d565b8061070f5750336107048461032f565b6001600160a01b0316145b90508061072f57604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b03841661075657604051633a954ecd60e21b815260040160405180910390fd5b61076260008487610638565b6001600160a01b038581166000908152600560209081526040808320805467ffffffffffffffff1980821667ffffffffffffffff92831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600490945282852080546001600160e01b031916909417600160a01b42909216919091021783558701808452922080549193909116610838576000548214610838578054602086015167ffffffffffffffff16600160a01b026001600160e01b03199091166001600160a01b038a16171781555b50505082846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050505050565b60408051606081018252600080825260208201819052918101919091528160005481101561098657600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b810467ffffffffffffffff1692820192909252600160e01b90910460ff161515918101829052906109845780516001600160a01b03161561091a579392505050565b5060001901600081815260046020908152604091829020825160608101845290546001600160a01b038116808352600160a01b820467ffffffffffffffff1693830193909352600160e01b900460ff161515928101929092521561097f579392505050565b61091a565b505b604051636f96cda160e11b815260040160405180910390fd5b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a02906109d4903390899088908890600401610f0e565b6020604051808303816000875af1925050508015610a0f575060408051601f3d908101601f19168201909252610a0c91810190610f4b565b60015b610a6d573d808015610a3d576040519150601f19603f3d011682016040523d82523d6000602084013e610a42565b606091505b508051600003610a65576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b60606000610a9783610b1d565b600101905060008167ffffffffffffffff811115610ab757610ab7610d80565b6040519080825280601f01601f191660200182016040528015610ae1576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610aeb57509392505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310610b5c5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310610b88576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610ba657662386f26fc10000830492506010015b6305f5e1008310610bbe576305f5e100830492506008015b6127108310610bd257612710830492506004015b60648310610be4576064830492506002015b600a83106102975760010192915050565b6001600160e01b031981168114610c0b57600080fd5b50565b600060208284031215610c2057600080fd5b813561060681610bf5565b60005b83811015610c46578181015183820152602001610c2e565b50506000910152565b60008151808452610c67816020860160208601610c2b565b601f01601f19169290920160200192915050565b6020815260006106066020830184610c4f565b600060208284031215610ca057600080fd5b5035919050565b80356001600160a01b0381168114610cbe57600080fd5b919050565b60008060408385031215610cd657600080fd5b610cdf83610ca7565b946020939093013593505050565b600080600060608486031215610d0257600080fd5b610d0b84610ca7565b9250610d1960208501610ca7565b9150604084013590509250925092565b600060208284031215610d3b57600080fd5b61060682610ca7565b60008060408385031215610d5757600080fd5b610d6083610ca7565b915060208301358015158114610d7557600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215610dac57600080fd5b610db585610ca7565b9350610dc360208601610ca7565b925060408501359150606085013567ffffffffffffffff80821115610de757600080fd5b818701915087601f830112610dfb57600080fd5b813581811115610e0d57610e0d610d80565b604051601f8201601f19908116603f01168101908382118183101715610e3557610e35610d80565b816040528281528a6020848701011115610e4e57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215610e8557600080fd5b610e8e83610ca7565b9150610e9c60208401610ca7565b90509250929050565b600181811c90821680610eb957607f821691505b602082108103610ed957634e487b7160e01b600052602260045260246000fd5b50919050565b60008351610ef1818460208801610c2b565b835190830190610f05818360208801610c2b565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090610f4190830184610c4f565b9695505050505050565b600060208284031215610f5d57600080fd5b815161060681610bf556fea2646970667358221220c4293a69f26d92ab5ded0d0da379ac1d0ac129ea7ef9a528a9bca63254b82f4d64736f6c63430008120033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xEA JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x1D6 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x1E9 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x20F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1A8 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1BB JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x157 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x16C JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x195 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x117 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x12C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x102 PUSH2 0xFD CALLDATASIZE PUSH1 0x4 PUSH2 0xC0E JUMP JUMPDEST PUSH2 0x24B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x11F PUSH2 0x29D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10E SWAP2 SWAP1 PUSH2 0xC7B JUMP JUMPDEST PUSH2 0x13F PUSH2 0x13A CALLDATASIZE PUSH1 0x4 PUSH2 0xC8E JUMP JUMPDEST PUSH2 0x32F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x10E JUMP JUMPDEST PUSH2 0x16A PUSH2 0x165 CALLDATASIZE PUSH1 0x4 PUSH2 0xCC3 JUMP JUMPDEST PUSH2 0x373 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SLOAD SUB JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x10E JUMP JUMPDEST PUSH2 0x16A PUSH2 0x190 CALLDATASIZE PUSH1 0x4 PUSH2 0xCED JUMP JUMPDEST PUSH2 0x400 JUMP JUMPDEST PUSH2 0x16A PUSH2 0x1A3 CALLDATASIZE PUSH1 0x4 PUSH2 0xCED JUMP JUMPDEST PUSH2 0x40B JUMP JUMPDEST PUSH2 0x13F PUSH2 0x1B6 CALLDATASIZE PUSH1 0x4 PUSH2 0xC8E JUMP JUMPDEST PUSH2 0x426 JUMP JUMPDEST PUSH2 0x174 PUSH2 0x1C9 CALLDATASIZE PUSH1 0x4 PUSH2 0xD29 JUMP JUMPDEST PUSH2 0x438 JUMP JUMPDEST PUSH2 0x11F PUSH2 0x487 JUMP JUMPDEST PUSH2 0x16A PUSH2 0x1E4 CALLDATASIZE PUSH1 0x4 PUSH2 0xD44 JUMP JUMPDEST PUSH2 0x496 JUMP JUMPDEST PUSH2 0x16A PUSH2 0x1F7 CALLDATASIZE PUSH1 0x4 PUSH2 0xD96 JUMP JUMPDEST PUSH2 0x52B JUMP JUMPDEST PUSH2 0x11F PUSH2 0x20A CALLDATASIZE PUSH1 0x4 PUSH2 0xC8E JUMP JUMPDEST PUSH2 0x57C JUMP JUMPDEST PUSH2 0x102 PUSH2 0x21D CALLDATASIZE PUSH1 0x4 PUSH2 0xE72 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x27C JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x297 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x2AC SWAP1 PUSH2 0xEA5 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2D8 SWAP1 PUSH2 0xEA5 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x325 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2FA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x325 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x308 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33A DUP3 PUSH2 0x60D JUMP JUMPDEST PUSH2 0x357 JUMPI PUSH1 0x40 MLOAD PUSH4 0x33D1C039 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x37E DUP3 PUSH2 0x426 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x3B2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x250FDEE3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 ISZERO SWAP1 PUSH2 0x3D2 JUMPI POP PUSH2 0x3D0 DUP2 CALLER PUSH2 0x21D JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x3F0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x67D9DCA1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3FB DUP4 DUP4 DUP4 PUSH2 0x638 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x3FB DUP4 DUP4 DUP4 PUSH2 0x694 JUMP JUMPDEST PUSH2 0x3FB DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x52B JUMP JUMPDEST PUSH1 0x0 PUSH2 0x431 DUP3 PUSH2 0x883 JUMP JUMPDEST MLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x461 JUMPI PUSH1 0x40 MLOAD PUSH4 0x23D3AD81 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x2AC SWAP1 PUSH2 0xEA5 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SUB PUSH2 0x4BF JUMPI PUSH1 0x40 MLOAD PUSH4 0xB06307DB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP1 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x536 DUP5 DUP5 DUP5 PUSH2 0x694 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE ISZERO ISZERO DUP1 ISZERO PUSH2 0x558 JUMPI POP PUSH2 0x556 DUP5 DUP5 DUP5 DUP5 PUSH2 0x99F JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x576 JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x587 DUP3 PUSH2 0x60D JUMP JUMPDEST PUSH2 0x5A4 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA14C4B5 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x5BB PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x5DB JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x606 JUMP JUMPDEST DUP1 PUSH2 0x5E5 DUP5 PUSH2 0xA8A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5F6 SWAP3 SWAP2 SWAP1 PUSH2 0xEDF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP3 LT DUP1 ISZERO PUSH2 0x297 JUMPI POP POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP6 SWAP4 SWAP2 DUP6 AND SWAP2 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x69F DUP3 PUSH2 0x883 JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x6D6 JUMPI PUSH1 0x40 MLOAD PUSH3 0xA11481 PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND EQ DUP1 PUSH2 0x6F4 JUMPI POP PUSH2 0x6F4 DUP6 CALLER PUSH2 0x21D JUMP JUMPDEST DUP1 PUSH2 0x70F JUMPI POP CALLER PUSH2 0x704 DUP5 PUSH2 0x32F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP1 POP DUP1 PUSH2 0x72F JUMPI PUSH1 0x40 MLOAD PUSH4 0x2CE44B5F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x756 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3A954ECD PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x762 PUSH1 0x0 DUP5 DUP8 PUSH2 0x638 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT DUP1 DUP3 AND PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP4 AND PUSH1 0x0 NOT ADD DUP4 AND OR SWAP1 SWAP3 SSTORE DUP10 DUP7 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD SWAP4 DUP5 AND SWAP4 DUP4 AND PUSH1 0x1 SWAP1 DUP2 ADD DUP5 AND SWAP5 SWAP1 SWAP5 OR SWAP1 SSTORE DUP10 DUP7 MSTORE PUSH1 0x4 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP1 SWAP5 OR PUSH1 0x1 PUSH1 0xA0 SHL TIMESTAMP SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 MUL OR DUP4 SSTORE DUP8 ADD DUP1 DUP5 MSTORE SWAP3 KECCAK256 DUP1 SLOAD SWAP2 SWAP4 SWAP1 SWAP2 AND PUSH2 0x838 JUMPI PUSH1 0x0 SLOAD DUP3 EQ PUSH2 0x838 JUMPI DUP1 SLOAD PUSH1 0x20 DUP7 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND OR OR DUP2 SSTORE JUMPDEST POP POP POP DUP3 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 PUSH1 0x0 SLOAD DUP2 LT ISZERO PUSH2 0x986 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE SWAP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0xA0 SHL DUP2 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 SWAP2 DIV PUSH1 0xFF AND ISZERO ISZERO SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 PUSH2 0x984 JUMPI DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x91A JUMPI SWAP4 SWAP3 POP POP POP JUMP JUMPDEST POP PUSH1 0x0 NOT ADD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE SWAP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP1 DUP4 MSTORE PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP4 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE ISZERO PUSH2 0x97F JUMPI SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x91A JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6F96CDA1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x9D4 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xF0E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xA0F JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xA0C SWAP2 DUP2 ADD SWAP1 PUSH2 0xF4B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xA6D JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xA3D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xA42 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0xA65 JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xA97 DUP4 PUSH2 0xB1D JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xAB7 JUMPI PUSH2 0xAB7 PUSH2 0xD80 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xAE1 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0xAEB JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0xB5C JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0xB88 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0xBA6 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0xBBE JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0xBD2 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0xBE4 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x297 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xC0B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x606 DUP2 PUSH2 0xBF5 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xC46 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xC2E JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xC67 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xC2B JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x606 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xC4F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xCBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xCD6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCDF DUP4 PUSH2 0xCA7 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xD02 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD0B DUP5 PUSH2 0xCA7 JUMP JUMPDEST SWAP3 POP PUSH2 0xD19 PUSH1 0x20 DUP6 ADD PUSH2 0xCA7 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x606 DUP3 PUSH2 0xCA7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD57 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD60 DUP4 PUSH2 0xCA7 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xD75 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xDAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDB5 DUP6 PUSH2 0xCA7 JUMP JUMPDEST SWAP4 POP PUSH2 0xDC3 PUSH1 0x20 DUP7 ADD PUSH2 0xCA7 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xDE7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xDFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xE0D JUMPI PUSH2 0xE0D PUSH2 0xD80 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0xE35 JUMPI PUSH2 0xE35 PUSH2 0xD80 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0xE4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE85 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE8E DUP4 PUSH2 0xCA7 JUMP JUMPDEST SWAP2 POP PUSH2 0xE9C PUSH1 0x20 DUP5 ADD PUSH2 0xCA7 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xEB9 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xED9 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0xEF1 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0xC2B JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0xF05 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0xC2B JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0xF41 SWAP1 DUP4 ADD DUP5 PUSH2 0xC4F JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x606 DUP2 PUSH2 0xBF5 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC4 0x29 GASPRICE PUSH10 0xF26D92AB5DED0D0DA379 0xAC SAR EXP 0xC1 0x29 0xEA PUSH31 0xF9A528A9BCA63254B82F4D64736F6C63430008120033000000000000000000 ",
							"sourceMap": "1515:20351:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4607:300;;;;;;:::i;:::-;;:::i;:::-;;;565:14:14;;558:22;540:41;;528:2;513:18;4607:300:12;;;;;;;;7635:98;;;:::i;:::-;;;;;;;:::i;9091:200::-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1697:32:14;;;1679:51;;1667:2;1652:18;9091:200:12;1533:203:14;8668:362:12;;;;;;:::i;:::-;;:::i;:::-;;3878:297;4128:12;;3922:7;4112:13;:28;3878:297;;;2324:25:14;;;2312:2;2297:18;3878:297:12;2178:177:14;9930:164:12;;;;;;:::i;:::-;;:::i;10160:179::-;;;;;;:::i;:::-;;:::i;7450:123::-;;;;;;:::i;:::-;;:::i;4966:203::-;;;;;;:::i;:::-;;:::i;7797:102::-;;;:::i;9358:282::-;;;;;;:::i;:::-;;:::i;10405:359::-;;;;;;:::i;:::-;;:::i;7965:313::-;;;;;;:::i;:::-;;:::i;9706:162::-;;;;;;:::i;:::-;-1:-1:-1;;;;;9826:25:12;;;9803:4;9826:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;9706:162;4607:300;4709:4;-1:-1:-1;;;;;;4744:40:12;;-1:-1:-1;;;4744:40:12;;:104;;-1:-1:-1;;;;;;;4800:48:12;;-1:-1:-1;;;4800:48:12;4744:104;:156;;;-1:-1:-1;;;;;;;;;;937:40:7;;;4864:36:12;4725:175;4607:300;-1:-1:-1;;4607:300:12:o;7635:98::-;7689:13;7721:5;7714:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7635:98;:::o;9091:200::-;9159:7;9183:16;9191:7;9183;:16::i;:::-;9178:64;;9208:34;;-1:-1:-1;;;9208:34:12;;;;;;;;;;;9178:64;-1:-1:-1;9260:24:12;;;;:15;:24;;;;;;-1:-1:-1;;;;;9260:24:12;;9091:200::o;8668:362::-;8740:13;8756:24;8772:7;8756:15;:24::i;:::-;8740:40;;8800:5;-1:-1:-1;;;;;8794:11:12;:2;-1:-1:-1;;;;;8794:11:12;;8790:48;;8814:24;;-1:-1:-1;;;8814:24:12;;;;;;;;;;;8790:48;719:10:5;-1:-1:-1;;;;;8853:21:12;;;;;;:63;;-1:-1:-1;8879:37:12;8896:5;719:10:5;9706:162:12;:::i;8879:37::-;8878:38;8853:63;8849:136;;;8939:35;;-1:-1:-1;;;8939:35:12;;;;;;;;;;;8849:136;8995:28;9004:2;9008:7;9017:5;8995:8;:28::i;:::-;8730:300;8668:362;;:::o;9930:164::-;10059:28;10069:4;10075:2;10079:7;10059:9;:28::i;10160:179::-;10293:39;10310:4;10316:2;10320:7;10293:39;;;;;;;;;;;;:16;:39::i;7450:123::-;7514:7;7540:21;7553:7;7540:12;:21::i;:::-;:26;;7450:123;-1:-1:-1;;7450:123:12:o;4966:203::-;5030:7;-1:-1:-1;;;;;5053:19:12;;5049:60;;5081:28;;-1:-1:-1;;;5081:28:12;;;;;;;;;;;5049:60;-1:-1:-1;;;;;;5134:19:12;;;;;:12;:19;;;;;:27;;;;4966:203::o;7797:102::-;7853:13;7885:7;7878:14;;;;;:::i;9358:282::-;719:10:5;-1:-1:-1;;;;;9456:24:12;;;9452:54;;9489:17;;-1:-1:-1;;;9489:17:12;;;;;;;;;;;9452:54;719:10:5;9517:32:12;;;;:18;:32;;;;;;;;-1:-1:-1;;;;;9517:42:12;;;;;;;;;;;;:53;;-1:-1:-1;;9517:53:12;;;;;;;;;;9585:48;;540:41:14;;;9517:42:12;;719:10:5;9585:48:12;;513:18:14;9585:48:12;;;;;;;9358:282;;:::o;10405:359::-;10566:28;10576:4;10582:2;10586:7;10566:9;:28::i;:::-;-1:-1:-1;;;;;10608:13:12;;1702:19:4;:23;;10608:76:12;;;;;10628:56;10659:4;10665:2;10669:7;10678:5;10628:30;:56::i;:::-;10627:57;10608:76;10604:154;;;10707:40;;-1:-1:-1;;;10707:40:12;;;;;;;;;;;10604:154;10405:359;;;;:::o;7965:313::-;8038:13;8068:16;8076:7;8068;:16::i;:::-;8063:59;;8093:29;;-1:-1:-1;;;8093:29:12;;;;;;;;;;;8063:59;8133:21;8157:10;8595:9;;;;;;;;;-1:-1:-1;8595:9:12;;;8519:92;8157:10;8133:34;;8190:7;8184:21;8209:1;8184:26;:87;;;;;;;;;;;;;;;;;8237:7;8246:18;:7;:16;:18::i;:::-;8220:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;8184:87;8177:94;7965:313;-1:-1:-1;;;7965:313:12:o;11010:184::-;11067:4;11130:13;;11120:7;:23;11090:97;;;;-1:-1:-1;;11160:20:12;;;;:11;:20;;;;;:27;-1:-1:-1;;;11160:27:12;;;;11159:28;;11010:184::o;18963:190::-;19074:24;;;;:15;:24;;;;;;:29;;-1:-1:-1;;;;;;19074:29:12;-1:-1:-1;;;;;19074:29:12;;;;;;;;;19118:28;;19074:24;;19118:28;;;;;;;18963:190;;;:::o;14032:2083::-;14143:35;14181:21;14194:7;14181:12;:21::i;:::-;14143:59;;14239:4;-1:-1:-1;;;;;14217:26:12;:13;:18;;;-1:-1:-1;;;;;14217:26:12;;14213:67;;14252:28;;-1:-1:-1;;;14252:28:12;;;;;;;;;;;14213:67;14291:22;719:10:5;-1:-1:-1;;;;;14317:20:12;;;;:72;;-1:-1:-1;14353:36:12;14370:4;719:10:5;9706:162:12;:::i;14353:36::-;14317:124;;;-1:-1:-1;719:10:5;14405:20:12;14417:7;14405:11;:20::i;:::-;-1:-1:-1;;;;;14405:36:12;;14317:124;14291:151;;14458:17;14453:66;;14484:35;;-1:-1:-1;;;14484:35:12;;;;;;;;;;;14453:66;-1:-1:-1;;;;;14533:16:12;;14529:52;;14558:23;;-1:-1:-1;;;14558:23:12;;;;;;;;;;;14529:52;14697:35;14714:1;14718:7;14727:4;14697:8;:35::i;:::-;-1:-1:-1;;;;;15022:18:12;;;;;;;:12;:18;;;;;;;;:31;;-1:-1:-1;;15022:31:12;;;;;;;-1:-1:-1;;15022:31:12;;;;;;;15067:16;;;;;;;;;:29;;;;;;;;-1:-1:-1;15067:29:12;;;;;;;;;;;15145:20;;;:11;:20;;;;;;15179:18;;-1:-1:-1;;;;;;15211:49:12;;;;-1:-1:-1;;;15244:15:12;15211:49;;;;;;;;;;15530:11;;15589:24;;;;;15631:13;;15145:20;;15589:24;;15631:13;15627:377;;15838:13;;15823:11;:28;15819:171;;15875:20;;15943:28;;;;15917:54;;-1:-1:-1;;;15917:54:12;-1:-1:-1;;;;;;15917:54:12;;;-1:-1:-1;;;;;15875:20:12;;15917:54;;;;15819:171;14998:1016;;;16048:7;16044:2;-1:-1:-1;;;;;16029:27:12;16038:4;-1:-1:-1;;;;;16029:27:12;;;;;;;;;;;14133:1982;;14032:2083;;;:::o;6309:1084::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;6419:7:12;6499:13;;6492:4;:20;6461:868;;;6532:31;6566:17;;;:11;:17;;;;;;;;;6532:51;;;;;;;;;-1:-1:-1;;;;;6532:51:12;;;;-1:-1:-1;;;6532:51:12;;;;;;;;;;;-1:-1:-1;;;6532:51:12;;;;;;;;;;;;;;6601:714;;6650:14;;-1:-1:-1;;;;;6650:28:12;;6646:99;;6713:9;6309:1084;-1:-1:-1;;;6309:1084:12:o;6646:99::-;-1:-1:-1;;;7081:6:12;7125:17;;;;:11;:17;;;;;;;;;7113:29;;;;;;;;;-1:-1:-1;;;;;7113:29:12;;;;;-1:-1:-1;;;7113:29:12;;;;;;;;;;;-1:-1:-1;;;7113:29:12;;;;;;;;;;;;;7172:28;7168:107;;7239:9;6309:1084;-1:-1:-1;;;6309:1084:12:o;7168:107::-;7042:255;;;6514:815;6461:868;7355:31;;-1:-1:-1;;;7355:31:12;;;;;;;;;;;19634:651;19813:72;;-1:-1:-1;;;19813:72:12;;19793:4;;-1:-1:-1;;;;;19813:36:12;;;;;:72;;719:10:5;;19864:4:12;;19870:7;;19879:5;;19813:72;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;19813:72:12;;;;;;;;-1:-1:-1;;19813:72:12;;;;;;;;;;;;:::i;:::-;;;19809:470;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20044:6;:13;20061:1;20044:18;20040:229;;20089:40;;-1:-1:-1;;;20089:40:12;;;;;;;;;;;20040:229;20229:6;20223:13;20214:6;20210:2;20206:15;20199:38;19809:470;-1:-1:-1;;;;;;19931:55:12;-1:-1:-1;;;19931:55:12;;-1:-1:-1;19634:651:12;;;;;;:::o;447:696:6:-;503:13;552:14;569:17;580:5;569:10;:17::i;:::-;589:1;569:21;552:38;;604:20;638:6;627:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;627:18:6;-1:-1:-1;604:41:6;-1:-1:-1;765:28:6;;;781:2;765:28;820:280;-1:-1:-1;;851:5:6;-1:-1:-1;;;985:2:6;974:14;;969:30;851:5;956:44;1044:2;1035:11;;;-1:-1:-1;1064:21:6;820:280;1064:21;-1:-1:-1;1120:6:6;447:696;-1:-1:-1;;;447:696:6:o;10139:916:9:-;10192:7;;-1:-1:-1;;;10267:17:9;;10263:103;;-1:-1:-1;;;10304:17:9;;;-1:-1:-1;10349:2:9;10339:12;10263:103;10392:8;10383:5;:17;10379:103;;10429:8;10420:17;;;-1:-1:-1;10465:2:9;10455:12;10379:103;10508:8;10499:5;:17;10495:103;;10545:8;10536:17;;;-1:-1:-1;10581:2:9;10571:12;10495:103;10624:7;10615:5;:16;10611:100;;10660:7;10651:16;;;-1:-1:-1;10695:1:9;10685:11;10611:100;10737:7;10728:5;:16;10724:100;;10773:7;10764:16;;;-1:-1:-1;10808:1:9;10798:11;10724:100;10850:7;10841:5;:16;10837:100;;10886:7;10877:16;;;-1:-1:-1;10921:1:9;10911:11;10837:100;10963:7;10954:5;:16;10950:66;;11000:1;10990:11;11042:6;10139:916;-1:-1:-1;;10139:916:9:o;14:131:14:-;-1:-1:-1;;;;;;88:32:14;;78:43;;68:71;;135:1;132;125:12;68:71;14:131;:::o;150:245::-;208:6;261:2;249:9;240:7;236:23;232:32;229:52;;;277:1;274;267:12;229:52;316:9;303:23;335:30;359:5;335:30;:::i;592:250::-;677:1;687:113;701:6;698:1;695:13;687:113;;;777:11;;;771:18;758:11;;;751:39;723:2;716:10;687:113;;;-1:-1:-1;;834:1:14;816:16;;809:27;592:250::o;847:271::-;889:3;927:5;921:12;954:6;949:3;942:19;970:76;1039:6;1032:4;1027:3;1023:14;1016:4;1009:5;1005:16;970:76;:::i;:::-;1100:2;1079:15;-1:-1:-1;;1075:29:14;1066:39;;;;1107:4;1062:50;;847:271;-1:-1:-1;;847:271:14:o;1123:220::-;1272:2;1261:9;1254:21;1235:4;1292:45;1333:2;1322:9;1318:18;1310:6;1292:45;:::i;1348:180::-;1407:6;1460:2;1448:9;1439:7;1435:23;1431:32;1428:52;;;1476:1;1473;1466:12;1428:52;-1:-1:-1;1499:23:14;;1348:180;-1:-1:-1;1348:180:14:o;1741:173::-;1809:20;;-1:-1:-1;;;;;1858:31:14;;1848:42;;1838:70;;1904:1;1901;1894:12;1838:70;1741:173;;;:::o;1919:254::-;1987:6;1995;2048:2;2036:9;2027:7;2023:23;2019:32;2016:52;;;2064:1;2061;2054:12;2016:52;2087:29;2106:9;2087:29;:::i;:::-;2077:39;2163:2;2148:18;;;;2135:32;;-1:-1:-1;;;1919:254:14:o;2360:328::-;2437:6;2445;2453;2506:2;2494:9;2485:7;2481:23;2477:32;2474:52;;;2522:1;2519;2512:12;2474:52;2545:29;2564:9;2545:29;:::i;:::-;2535:39;;2593:38;2627:2;2616:9;2612:18;2593:38;:::i;:::-;2583:48;;2678:2;2667:9;2663:18;2650:32;2640:42;;2360:328;;;;;:::o;2693:186::-;2752:6;2805:2;2793:9;2784:7;2780:23;2776:32;2773:52;;;2821:1;2818;2811:12;2773:52;2844:29;2863:9;2844:29;:::i;2884:347::-;2949:6;2957;3010:2;2998:9;2989:7;2985:23;2981:32;2978:52;;;3026:1;3023;3016:12;2978:52;3049:29;3068:9;3049:29;:::i;:::-;3039:39;;3128:2;3117:9;3113:18;3100:32;3175:5;3168:13;3161:21;3154:5;3151:32;3141:60;;3197:1;3194;3187:12;3141:60;3220:5;3210:15;;;2884:347;;;;;:::o;3236:127::-;3297:10;3292:3;3288:20;3285:1;3278:31;3328:4;3325:1;3318:15;3352:4;3349:1;3342:15;3368:1138;3463:6;3471;3479;3487;3540:3;3528:9;3519:7;3515:23;3511:33;3508:53;;;3557:1;3554;3547:12;3508:53;3580:29;3599:9;3580:29;:::i;:::-;3570:39;;3628:38;3662:2;3651:9;3647:18;3628:38;:::i;:::-;3618:48;;3713:2;3702:9;3698:18;3685:32;3675:42;;3768:2;3757:9;3753:18;3740:32;3791:18;3832:2;3824:6;3821:14;3818:34;;;3848:1;3845;3838:12;3818:34;3886:6;3875:9;3871:22;3861:32;;3931:7;3924:4;3920:2;3916:13;3912:27;3902:55;;3953:1;3950;3943:12;3902:55;3989:2;3976:16;4011:2;4007;4004:10;4001:36;;;4017:18;;:::i;:::-;4092:2;4086:9;4060:2;4146:13;;-1:-1:-1;;4142:22:14;;;4166:2;4138:31;4134:40;4122:53;;;4190:18;;;4210:22;;;4187:46;4184:72;;;4236:18;;:::i;:::-;4276:10;4272:2;4265:22;4311:2;4303:6;4296:18;4351:7;4346:2;4341;4337;4333:11;4329:20;4326:33;4323:53;;;4372:1;4369;4362:12;4323:53;4428:2;4423;4419;4415:11;4410:2;4402:6;4398:15;4385:46;4473:1;4468:2;4463;4455:6;4451:15;4447:24;4440:35;4494:6;4484:16;;;;;;;3368:1138;;;;;;;:::o;4511:260::-;4579:6;4587;4640:2;4628:9;4619:7;4615:23;4611:32;4608:52;;;4656:1;4653;4646:12;4608:52;4679:29;4698:9;4679:29;:::i;:::-;4669:39;;4727:38;4761:2;4750:9;4746:18;4727:38;:::i;:::-;4717:48;;4511:260;;;;;:::o;4776:380::-;4855:1;4851:12;;;;4898;;;4919:61;;4973:4;4965:6;4961:17;4951:27;;4919:61;5026:2;5018:6;5015:14;4995:18;4992:38;4989:161;;5072:10;5067:3;5063:20;5060:1;5053:31;5107:4;5104:1;5097:15;5135:4;5132:1;5125:15;4989:161;;4776:380;;;:::o;5161:496::-;5340:3;5378:6;5372:13;5394:66;5453:6;5448:3;5441:4;5433:6;5429:17;5394:66;:::i;:::-;5523:13;;5482:16;;;;5545:70;5523:13;5482:16;5592:4;5580:17;;5545:70;:::i;:::-;5631:20;;5161:496;-1:-1:-1;;;;5161:496:14:o;5662:489::-;-1:-1:-1;;;;;5931:15:14;;;5913:34;;5983:15;;5978:2;5963:18;;5956:43;6030:2;6015:18;;6008:34;;;6078:3;6073:2;6058:18;;6051:31;;;5856:4;;6099:46;;6125:19;;6117:6;6099:46;:::i;:::-;6091:54;5662:489;-1:-1:-1;;;;;;5662:489:14:o;6156:249::-;6225:6;6278:2;6266:9;6257:7;6253:23;6249:32;6246:52;;;6294:1;6291;6284:12;6246:52;6326:9;6320:16;6345:30;6369:5;6345:30;:::i"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "799600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"approve(address,uint256)": "infinite",
								"balanceOf(address)": "2640",
								"getApproved(uint256)": "6936",
								"isApprovedForAll(address,address)": "infinite",
								"name()": "infinite",
								"ownerOf(uint256)": "infinite",
								"safeTransferFrom(address,address,uint256)": "infinite",
								"safeTransferFrom(address,address,uint256,bytes)": "infinite",
								"setApprovalForAll(address,bool)": "26647",
								"supportsInterface(bytes4)": "534",
								"symbol()": "infinite",
								"tokenURI(uint256)": "infinite",
								"totalSupply()": "4432",
								"transferFrom(address,address,uint256)": "infinite"
							},
							"internal": {
								"_afterTokenTransfers(address,address,uint256,uint256)": "infinite",
								"_approve(address,uint256,address)": "26264",
								"_baseURI()": "infinite",
								"_beforeTokenTransfers(address,address,uint256,uint256)": "infinite",
								"_burn(uint256)": "infinite",
								"_burn(uint256,bool)": "infinite",
								"_checkContractOnERC721Received(address,address,uint256,bytes memory)": "infinite",
								"_exists(uint256)": "4348",
								"_getAux(address)": "infinite",
								"_mint(address,uint256,bytes memory,bool)": "infinite",
								"_numberBurned(address)": "infinite",
								"_numberMinted(address)": "infinite",
								"_ownershipOf(uint256)": "infinite",
								"_safeMint(address,uint256)": "infinite",
								"_safeMint(address,uint256,bytes memory)": "infinite",
								"_setAux(address,uint64)": "infinite",
								"_startTokenId()": "infinite",
								"_totalMinted()": "infinite",
								"_transfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1515,
									"end": 21866,
									"name": "PUSH",
									"source": 12,
									"value": "80"
								},
								{
									"begin": 1515,
									"end": 21866,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 1515,
									"end": 21866,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "CALLVALUE",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "tag",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "PUSHSIZE",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "CODESIZE",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "SUB",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "PUSHSIZE",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "CODECOPY",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "2"
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "3"
								},
								{
									"begin": 3413,
									"end": 3567,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "tag",
									"source": 12,
									"value": "2"
								},
								{
									"begin": 3413,
									"end": 3567,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3479,
									"end": 3484,
									"name": "PUSH",
									"source": 12,
									"value": "2"
								},
								{
									"begin": 3479,
									"end": 3492,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "6"
								},
								{
									"begin": 3487,
									"end": 3492,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 3479,
									"end": 3484,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 3479,
									"end": 3492,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "7"
								},
								{
									"begin": 3479,
									"end": 3492,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 3479,
									"end": 3492,
									"name": "tag",
									"source": 12,
									"value": "6"
								},
								{
									"begin": 3479,
									"end": 3492,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3502,
									"end": 3509,
									"name": "PUSH",
									"source": 12,
									"value": "3"
								},
								{
									"begin": 3502,
									"end": 3519,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "8"
								},
								{
									"begin": 3512,
									"end": 3519,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 3502,
									"end": 3509,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 3502,
									"end": 3519,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "7"
								},
								{
									"begin": 3502,
									"end": 3519,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 3502,
									"end": 3519,
									"name": "tag",
									"source": 12,
									"value": "8"
								},
								{
									"begin": 3502,
									"end": 3519,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3715,
									"end": 3722,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 3529,
									"end": 3560,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 3529,
									"end": 3560,
									"name": "SSTORE",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1515,
									"end": 21866,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "19"
								},
								{
									"begin": 1515,
									"end": 21866,
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 14,
									"end": 141,
									"name": "tag",
									"source": 14,
									"value": "13"
								},
								{
									"begin": 14,
									"end": 141,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 75,
									"end": 85,
									"name": "PUSH",
									"source": 14,
									"value": "4E487B71"
								},
								{
									"begin": 70,
									"end": 73,
									"name": "PUSH",
									"source": 14,
									"value": "E0"
								},
								{
									"begin": 66,
									"end": 86,
									"name": "SHL",
									"source": 14
								},
								{
									"begin": 63,
									"end": 64,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 56,
									"end": 87,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 106,
									"end": 110,
									"name": "PUSH",
									"source": 14,
									"value": "41"
								},
								{
									"begin": 103,
									"end": 104,
									"name": "PUSH",
									"source": 14,
									"value": "4"
								},
								{
									"begin": 96,
									"end": 111,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 130,
									"end": 134,
									"name": "PUSH",
									"source": 14,
									"value": "24"
								},
								{
									"begin": 127,
									"end": 128,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 120,
									"end": 135,
									"name": "REVERT",
									"source": 14
								},
								{
									"begin": 146,
									"end": 986,
									"name": "tag",
									"source": 14,
									"value": "14"
								},
								{
									"begin": 146,
									"end": 986,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 200,
									"end": 205,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 253,
									"end": 256,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 246,
									"end": 250,
									"name": "PUSH",
									"source": 14,
									"value": "1F"
								},
								{
									"begin": 238,
									"end": 244,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 234,
									"end": 251,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 230,
									"end": 257,
									"name": "SLT",
									"source": 14
								},
								{
									"begin": 220,
									"end": 275,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "22"
								},
								{
									"begin": 220,
									"end": 275,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 271,
									"end": 272,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 268,
									"end": 269,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 261,
									"end": 273,
									"name": "REVERT",
									"source": 14
								},
								{
									"begin": 220,
									"end": 275,
									"name": "tag",
									"source": 14,
									"value": "22"
								},
								{
									"begin": 220,
									"end": 275,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 294,
									"end": 307,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 294,
									"end": 307,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 356,
									"end": 366,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 356,
									"end": 366,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 356,
									"end": 366,
									"name": "GT",
									"source": 14
								},
								{
									"begin": 353,
									"end": 389,
									"name": "ISZERO",
									"source": 14
								},
								{
									"begin": 353,
									"end": 389,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "24"
								},
								{
									"begin": 353,
									"end": 389,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 369,
									"end": 387,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "24"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "13"
								},
								{
									"begin": 369,
									"end": 387,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 369,
									"end": 387,
									"name": "tag",
									"source": 14,
									"value": "24"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 444,
									"end": 446,
									"name": "PUSH",
									"source": 14,
									"value": "40"
								},
								{
									"begin": 438,
									"end": 447,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 412,
									"end": 414,
									"name": "PUSH",
									"source": 14,
									"value": "1F"
								},
								{
									"begin": 498,
									"end": 511,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 498,
									"end": 511,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 494,
									"end": 516,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 494,
									"end": 516,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 494,
									"end": 516,
									"name": "AND",
									"source": 14
								},
								{
									"begin": 518,
									"end": 520,
									"name": "PUSH",
									"source": 14,
									"value": "3F"
								},
								{
									"begin": 490,
									"end": 521,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 486,
									"end": 526,
									"name": "AND",
									"source": 14
								},
								{
									"begin": 474,
									"end": 527,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 474,
									"end": 527,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 474,
									"end": 527,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 542,
									"end": 560,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 542,
									"end": 560,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 542,
									"end": 560,
									"name": "GT",
									"source": 14
								},
								{
									"begin": 562,
									"end": 584,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 562,
									"end": 584,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 562,
									"end": 584,
									"name": "LT",
									"source": 14
								},
								{
									"begin": 539,
									"end": 585,
									"name": "OR",
									"source": 14
								},
								{
									"begin": 536,
									"end": 608,
									"name": "ISZERO",
									"source": 14
								},
								{
									"begin": 536,
									"end": 608,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "26"
								},
								{
									"begin": 536,
									"end": 608,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 588,
									"end": 606,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "26"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "13"
								},
								{
									"begin": 588,
									"end": 606,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 588,
									"end": 606,
									"name": "tag",
									"source": 14,
									"value": "26"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 628,
									"end": 638,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 624,
									"end": 626,
									"name": "PUSH",
									"source": 14,
									"value": "40"
								},
								{
									"begin": 617,
									"end": 639,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 663,
									"end": 665,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 655,
									"end": 661,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 648,
									"end": 666,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 685,
									"end": 689,
									"name": "PUSH",
									"source": 14,
									"value": "20"
								},
								{
									"begin": 675,
									"end": 689,
									"name": "SWAP3",
									"source": 14
								},
								{
									"begin": 675,
									"end": 689,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 730,
									"end": 733,
									"name": "DUP7",
									"source": 14
								},
								{
									"begin": 725,
									"end": 727,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 720,
									"end": 722,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 712,
									"end": 718,
									"name": "DUP9",
									"source": 14
								},
								{
									"begin": 708,
									"end": 723,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 704,
									"end": 728,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 701,
									"end": 734,
									"name": "GT",
									"source": 14
								},
								{
									"begin": 698,
									"end": 751,
									"name": "ISZERO",
									"source": 14
								},
								{
									"begin": 698,
									"end": 751,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "27"
								},
								{
									"begin": 698,
									"end": 751,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 747,
									"end": 748,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 744,
									"end": 745,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 737,
									"end": 749,
									"name": "REVERT",
									"source": 14
								},
								{
									"begin": 698,
									"end": 751,
									"name": "tag",
									"source": 14,
									"value": "27"
								},
								{
									"begin": 698,
									"end": 751,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 769,
									"end": 770,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 760,
									"end": 770,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 760,
									"end": 770,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 779,
									"end": 912,
									"name": "tag",
									"source": 14,
									"value": "28"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 793,
									"end": 795,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 790,
									"end": 791,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 787,
									"end": 796,
									"name": "LT",
									"source": 14
								},
								{
									"begin": 779,
									"end": 912,
									"name": "ISZERO",
									"source": 14
								},
								{
									"begin": 779,
									"end": 912,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "30"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 881,
									"end": 895,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 881,
									"end": 895,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 881,
									"end": 895,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 877,
									"end": 900,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 877,
									"end": 900,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 871,
									"end": 901,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 850,
									"end": 864,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 850,
									"end": 864,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 850,
									"end": 864,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 846,
									"end": 869,
									"name": "DUP5",
									"source": 14
								},
								{
									"begin": 846,
									"end": 869,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 839,
									"end": 902,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 804,
									"end": 814,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 804,
									"end": 814,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 804,
									"end": 814,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 804,
									"end": 814,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 779,
									"end": 912,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "28"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 779,
									"end": 912,
									"name": "tag",
									"source": 14,
									"value": "30"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 954,
									"end": 955,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 932,
									"end": 947,
									"name": "SWAP4",
									"source": 14
								},
								{
									"begin": 932,
									"end": 947,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 932,
									"end": 947,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 928,
									"end": 952,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 928,
									"end": 952,
									"name": "SWAP3",
									"source": 14
								},
								{
									"begin": 928,
									"end": 952,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 921,
									"end": 956,
									"name": "SWAP3",
									"source": 14
								},
								{
									"begin": 921,
									"end": 956,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 921,
									"end": 956,
									"name": "SWAP3",
									"source": 14
								},
								{
									"begin": 921,
									"end": 956,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 936,
									"end": 942,
									"name": "SWAP5",
									"source": 14
								},
								{
									"begin": 146,
									"end": 986,
									"name": "SWAP4",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 146,
									"end": 986,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 991,
									"end": 1553,
									"name": "tag",
									"source": 14,
									"value": "3"
								},
								{
									"begin": 991,
									"end": 1553,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1090,
									"end": 1096,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 1098,
									"end": 1104,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 1151,
									"end": 1153,
									"name": "PUSH",
									"source": 14,
									"value": "40"
								},
								{
									"begin": 1139,
									"end": 1148,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 1130,
									"end": 1137,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 1126,
									"end": 1149,
									"name": "SUB",
									"source": 14
								},
								{
									"begin": 1122,
									"end": 1154,
									"name": "SLT",
									"source": 14
								},
								{
									"begin": 1119,
									"end": 1171,
									"name": "ISZERO",
									"source": 14
								},
								{
									"begin": 1119,
									"end": 1171,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "32"
								},
								{
									"begin": 1119,
									"end": 1171,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 1167,
									"end": 1168,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 1164,
									"end": 1165,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 1157,
									"end": 1169,
									"name": "REVERT",
									"source": 14
								},
								{
									"begin": 1119,
									"end": 1171,
									"name": "tag",
									"source": 14,
									"value": "32"
								},
								{
									"begin": 1119,
									"end": 1171,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1194,
									"end": 1210,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 1194,
									"end": 1210,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1259,
									"end": 1273,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 1259,
									"end": 1273,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 1259,
									"end": 1273,
									"name": "GT",
									"source": 14
								},
								{
									"begin": 1256,
									"end": 1290,
									"name": "ISZERO",
									"source": 14
								},
								{
									"begin": 1256,
									"end": 1290,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "33"
								},
								{
									"begin": 1256,
									"end": 1290,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 1286,
									"end": 1287,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 1283,
									"end": 1284,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 1276,
									"end": 1288,
									"name": "REVERT",
									"source": 14
								},
								{
									"begin": 1256,
									"end": 1290,
									"name": "tag",
									"source": 14,
									"value": "33"
								},
								{
									"begin": 1256,
									"end": 1290,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1309,
									"end": 1370,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "34"
								},
								{
									"begin": 1362,
									"end": 1369,
									"name": "DUP7",
									"source": 14
								},
								{
									"begin": 1353,
									"end": 1359,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 1342,
									"end": 1351,
									"name": "DUP8",
									"source": 14
								},
								{
									"begin": 1338,
									"end": 1360,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 1309,
									"end": 1370,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "14"
								},
								{
									"begin": 1309,
									"end": 1370,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 1309,
									"end": 1370,
									"name": "tag",
									"source": 14,
									"value": "34"
								},
								{
									"begin": 1309,
									"end": 1370,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1299,
									"end": 1370,
									"name": "SWAP4",
									"source": 14
								},
								{
									"begin": 1299,
									"end": 1370,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 1416,
									"end": 1418,
									"name": "PUSH",
									"source": 14,
									"value": "20"
								},
								{
									"begin": 1405,
									"end": 1414,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 1401,
									"end": 1419,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 1395,
									"end": 1420,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 1379,
									"end": 1420,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 1379,
									"end": 1420,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 1445,
									"end": 1447,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 1435,
									"end": 1443,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 1432,
									"end": 1448,
									"name": "GT",
									"source": 14
								},
								{
									"begin": 1429,
									"end": 1465,
									"name": "ISZERO",
									"source": 14
								},
								{
									"begin": 1429,
									"end": 1465,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "35"
								},
								{
									"begin": 1429,
									"end": 1465,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 1461,
									"end": 1462,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 1458,
									"end": 1459,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 1451,
									"end": 1463,
									"name": "REVERT",
									"source": 14
								},
								{
									"begin": 1429,
									"end": 1465,
									"name": "tag",
									"source": 14,
									"value": "35"
								},
								{
									"begin": 1429,
									"end": 1465,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1429,
									"end": 1465,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 1484,
									"end": 1547,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "36"
								},
								{
									"begin": 1539,
									"end": 1546,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 1528,
									"end": 1536,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 1517,
									"end": 1526,
									"name": "DUP7",
									"source": 14
								},
								{
									"begin": 1513,
									"end": 1537,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 1484,
									"end": 1547,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "14"
								},
								{
									"begin": 1484,
									"end": 1547,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 1484,
									"end": 1547,
									"name": "tag",
									"source": 14,
									"value": "36"
								},
								{
									"begin": 1484,
									"end": 1547,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1474,
									"end": 1547,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 1474,
									"end": 1547,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 1474,
									"end": 1547,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 991,
									"end": 1553,
									"name": "SWAP3",
									"source": 14
								},
								{
									"begin": 991,
									"end": 1553,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 991,
									"end": 1553,
									"name": "SWAP3",
									"source": 14
								},
								{
									"begin": 991,
									"end": 1553,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 991,
									"end": 1553,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 991,
									"end": 1553,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 1558,
									"end": 1938,
									"name": "tag",
									"source": 14,
									"value": "15"
								},
								{
									"begin": 1558,
									"end": 1938,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1637,
									"end": 1638,
									"name": "PUSH",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 1633,
									"end": 1645,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 1633,
									"end": 1645,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 1633,
									"end": 1645,
									"name": "SHR",
									"source": 14
								},
								{
									"begin": 1633,
									"end": 1645,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 1680,
									"end": 1692,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 1680,
									"end": 1692,
									"name": "AND",
									"source": 14
								},
								{
									"begin": 1680,
									"end": 1692,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 1701,
									"end": 1762,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "38"
								},
								{
									"begin": 1701,
									"end": 1762,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 1755,
									"end": 1759,
									"name": "PUSH",
									"source": 14,
									"value": "7F"
								},
								{
									"begin": 1747,
									"end": 1753,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 1743,
									"end": 1760,
									"name": "AND",
									"source": 14
								},
								{
									"begin": 1733,
									"end": 1760,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 1733,
									"end": 1760,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 1701,
									"end": 1762,
									"name": "tag",
									"source": 14,
									"value": "38"
								},
								{
									"begin": 1701,
									"end": 1762,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1808,
									"end": 1810,
									"name": "PUSH",
									"source": 14,
									"value": "20"
								},
								{
									"begin": 1800,
									"end": 1806,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 1797,
									"end": 1811,
									"name": "LT",
									"source": 14
								},
								{
									"begin": 1777,
									"end": 1795,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 1774,
									"end": 1812,
									"name": "SUB",
									"source": 14
								},
								{
									"begin": 1771,
									"end": 1932,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "39"
								},
								{
									"begin": 1771,
									"end": 1932,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 1854,
									"end": 1864,
									"name": "PUSH",
									"source": 14,
									"value": "4E487B71"
								},
								{
									"begin": 1849,
									"end": 1852,
									"name": "PUSH",
									"source": 14,
									"value": "E0"
								},
								{
									"begin": 1845,
									"end": 1865,
									"name": "SHL",
									"source": 14
								},
								{
									"begin": 1842,
									"end": 1843,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 1835,
									"end": 1866,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 1889,
									"end": 1893,
									"name": "PUSH",
									"source": 14,
									"value": "22"
								},
								{
									"begin": 1886,
									"end": 1887,
									"name": "PUSH",
									"source": 14,
									"value": "4"
								},
								{
									"begin": 1879,
									"end": 1894,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 1917,
									"end": 1921,
									"name": "PUSH",
									"source": 14,
									"value": "24"
								},
								{
									"begin": 1914,
									"end": 1915,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 1907,
									"end": 1922,
									"name": "REVERT",
									"source": 14
								},
								{
									"begin": 1771,
									"end": 1932,
									"name": "tag",
									"source": 14,
									"value": "39"
								},
								{
									"begin": 1771,
									"end": 1932,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1771,
									"end": 1932,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 1558,
									"end": 1938,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 1558,
									"end": 1938,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 1558,
									"end": 1938,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 1558,
									"end": 1938,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 2069,
									"end": 2614,
									"name": "tag",
									"source": 14,
									"value": "17"
								},
								{
									"begin": 2069,
									"end": 2614,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 2171,
									"end": 2173,
									"name": "PUSH",
									"source": 14,
									"value": "1F"
								},
								{
									"begin": 2166,
									"end": 2169,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 2163,
									"end": 2174,
									"name": "GT",
									"source": 14
								},
								{
									"begin": 2160,
									"end": 2608,
									"name": "ISZERO",
									"source": 14
								},
								{
									"begin": 2160,
									"end": 2608,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "42"
								},
								{
									"begin": 2160,
									"end": 2608,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 2207,
									"end": 2208,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 2232,
									"end": 2237,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 2228,
									"end": 2230,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 2221,
									"end": 2238,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 2277,
									"end": 2281,
									"name": "PUSH",
									"source": 14,
									"value": "20"
								},
								{
									"begin": 2273,
									"end": 2275,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 2263,
									"end": 2282,
									"name": "KECCAK256",
									"source": 14
								},
								{
									"begin": 2347,
									"end": 2349,
									"name": "PUSH",
									"source": 14,
									"value": "1F"
								},
								{
									"begin": 2335,
									"end": 2345,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 2331,
									"end": 2350,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 2328,
									"end": 2329,
									"name": "PUSH",
									"source": 14,
									"value": "5"
								},
								{
									"begin": 2324,
									"end": 2351,
									"name": "SHR",
									"source": 14
								},
								{
									"begin": 2318,
									"end": 2322,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 2314,
									"end": 2352,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 2383,
									"end": 2387,
									"name": "PUSH",
									"source": 14,
									"value": "20"
								},
								{
									"begin": 2371,
									"end": 2381,
									"name": "DUP7",
									"source": 14
								},
								{
									"begin": 2368,
									"end": 2388,
									"name": "LT",
									"source": 14
								},
								{
									"begin": 2365,
									"end": 2412,
									"name": "ISZERO",
									"source": 14
								},
								{
									"begin": 2365,
									"end": 2412,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "43"
								},
								{
									"begin": 2365,
									"end": 2412,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2406,
									"end": 2410,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 2365,
									"end": 2412,
									"name": "tag",
									"source": 14,
									"value": "43"
								},
								{
									"begin": 2365,
									"end": 2412,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 2461,
									"end": 2463,
									"name": "PUSH",
									"source": 14,
									"value": "1F"
								},
								{
									"begin": 2456,
									"end": 2459,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 2452,
									"end": 2464,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 2449,
									"end": 2450,
									"name": "PUSH",
									"source": 14,
									"value": "5"
								},
								{
									"begin": 2445,
									"end": 2465,
									"name": "SHR",
									"source": 14
								},
								{
									"begin": 2439,
									"end": 2443,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 2435,
									"end": 2466,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 2425,
									"end": 2466,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 2425,
									"end": 2466,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 2516,
									"end": 2598,
									"name": "tag",
									"source": 14,
									"value": "44"
								},
								{
									"begin": 2516,
									"end": 2598,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 2534,
									"end": 2536,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 2527,
									"end": 2532,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 2524,
									"end": 2537,
									"name": "LT",
									"source": 14
								},
								{
									"begin": 2516,
									"end": 2598,
									"name": "ISZERO",
									"source": 14
								},
								{
									"begin": 2516,
									"end": 2598,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "46"
								},
								{
									"begin": 2516,
									"end": 2598,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 2579,
									"end": 2596,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 2579,
									"end": 2596,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 2579,
									"end": 2596,
									"name": "SSTORE",
									"source": 14
								},
								{
									"begin": 2560,
									"end": 2561,
									"name": "PUSH",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 2549,
									"end": 2562,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 2516,
									"end": 2598,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "44"
								},
								{
									"begin": 2516,
									"end": 2598,
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 2516,
									"end": 2598,
									"name": "tag",
									"source": 14,
									"value": "46"
								},
								{
									"begin": 2516,
									"end": 2598,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 2520,
									"end": 2523,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 2520,
									"end": 2523,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 2520,
									"end": 2523,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 2160,
									"end": 2608,
									"name": "tag",
									"source": 14,
									"value": "42"
								},
								{
									"begin": 2160,
									"end": 2608,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 2069,
									"end": 2614,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 2069,
									"end": 2614,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 2069,
									"end": 2614,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 2069,
									"end": 2614,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 2790,
									"end": 4142,
									"name": "tag",
									"source": 14,
									"value": "7"
								},
								{
									"begin": 2790,
									"end": 4142,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 2910,
									"end": 2920,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 2910,
									"end": 2920,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 2932,
									"end": 2962,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 2932,
									"end": 2962,
									"name": "GT",
									"source": 14
								},
								{
									"begin": 2929,
									"end": 2985,
									"name": "ISZERO",
									"source": 14
								},
								{
									"begin": 2929,
									"end": 2985,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "50"
								},
								{
									"begin": 2929,
									"end": 2985,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 2965,
									"end": 2983,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "50"
								},
								{
									"begin": 2965,
									"end": 2983,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "13"
								},
								{
									"begin": 2965,
									"end": 2983,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 2965,
									"end": 2983,
									"name": "tag",
									"source": 14,
									"value": "50"
								},
								{
									"begin": 2965,
									"end": 2983,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 2994,
									"end": 3091,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "51"
								},
								{
									"begin": 3084,
									"end": 3090,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 3044,
									"end": 3082,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "52"
								},
								{
									"begin": 3076,
									"end": 3080,
									"name": "DUP5",
									"source": 14
								},
								{
									"begin": 3070,
									"end": 3081,
									"name": "SLOAD",
									"source": 14
								},
								{
									"begin": 3044,
									"end": 3082,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "15"
								},
								{
									"begin": 3044,
									"end": 3082,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 3044,
									"end": 3082,
									"name": "tag",
									"source": 14,
									"value": "52"
								},
								{
									"begin": 3044,
									"end": 3082,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 3038,
									"end": 3042,
									"name": "DUP5",
									"source": 14
								},
								{
									"begin": 2994,
									"end": 3091,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "17"
								},
								{
									"begin": 2994,
									"end": 3091,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 2994,
									"end": 3091,
									"name": "tag",
									"source": 14,
									"value": "51"
								},
								{
									"begin": 2994,
									"end": 3091,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 3146,
									"end": 3150,
									"name": "PUSH",
									"source": 14,
									"value": "20"
								},
								{
									"begin": 3146,
									"end": 3150,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 3210,
									"end": 3212,
									"name": "PUSH",
									"source": 14,
									"value": "1F"
								},
								{
									"begin": 3199,
									"end": 3213,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 3199,
									"end": 3213,
									"name": "GT",
									"source": 14
								},
								{
									"begin": 3227,
									"end": 3228,
									"name": "PUSH",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 3222,
									"end": 3885,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 3222,
									"end": 3885,
									"name": "EQ",
									"source": 14
								},
								{
									"begin": 3222,
									"end": 3885,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "54"
								},
								{
									"begin": 3222,
									"end": 3885,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 3929,
									"end": 3930,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 3946,
									"end": 3952,
									"name": "DUP5",
									"source": 14
								},
								{
									"begin": 3943,
									"end": 4032,
									"name": "ISZERO",
									"source": 14
								},
								{
									"begin": 3943,
									"end": 4032,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "55"
								},
								{
									"begin": 3943,
									"end": 4032,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3998,
									"end": 4017,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 3998,
									"end": 4017,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 3998,
									"end": 4017,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 3992,
									"end": 4018,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 3943,
									"end": 4032,
									"name": "tag",
									"source": 14,
									"value": "55"
								},
								{
									"begin": 3943,
									"end": 4032,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2747,
									"end": 2748,
									"name": "PUSH",
									"source": 14,
									"value": "3"
								},
								{
									"begin": 2743,
									"end": 2754,
									"name": "DUP7",
									"source": 14
								},
								{
									"begin": 2743,
									"end": 2754,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 2743,
									"end": 2754,
									"name": "SHL",
									"source": 14
								},
								{
									"begin": 2739,
									"end": 2763,
									"name": "SHR",
									"source": 14
								},
								{
									"begin": 2735,
									"end": 2764,
									"name": "NOT",
									"source": 14
								},
								{
									"begin": 2725,
									"end": 2765,
									"name": "AND",
									"source": 14
								},
								{
									"begin": 2771,
									"end": 2772,
									"name": "PUSH",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 2767,
									"end": 2778,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 2767,
									"end": 2778,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 2767,
									"end": 2778,
									"name": "SHL",
									"source": 14
								},
								{
									"begin": 2722,
									"end": 2779,
									"name": "OR",
									"source": 14
								},
								{
									"begin": 4045,
									"end": 4126,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 4045,
									"end": 4126,
									"name": "SSTORE",
									"source": 14
								},
								{
									"begin": 3192,
									"end": 4136,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "46"
								},
								{
									"begin": 3192,
									"end": 4136,
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 3222,
									"end": 3885,
									"name": "tag",
									"source": 14,
									"value": "54"
								},
								{
									"begin": 3222,
									"end": 3885,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 2016,
									"end": 2017,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 2009,
									"end": 2023,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 2009,
									"end": 2023,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 2009,
									"end": 2023,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 2053,
									"end": 2057,
									"name": "PUSH",
									"source": 14,
									"value": "20"
								},
								{
									"begin": 2040,
									"end": 2058,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 2040,
									"end": 2058,
									"name": "KECCAK256",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 3258,
									"end": 3278,
									"name": "DUP7",
									"source": 14
								},
								{
									"begin": 3258,
									"end": 3278,
									"name": "AND",
									"source": 14
								},
								{
									"begin": 3258,
									"end": 3278,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 3376,
									"end": 3612,
									"name": "tag",
									"source": 14,
									"value": "58"
								},
								{
									"begin": 3376,
									"end": 3612,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 3390,
									"end": 3397,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 3387,
									"end": 3388,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 3384,
									"end": 3398,
									"name": "LT",
									"source": 14
								},
								{
									"begin": 3376,
									"end": 3612,
									"name": "ISZERO",
									"source": 14
								},
								{
									"begin": 3376,
									"end": 3612,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "60"
								},
								{
									"begin": 3376,
									"end": 3612,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 3479,
									"end": 3498,
									"name": "DUP9",
									"source": 14
								},
								{
									"begin": 3479,
									"end": 3498,
									"name": "DUP7",
									"source": 14
								},
								{
									"begin": 3479,
									"end": 3498,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 3473,
									"end": 3499,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 3458,
									"end": 3500,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 3458,
									"end": 3500,
									"name": "SSTORE",
									"source": 14
								},
								{
									"begin": 3571,
									"end": 3598,
									"name": "SWAP5",
									"source": 14
								},
								{
									"begin": 3571,
									"end": 3598,
									"name": "DUP5",
									"source": 14
								},
								{
									"begin": 3571,
									"end": 3598,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 3571,
									"end": 3598,
									"name": "SWAP5",
									"source": 14
								},
								{
									"begin": 3539,
									"end": 3540,
									"name": "PUSH",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 3527,
									"end": 3541,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 3527,
									"end": 3541,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 3527,
									"end": 3541,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 3527,
									"end": 3541,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 3406,
									"end": 3425,
									"name": "DUP5",
									"source": 14
								},
								{
									"begin": 3406,
									"end": 3425,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 3376,
									"end": 3612,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "58"
								},
								{
									"begin": 3376,
									"end": 3612,
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 3376,
									"end": 3612,
									"name": "tag",
									"source": 14,
									"value": "60"
								},
								{
									"begin": 3376,
									"end": 3612,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 3380,
									"end": 3383,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 3640,
									"end": 3646,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 3631,
									"end": 3638,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 3628,
									"end": 3647,
									"name": "LT",
									"source": 14
								},
								{
									"begin": 3625,
									"end": 3826,
									"name": "ISZERO",
									"source": 14
								},
								{
									"begin": 3625,
									"end": 3826,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "61"
								},
								{
									"begin": 3625,
									"end": 3826,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 3701,
									"end": 3720,
									"name": "DUP8",
									"source": 14
								},
								{
									"begin": 3701,
									"end": 3720,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 3701,
									"end": 3720,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 3695,
									"end": 3721,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 3784,
									"end": 3785,
									"name": "PUSH",
									"source": 14,
									"value": "3"
								},
								{
									"begin": 3780,
									"end": 3794,
									"name": "DUP9",
									"source": 14
								},
								{
									"begin": 3780,
									"end": 3794,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 3780,
									"end": 3794,
									"name": "SHL",
									"source": 14
								},
								{
									"begin": 3796,
									"end": 3799,
									"name": "PUSH",
									"source": 14,
									"value": "F8"
								},
								{
									"begin": 3776,
									"end": 3800,
									"name": "AND",
									"source": 14
								},
								{
									"begin": 3772,
									"end": 3809,
									"name": "SHR",
									"source": 14
								},
								{
									"begin": 3768,
									"end": 3810,
									"name": "NOT",
									"source": 14
								},
								{
									"begin": 3753,
									"end": 3811,
									"name": "AND",
									"source": 14
								},
								{
									"begin": 3738,
									"end": 3812,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 3738,
									"end": 3812,
									"name": "SSTORE",
									"source": 14
								},
								{
									"begin": 3625,
									"end": 3826,
									"name": "tag",
									"source": 14,
									"value": "61"
								},
								{
									"begin": 3625,
									"end": 3826,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3872,
									"end": 3873,
									"name": "PUSH",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 3856,
									"end": 3870,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 3856,
									"end": 3870,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 3856,
									"end": 3870,
									"name": "SHL",
									"source": 14
								},
								{
									"begin": 3852,
									"end": 3874,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 3839,
									"end": 3875,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 3839,
									"end": 3875,
									"name": "SSTORE",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2790,
									"end": 4142,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 2790,
									"end": 4142,
									"name": "tag",
									"source": 14,
									"value": "19"
								},
								{
									"begin": 2790,
									"end": 4142,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1515,
									"end": 21866,
									"name": "PUSH #[$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1515,
									"end": 21866,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 1515,
									"end": 21866,
									"name": "PUSH [$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1515,
									"end": 21866,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1515,
									"end": 21866,
									"name": "CODECOPY",
									"source": 12
								},
								{
									"begin": 1515,
									"end": 21866,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1515,
									"end": 21866,
									"name": "RETURN",
									"source": 12
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220c4293a69f26d92ab5ded0d0da379ac1d0ac129ea7ef9a528a9bca63254b82f4d64736f6c63430008120033",
									".code": [
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "tag",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "SHR",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH",
											"source": 12,
											"value": "6352211E"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "17"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH",
											"source": 12,
											"value": "A22CB465"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "18"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH",
											"source": 12,
											"value": "A22CB465"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "13"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH",
											"source": 12,
											"value": "B88D4FDE"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "14"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH",
											"source": 12,
											"value": "C87B56DD"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "15"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH",
											"source": 12,
											"value": "E985E9C5"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "16"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "tag",
											"source": 12,
											"value": "18"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH",
											"source": 12,
											"value": "6352211E"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "10"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH",
											"source": 12,
											"value": "70A08231"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "11"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH",
											"source": 12,
											"value": "95D89B41"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "12"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "tag",
											"source": 12,
											"value": "17"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH",
											"source": 12,
											"value": "95EA7B3"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "19"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH",
											"source": 12,
											"value": "95EA7B3"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "6"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH",
											"source": 12,
											"value": "18160DDD"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "7"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH",
											"source": 12,
											"value": "23B872DD"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "8"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH",
											"source": 12,
											"value": "42842E0E"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "9"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "tag",
											"source": 12,
											"value": "19"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH",
											"source": 12,
											"value": "1FFC9A7"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH",
											"source": 12,
											"value": "6FDDE03"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH",
											"source": 12,
											"value": "81812FC"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "tag",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1515,
											"end": 21866,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "tag",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "21"
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "22"
										},
										{
											"begin": 4607,
											"end": 4907,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "tag",
											"source": 12,
											"value": "21"
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "23"
										},
										{
											"begin": 4607,
											"end": 4907,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "tag",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 565,
											"end": 579,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 565,
											"end": 579,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 558,
											"end": 580,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 540,
											"end": 581,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 540,
											"end": 581,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 528,
											"end": 530,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 513,
											"end": 531,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "tag",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "RETURN",
											"source": 12
										},
										{
											"begin": 7635,
											"end": 7733,
											"name": "tag",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7635,
											"end": 7733,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7635,
											"end": 7733,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "26"
										},
										{
											"begin": 7635,
											"end": 7733,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "27"
										},
										{
											"begin": 7635,
											"end": 7733,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7635,
											"end": 7733,
											"name": "tag",
											"source": 12,
											"value": "26"
										},
										{
											"begin": 7635,
											"end": 7733,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7635,
											"end": 7733,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7635,
											"end": 7733,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 7635,
											"end": 7733,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 7635,
											"end": 7733,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7635,
											"end": 7733,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7635,
											"end": 7733,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 7635,
											"end": 7733,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "tag",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "30"
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "31"
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "32"
										},
										{
											"begin": 9091,
											"end": 9291,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "tag",
											"source": 12,
											"value": "31"
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "33"
										},
										{
											"begin": 9091,
											"end": 9291,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "tag",
											"source": 12,
											"value": "30"
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1697,
											"end": 1729,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1697,
											"end": 1729,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 1697,
											"end": 1729,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1679,
											"end": 1730,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1679,
											"end": 1730,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1667,
											"end": 1669,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1652,
											"end": 1670,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 1533,
											"end": 1736,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "tag",
											"source": 12,
											"value": "6"
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "36"
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "37"
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "38"
										},
										{
											"begin": 8668,
											"end": 9030,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "tag",
											"source": 12,
											"value": "37"
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "39"
										},
										{
											"begin": 8668,
											"end": 9030,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "tag",
											"source": 12,
											"value": "36"
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "STOP",
											"source": 12
										},
										{
											"begin": 3878,
											"end": 4175,
											"name": "tag",
											"source": 12,
											"value": "7"
										},
										{
											"begin": 3878,
											"end": 4175,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4128,
											"end": 4140,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 4128,
											"end": 4140,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 3922,
											"end": 3929,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4112,
											"end": 4125,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 4112,
											"end": 4140,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 3878,
											"end": 4175,
											"name": "tag",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 3878,
											"end": 4175,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3878,
											"end": 4175,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 3878,
											"end": 4175,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 2324,
											"end": 2349,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 2324,
											"end": 2349,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 2324,
											"end": 2349,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 2312,
											"end": 2314,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 2297,
											"end": 2315,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3878,
											"end": 4175,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 2178,
											"end": 2355,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 9930,
											"end": 10094,
											"name": "tag",
											"source": 12,
											"value": "8"
										},
										{
											"begin": 9930,
											"end": 10094,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9930,
											"end": 10094,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "36"
										},
										{
											"begin": 9930,
											"end": 10094,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "45"
										},
										{
											"begin": 9930,
											"end": 10094,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 9930,
											"end": 10094,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 9930,
											"end": 10094,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "46"
										},
										{
											"begin": 9930,
											"end": 10094,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9930,
											"end": 10094,
											"name": "tag",
											"source": 12,
											"value": "45"
										},
										{
											"begin": 9930,
											"end": 10094,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9930,
											"end": 10094,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "47"
										},
										{
											"begin": 9930,
											"end": 10094,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 10160,
											"end": 10339,
											"name": "tag",
											"source": 12,
											"value": "9"
										},
										{
											"begin": 10160,
											"end": 10339,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10160,
											"end": 10339,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "36"
										},
										{
											"begin": 10160,
											"end": 10339,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "49"
										},
										{
											"begin": 10160,
											"end": 10339,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 10160,
											"end": 10339,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 10160,
											"end": 10339,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "46"
										},
										{
											"begin": 10160,
											"end": 10339,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 10160,
											"end": 10339,
											"name": "tag",
											"source": 12,
											"value": "49"
										},
										{
											"begin": 10160,
											"end": 10339,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10160,
											"end": 10339,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "50"
										},
										{
											"begin": 10160,
											"end": 10339,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7450,
											"end": 7573,
											"name": "tag",
											"source": 12,
											"value": "10"
										},
										{
											"begin": 7450,
											"end": 7573,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7450,
											"end": 7573,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "30"
										},
										{
											"begin": 7450,
											"end": 7573,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "52"
										},
										{
											"begin": 7450,
											"end": 7573,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 7450,
											"end": 7573,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7450,
											"end": 7573,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "32"
										},
										{
											"begin": 7450,
											"end": 7573,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7450,
											"end": 7573,
											"name": "tag",
											"source": 12,
											"value": "52"
										},
										{
											"begin": 7450,
											"end": 7573,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7450,
											"end": 7573,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "53"
										},
										{
											"begin": 7450,
											"end": 7573,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4966,
											"end": 5169,
											"name": "tag",
											"source": 12,
											"value": "11"
										},
										{
											"begin": 4966,
											"end": 5169,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4966,
											"end": 5169,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 4966,
											"end": 5169,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "56"
										},
										{
											"begin": 4966,
											"end": 5169,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 4966,
											"end": 5169,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 4966,
											"end": 5169,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "57"
										},
										{
											"begin": 4966,
											"end": 5169,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4966,
											"end": 5169,
											"name": "tag",
											"source": 12,
											"value": "56"
										},
										{
											"begin": 4966,
											"end": 5169,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4966,
											"end": 5169,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "58"
										},
										{
											"begin": 4966,
											"end": 5169,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7797,
											"end": 7899,
											"name": "tag",
											"source": 12,
											"value": "12"
										},
										{
											"begin": 7797,
											"end": 7899,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7797,
											"end": 7899,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "26"
										},
										{
											"begin": 7797,
											"end": 7899,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "61"
										},
										{
											"begin": 7797,
											"end": 7899,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9358,
											"end": 9640,
											"name": "tag",
											"source": 12,
											"value": "13"
										},
										{
											"begin": 9358,
											"end": 9640,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9358,
											"end": 9640,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "36"
										},
										{
											"begin": 9358,
											"end": 9640,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 9358,
											"end": 9640,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 9358,
											"end": 9640,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 9358,
											"end": 9640,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "65"
										},
										{
											"begin": 9358,
											"end": 9640,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9358,
											"end": 9640,
											"name": "tag",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 9358,
											"end": 9640,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9358,
											"end": 9640,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "66"
										},
										{
											"begin": 9358,
											"end": 9640,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "tag",
											"source": 12,
											"value": "14"
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "36"
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "68"
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "69"
										},
										{
											"begin": 10405,
											"end": 10764,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "tag",
											"source": 12,
											"value": "68"
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "70"
										},
										{
											"begin": 10405,
											"end": 10764,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7965,
											"end": 8278,
											"name": "tag",
											"source": 12,
											"value": "15"
										},
										{
											"begin": 7965,
											"end": 8278,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7965,
											"end": 8278,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "26"
										},
										{
											"begin": 7965,
											"end": 8278,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "72"
										},
										{
											"begin": 7965,
											"end": 8278,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 7965,
											"end": 8278,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7965,
											"end": 8278,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "32"
										},
										{
											"begin": 7965,
											"end": 8278,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7965,
											"end": 8278,
											"name": "tag",
											"source": 12,
											"value": "72"
										},
										{
											"begin": 7965,
											"end": 8278,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7965,
											"end": 8278,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "73"
										},
										{
											"begin": 7965,
											"end": 8278,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9706,
											"end": 9868,
											"name": "tag",
											"source": 12,
											"value": "16"
										},
										{
											"begin": 9706,
											"end": 9868,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9706,
											"end": 9868,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 9706,
											"end": 9868,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "76"
										},
										{
											"begin": 9706,
											"end": 9868,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 9706,
											"end": 9868,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 9706,
											"end": 9868,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "77"
										},
										{
											"begin": 9706,
											"end": 9868,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9706,
											"end": 9868,
											"name": "tag",
											"source": 12,
											"value": "76"
										},
										{
											"begin": 9706,
											"end": 9868,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9826,
											"end": 9851,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9851,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9851,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 9803,
											"end": 9807,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9826,
											"end": 9851,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9851,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9851,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9844,
											"name": "PUSH",
											"source": 12,
											"value": "7"
										},
										{
											"begin": 9826,
											"end": 9851,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 9826,
											"end": 9851,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9851,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9851,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9851,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9826,
											"end": 9851,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9851,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9851,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9861,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9861,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9861,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9861,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9861,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9861,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9861,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9861,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9861,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9861,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9861,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9861,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9861,
											"name": "PUSH",
											"source": 12,
											"value": "FF"
										},
										{
											"begin": 9826,
											"end": 9861,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 9826,
											"end": 9861,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9706,
											"end": 9868,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "tag",
											"source": 12,
											"value": "23"
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4709,
											"end": 4713,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4744,
											"end": 4784,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4744,
											"end": 4784,
											"name": "AND",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80AC58CD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4744,
											"end": 4784,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 4744,
											"end": 4784,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4744,
											"end": 4848,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "81"
										},
										{
											"begin": 4744,
											"end": 4848,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4800,
											"end": 4848,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4800,
											"end": 4848,
											"name": "AND",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "5B5E139F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4800,
											"end": 4848,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 4744,
											"end": 4848,
											"name": "tag",
											"source": 12,
											"value": "81"
										},
										{
											"begin": 4744,
											"end": 4848,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4744,
											"end": 4900,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4744,
											"end": 4900,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "83"
										},
										{
											"begin": 4744,
											"end": 4900,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1FFC9A7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 937,
											"end": 977,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 937,
											"end": 977,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 937,
											"end": 977,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 4864,
											"end": 4900,
											"name": "tag",
											"source": 12,
											"value": "83"
										},
										{
											"begin": 4864,
											"end": 4900,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4725,
											"end": 4900,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 4607,
											"end": 4907,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4607,
											"end": 4907,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7635,
											"end": 7733,
											"name": "tag",
											"source": 12,
											"value": "27"
										},
										{
											"begin": 7635,
											"end": 7733,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7689,
											"end": 7702,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 7721,
											"end": 7726,
											"name": "PUSH",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "86"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "87"
										},
										{
											"begin": 7714,
											"end": 7726,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "tag",
											"source": 12,
											"value": "86"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "88"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "87"
										},
										{
											"begin": 7714,
											"end": 7726,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "tag",
											"source": 12,
											"value": "88"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "89"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "90"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH",
											"source": 12,
											"value": "100"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "89"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "tag",
											"source": 12,
											"value": "90"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "tag",
											"source": 12,
											"value": "91"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "91"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "tag",
											"source": 12,
											"value": "89"
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7714,
											"end": 7726,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7635,
											"end": 7733,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7635,
											"end": 7733,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "tag",
											"source": 12,
											"value": "33"
										},
										{
											"begin": 9091,
											"end": 9291,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9159,
											"end": 9166,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9183,
											"end": 9199,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "93"
										},
										{
											"begin": 9191,
											"end": 9198,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9183,
											"end": 9190,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "94"
										},
										{
											"begin": 9183,
											"end": 9199,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9183,
											"end": 9199,
											"name": "tag",
											"source": 12,
											"value": "93"
										},
										{
											"begin": 9183,
											"end": 9199,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9178,
											"end": 9242,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "95"
										},
										{
											"begin": 9178,
											"end": 9242,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 9208,
											"end": 9242,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9208,
											"end": 9242,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "33D1C039"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9208,
											"end": 9242,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9208,
											"end": 9242,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9208,
											"end": 9242,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 9208,
											"end": 9242,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9208,
											"end": 9242,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9208,
											"end": 9242,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 9208,
											"end": 9242,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9208,
											"end": 9242,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9208,
											"end": 9242,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 9208,
											"end": 9242,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9208,
											"end": 9242,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 9178,
											"end": 9242,
											"name": "tag",
											"source": 12,
											"value": "95"
										},
										{
											"begin": 9178,
											"end": 9242,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9260,
											"end": 9284,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9260,
											"end": 9284,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9260,
											"end": 9284,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9260,
											"end": 9284,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9260,
											"end": 9275,
											"name": "PUSH",
											"source": 12,
											"value": "6"
										},
										{
											"begin": 9260,
											"end": 9284,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 9260,
											"end": 9284,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9260,
											"end": 9284,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9260,
											"end": 9284,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9260,
											"end": 9284,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 9260,
											"end": 9284,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9260,
											"end": 9284,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 9260,
											"end": 9284,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9091,
											"end": 9291,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "tag",
											"source": 12,
											"value": "39"
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8740,
											"end": 8753,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8756,
											"end": 8780,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "97"
										},
										{
											"begin": 8772,
											"end": 8779,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8756,
											"end": 8771,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "53"
										},
										{
											"begin": 8756,
											"end": 8780,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8756,
											"end": 8780,
											"name": "tag",
											"source": 12,
											"value": "97"
										},
										{
											"begin": 8756,
											"end": 8780,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8740,
											"end": 8780,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8740,
											"end": 8780,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8800,
											"end": 8805,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8794,
											"end": 8805,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 8794,
											"end": 8796,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8794,
											"end": 8805,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 8794,
											"end": 8805,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 8790,
											"end": 8838,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "98"
										},
										{
											"begin": 8790,
											"end": 8838,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8814,
											"end": 8838,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8814,
											"end": 8838,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "250FDEE3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8814,
											"end": 8838,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8814,
											"end": 8838,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8814,
											"end": 8838,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 8814,
											"end": 8838,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8814,
											"end": 8838,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8814,
											"end": 8838,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 8814,
											"end": 8838,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8814,
											"end": 8838,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8814,
											"end": 8838,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 8814,
											"end": 8838,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8814,
											"end": 8838,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 8790,
											"end": 8838,
											"name": "tag",
											"source": 12,
											"value": "98"
										},
										{
											"begin": 8790,
											"end": 8838,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8853,
											"end": 8874,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8853,
											"end": 8874,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 8853,
											"end": 8874,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 8853,
											"end": 8874,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8853,
											"end": 8874,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 8853,
											"end": 8874,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8853,
											"end": 8916,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "101"
										},
										{
											"begin": 8853,
											"end": 8916,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8879,
											"end": 8916,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "102"
										},
										{
											"begin": 8896,
											"end": 8901,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 9706,
											"end": 9868,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "76"
										},
										{
											"begin": 9706,
											"end": 9868,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8879,
											"end": 8916,
											"name": "tag",
											"source": 12,
											"value": "102"
										},
										{
											"begin": 8879,
											"end": 8916,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8878,
											"end": 8916,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 8853,
											"end": 8916,
											"name": "tag",
											"source": 12,
											"value": "101"
										},
										{
											"begin": 8853,
											"end": 8916,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8849,
											"end": 8985,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 8849,
											"end": 8985,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "104"
										},
										{
											"begin": 8849,
											"end": 8985,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8939,
											"end": 8974,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8939,
											"end": 8974,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "67D9DCA1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8939,
											"end": 8974,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8939,
											"end": 8974,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8939,
											"end": 8974,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 8939,
											"end": 8974,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8939,
											"end": 8974,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8939,
											"end": 8974,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 8939,
											"end": 8974,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8939,
											"end": 8974,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8939,
											"end": 8974,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 8939,
											"end": 8974,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8939,
											"end": 8974,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 8849,
											"end": 8985,
											"name": "tag",
											"source": 12,
											"value": "104"
										},
										{
											"begin": 8849,
											"end": 8985,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8995,
											"end": 9023,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "105"
										},
										{
											"begin": 9004,
											"end": 9006,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 9008,
											"end": 9015,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 9017,
											"end": 9022,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 8995,
											"end": 9003,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "106"
										},
										{
											"begin": 8995,
											"end": 9023,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8995,
											"end": 9023,
											"name": "tag",
											"source": 12,
											"value": "105"
										},
										{
											"begin": 8995,
											"end": 9023,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8730,
											"end": 9030,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8668,
											"end": 9030,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8668,
											"end": 9030,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9930,
											"end": 10094,
											"name": "tag",
											"source": 12,
											"value": "47"
										},
										{
											"begin": 9930,
											"end": 10094,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10059,
											"end": 10087,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "105"
										},
										{
											"begin": 10069,
											"end": 10073,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10075,
											"end": 10077,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10079,
											"end": 10086,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10059,
											"end": 10068,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "112"
										},
										{
											"begin": 10059,
											"end": 10087,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 10160,
											"end": 10339,
											"name": "tag",
											"source": 12,
											"value": "50"
										},
										{
											"begin": 10160,
											"end": 10339,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10293,
											"end": 10332,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "105"
										},
										{
											"begin": 10310,
											"end": 10314,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10316,
											"end": 10318,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10320,
											"end": 10327,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10293,
											"end": 10332,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 10293,
											"end": 10332,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 10293,
											"end": 10332,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10293,
											"end": 10332,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 10293,
											"end": 10332,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 10293,
											"end": 10332,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 10293,
											"end": 10332,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10293,
											"end": 10332,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10293,
											"end": 10332,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 10293,
											"end": 10332,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10293,
											"end": 10332,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10293,
											"end": 10332,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10293,
											"end": 10309,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "70"
										},
										{
											"begin": 10293,
											"end": 10332,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7450,
											"end": 7573,
											"name": "tag",
											"source": 12,
											"value": "53"
										},
										{
											"begin": 7450,
											"end": 7573,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7514,
											"end": 7521,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7540,
											"end": 7561,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "116"
										},
										{
											"begin": 7553,
											"end": 7560,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7540,
											"end": 7552,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "117"
										},
										{
											"begin": 7540,
											"end": 7561,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7540,
											"end": 7561,
											"name": "tag",
											"source": 12,
											"value": "116"
										},
										{
											"begin": 7540,
											"end": 7561,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7540,
											"end": 7566,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 7540,
											"end": 7566,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 7450,
											"end": 7573,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7450,
											"end": 7573,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4966,
											"end": 5169,
											"name": "tag",
											"source": 12,
											"value": "58"
										},
										{
											"begin": 4966,
											"end": 5169,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5030,
											"end": 5037,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5053,
											"end": 5072,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5053,
											"end": 5072,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 5049,
											"end": 5109,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "119"
										},
										{
											"begin": 5049,
											"end": 5109,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 5081,
											"end": 5109,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 5081,
											"end": 5109,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23D3AD81"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5081,
											"end": 5109,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5081,
											"end": 5109,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5081,
											"end": 5109,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 5081,
											"end": 5109,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5081,
											"end": 5109,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 5081,
											"end": 5109,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 5081,
											"end": 5109,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 5081,
											"end": 5109,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5081,
											"end": 5109,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 5081,
											"end": 5109,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5081,
											"end": 5109,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 5049,
											"end": 5109,
											"name": "tag",
											"source": 12,
											"value": "119"
										},
										{
											"begin": 5049,
											"end": 5109,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5134,
											"end": 5153,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 5134,
											"end": 5153,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5134,
											"end": 5153,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5134,
											"end": 5153,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5134,
											"end": 5153,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5134,
											"end": 5146,
											"name": "PUSH",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 5134,
											"end": 5153,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 5134,
											"end": 5153,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5134,
											"end": 5153,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 5134,
											"end": 5153,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5134,
											"end": 5153,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 5134,
											"end": 5161,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 5134,
											"end": 5161,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5134,
											"end": 5161,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 5134,
											"end": 5161,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4966,
											"end": 5169,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7797,
											"end": 7899,
											"name": "tag",
											"source": 12,
											"value": "61"
										},
										{
											"begin": 7797,
											"end": 7899,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7853,
											"end": 7866,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 7885,
											"end": 7892,
											"name": "PUSH",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 7878,
											"end": 7892,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7878,
											"end": 7892,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 7878,
											"end": 7892,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "86"
										},
										{
											"begin": 7878,
											"end": 7892,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7878,
											"end": 7892,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "87"
										},
										{
											"begin": 7878,
											"end": 7892,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9358,
											"end": 9640,
											"name": "tag",
											"source": 12,
											"value": "66"
										},
										{
											"begin": 9358,
											"end": 9640,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9456,
											"end": 9480,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 9456,
											"end": 9480,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 9456,
											"end": 9480,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 9452,
											"end": 9506,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "128"
										},
										{
											"begin": 9452,
											"end": 9506,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 9489,
											"end": 9506,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9489,
											"end": 9506,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B06307DB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9489,
											"end": 9506,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9489,
											"end": 9506,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9489,
											"end": 9506,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 9489,
											"end": 9506,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9489,
											"end": 9506,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9489,
											"end": 9506,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 9489,
											"end": 9506,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9489,
											"end": 9506,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9489,
											"end": 9506,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 9489,
											"end": 9506,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9489,
											"end": 9506,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 9452,
											"end": 9506,
											"name": "tag",
											"source": 12,
											"value": "128"
										},
										{
											"begin": 9452,
											"end": 9506,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 9517,
											"end": 9549,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9517,
											"end": 9549,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9549,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9549,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9535,
											"name": "PUSH",
											"source": 12,
											"value": "7"
										},
										{
											"begin": 9517,
											"end": 9549,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 9517,
											"end": 9549,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9549,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9549,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9549,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9517,
											"end": 9549,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9549,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9549,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9517,
											"end": 9559,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9559,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9559,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9559,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9559,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9559,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9559,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9559,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9559,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9559,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9559,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9559,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9570,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9570,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 9517,
											"end": 9570,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9570,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9570,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9570,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9570,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9570,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9570,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9570,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9570,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9570,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 9585,
											"end": 9633,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9585,
											"end": 9633,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 540,
											"end": 581,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 540,
											"end": 581,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 540,
											"end": 581,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9517,
											"end": 9559,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9517,
											"end": 9559,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 719,
											"end": 729,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 9585,
											"end": 9633,
											"name": "PUSH",
											"source": 12,
											"value": "17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31"
										},
										{
											"begin": 9585,
											"end": 9633,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 513,
											"end": 531,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9585,
											"end": 9633,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9585,
											"end": 9633,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 9585,
											"end": 9633,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9585,
											"end": 9633,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9585,
											"end": 9633,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 9585,
											"end": 9633,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9585,
											"end": 9633,
											"name": "LOG3",
											"source": 12
										},
										{
											"begin": 9358,
											"end": 9640,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9358,
											"end": 9640,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9358,
											"end": 9640,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "tag",
											"source": 12,
											"value": "70"
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10566,
											"end": 10594,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "133"
										},
										{
											"begin": 10576,
											"end": 10580,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 10582,
											"end": 10584,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 10586,
											"end": 10593,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 10566,
											"end": 10575,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "112"
										},
										{
											"begin": 10566,
											"end": 10594,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 10566,
											"end": 10594,
											"name": "tag",
											"source": 12,
											"value": "133"
										},
										{
											"begin": 10566,
											"end": 10594,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10608,
											"end": 10621,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10608,
											"end": 10621,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1702,
											"end": 1721,
											"name": "EXTCODESIZE",
											"source": 4
										},
										{
											"begin": 1702,
											"end": 1725,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1702,
											"end": 1725,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 10608,
											"end": 10684,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10608,
											"end": 10684,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 10608,
											"end": 10684,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "136"
										},
										{
											"begin": 10608,
											"end": 10684,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 10608,
											"end": 10684,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10628,
											"end": 10684,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "137"
										},
										{
											"begin": 10659,
											"end": 10663,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 10665,
											"end": 10667,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 10669,
											"end": 10676,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 10678,
											"end": 10683,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 10628,
											"end": 10658,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "138"
										},
										{
											"begin": 10628,
											"end": 10684,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 10628,
											"end": 10684,
											"name": "tag",
											"source": 12,
											"value": "137"
										},
										{
											"begin": 10628,
											"end": 10684,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10627,
											"end": 10684,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 10608,
											"end": 10684,
											"name": "tag",
											"source": 12,
											"value": "136"
										},
										{
											"begin": 10608,
											"end": 10684,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10604,
											"end": 10758,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 10604,
											"end": 10758,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "139"
										},
										{
											"begin": 10604,
											"end": 10758,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 10707,
											"end": 10747,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 10707,
											"end": 10747,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "68D2BF6B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10707,
											"end": 10747,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10707,
											"end": 10747,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10707,
											"end": 10747,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 10707,
											"end": 10747,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 10707,
											"end": 10747,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 10707,
											"end": 10747,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 10707,
											"end": 10747,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10707,
											"end": 10747,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 10707,
											"end": 10747,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 10707,
											"end": 10747,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10707,
											"end": 10747,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 10604,
											"end": 10758,
											"name": "tag",
											"source": 12,
											"value": "139"
										},
										{
											"begin": 10604,
											"end": 10758,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10405,
											"end": 10764,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10405,
											"end": 10764,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7965,
											"end": 8278,
											"name": "tag",
											"source": 12,
											"value": "73"
										},
										{
											"begin": 7965,
											"end": 8278,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8038,
											"end": 8051,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 8068,
											"end": 8084,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "141"
										},
										{
											"begin": 8076,
											"end": 8083,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8068,
											"end": 8075,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "94"
										},
										{
											"begin": 8068,
											"end": 8084,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8068,
											"end": 8084,
											"name": "tag",
											"source": 12,
											"value": "141"
										},
										{
											"begin": 8068,
											"end": 8084,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8063,
											"end": 8122,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "142"
										},
										{
											"begin": 8063,
											"end": 8122,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8093,
											"end": 8122,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8093,
											"end": 8122,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A14C4B5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E4"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8093,
											"end": 8122,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8093,
											"end": 8122,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8093,
											"end": 8122,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 8093,
											"end": 8122,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8093,
											"end": 8122,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8093,
											"end": 8122,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 8093,
											"end": 8122,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8093,
											"end": 8122,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8093,
											"end": 8122,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 8093,
											"end": 8122,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8093,
											"end": 8122,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 8063,
											"end": 8122,
											"name": "tag",
											"source": 12,
											"value": "142"
										},
										{
											"begin": 8063,
											"end": 8122,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8133,
											"end": 8154,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8157,
											"end": 8167,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "143"
										},
										{
											"begin": 8595,
											"end": 8604,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8595,
											"end": 8604,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8595,
											"end": 8604,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 8595,
											"end": 8604,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 8595,
											"end": 8604,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8595,
											"end": 8604,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8595,
											"end": 8604,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8595,
											"end": 8604,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8595,
											"end": 8604,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 8595,
											"end": 8604,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8595,
											"end": 8604,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8595,
											"end": 8604,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8519,
											"end": 8611,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8157,
											"end": 8167,
											"name": "tag",
											"source": 12,
											"value": "143"
										},
										{
											"begin": 8157,
											"end": 8167,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8133,
											"end": 8167,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8133,
											"end": 8167,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8190,
											"end": 8197,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8184,
											"end": 8205,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 8209,
											"end": 8210,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8184,
											"end": 8210,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 8184,
											"end": 8271,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "145"
										},
										{
											"begin": 8184,
											"end": 8271,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8184,
											"end": 8271,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8184,
											"end": 8271,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 8184,
											"end": 8271,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8184,
											"end": 8271,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 8184,
											"end": 8271,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8184,
											"end": 8271,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8184,
											"end": 8271,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8184,
											"end": 8271,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8184,
											"end": 8271,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8184,
											"end": 8271,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8184,
											"end": 8271,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8184,
											"end": 8271,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8184,
											"end": 8271,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "146"
										},
										{
											"begin": 8184,
											"end": 8271,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8184,
											"end": 8271,
											"name": "tag",
											"source": 12,
											"value": "145"
										},
										{
											"begin": 8184,
											"end": 8271,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8237,
											"end": 8244,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8246,
											"end": 8264,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "147"
										},
										{
											"begin": 8246,
											"end": 8253,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 8246,
											"end": 8262,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "148"
										},
										{
											"begin": 8246,
											"end": 8264,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8246,
											"end": 8264,
											"name": "tag",
											"source": 12,
											"value": "147"
										},
										{
											"begin": 8246,
											"end": 8264,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "149"
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "150"
										},
										{
											"begin": 8220,
											"end": 8265,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "tag",
											"source": 12,
											"value": "149"
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8220,
											"end": 8265,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8184,
											"end": 8271,
											"name": "tag",
											"source": 12,
											"value": "146"
										},
										{
											"begin": 8184,
											"end": 8271,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8177,
											"end": 8271,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 7965,
											"end": 8278,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7965,
											"end": 8278,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 11010,
											"end": 11194,
											"name": "tag",
											"source": 12,
											"value": "94"
										},
										{
											"begin": 11010,
											"end": 11194,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11067,
											"end": 11071,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 11130,
											"end": 11143,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 11130,
											"end": 11143,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 11120,
											"end": 11127,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 11120,
											"end": 11143,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 11090,
											"end": 11187,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 11090,
											"end": 11187,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 11090,
											"end": 11187,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "83"
										},
										{
											"begin": 11090,
											"end": 11187,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11160,
											"end": 11180,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 11160,
											"end": 11180,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 11160,
											"end": 11180,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 11160,
											"end": 11180,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 11160,
											"end": 11171,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 11160,
											"end": 11180,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 11160,
											"end": 11180,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 11160,
											"end": 11180,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 11160,
											"end": 11180,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 11160,
											"end": 11180,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 11160,
											"end": 11187,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11160,
											"end": 11187,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 11160,
											"end": 11187,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 11160,
											"end": 11187,
											"name": "PUSH",
											"source": 12,
											"value": "FF"
										},
										{
											"begin": 11160,
											"end": 11187,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 11159,
											"end": 11187,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 11159,
											"end": 11187,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 11010,
											"end": 11194,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 18963,
											"end": 19153,
											"name": "tag",
											"source": 12,
											"value": "106"
										},
										{
											"begin": 18963,
											"end": 19153,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 19074,
											"end": 19098,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 19074,
											"end": 19098,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 19074,
											"end": 19098,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 19074,
											"end": 19098,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 19074,
											"end": 19089,
											"name": "PUSH",
											"source": 12,
											"value": "6"
										},
										{
											"begin": 19074,
											"end": 19098,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 19074,
											"end": 19098,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 19074,
											"end": 19098,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 19074,
											"end": 19098,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 19074,
											"end": 19098,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 19074,
											"end": 19098,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 19074,
											"end": 19103,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 19074,
											"end": 19103,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 19074,
											"end": 19103,
											"name": "AND",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 19074,
											"end": 19103,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 19074,
											"end": 19103,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 19074,
											"end": 19103,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 19074,
											"end": 19103,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 19074,
											"end": 19103,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 19074,
											"end": 19103,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 19074,
											"end": 19103,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 19074,
											"end": 19103,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 19074,
											"end": 19103,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 19118,
											"end": 19146,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 19118,
											"end": 19146,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 19074,
											"end": 19098,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 19074,
											"end": 19098,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 19118,
											"end": 19146,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 19118,
											"end": 19146,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 19118,
											"end": 19146,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 19118,
											"end": 19146,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 19118,
											"end": 19146,
											"name": "PUSH",
											"source": 12,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 19118,
											"end": 19146,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 19118,
											"end": 19146,
											"name": "LOG4",
											"source": 12
										},
										{
											"begin": 18963,
											"end": 19153,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 18963,
											"end": 19153,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 18963,
											"end": 19153,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 18963,
											"end": 19153,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 14032,
											"end": 16115,
											"name": "tag",
											"source": 12,
											"value": "112"
										},
										{
											"begin": 14032,
											"end": 16115,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14143,
											"end": 14178,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 14181,
											"end": 14202,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "161"
										},
										{
											"begin": 14194,
											"end": 14201,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 14181,
											"end": 14193,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "117"
										},
										{
											"begin": 14181,
											"end": 14202,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 14181,
											"end": 14202,
											"name": "tag",
											"source": 12,
											"value": "161"
										},
										{
											"begin": 14181,
											"end": 14202,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14143,
											"end": 14202,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 14143,
											"end": 14202,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14239,
											"end": 14243,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14217,
											"end": 14243,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 14217,
											"end": 14230,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 14217,
											"end": 14235,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 14217,
											"end": 14235,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 14217,
											"end": 14235,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14217,
											"end": 14243,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 14217,
											"end": 14243,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 14213,
											"end": 14280,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "162"
										},
										{
											"begin": 14213,
											"end": 14280,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 14252,
											"end": 14280,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 14252,
											"end": 14280,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A11481"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 14252,
											"end": 14280,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 14252,
											"end": 14280,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 14252,
											"end": 14280,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 14252,
											"end": 14280,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 14252,
											"end": 14280,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 14252,
											"end": 14280,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 14252,
											"end": 14280,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 14252,
											"end": 14280,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 14252,
											"end": 14280,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 14252,
											"end": 14280,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 14252,
											"end": 14280,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 14213,
											"end": 14280,
											"name": "tag",
											"source": 12,
											"value": "162"
										},
										{
											"begin": 14213,
											"end": 14280,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14291,
											"end": 14313,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14317,
											"end": 14337,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 14317,
											"end": 14337,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 14317,
											"end": 14337,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 14317,
											"end": 14337,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 14317,
											"end": 14389,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "165"
										},
										{
											"begin": 14317,
											"end": 14389,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14353,
											"end": 14389,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "165"
										},
										{
											"begin": 14370,
											"end": 14374,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 9706,
											"end": 9868,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "76"
										},
										{
											"begin": 9706,
											"end": 9868,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 14353,
											"end": 14389,
											"name": "tag",
											"source": 12,
											"value": "165"
										},
										{
											"begin": 14353,
											"end": 14389,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14317,
											"end": 14441,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 14317,
											"end": 14441,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "167"
										},
										{
											"begin": 14317,
											"end": 14441,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 14405,
											"end": 14425,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "169"
										},
										{
											"begin": 14417,
											"end": 14424,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 14405,
											"end": 14416,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "33"
										},
										{
											"begin": 14405,
											"end": 14425,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 14405,
											"end": 14425,
											"name": "tag",
											"source": 12,
											"value": "169"
										},
										{
											"begin": 14405,
											"end": 14425,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14405,
											"end": 14441,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 14405,
											"end": 14441,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 14317,
											"end": 14441,
											"name": "tag",
											"source": 12,
											"value": "167"
										},
										{
											"begin": 14317,
											"end": 14441,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14291,
											"end": 14442,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 14291,
											"end": 14442,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14458,
											"end": 14475,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 14453,
											"end": 14519,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "170"
										},
										{
											"begin": 14453,
											"end": 14519,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 14484,
											"end": 14519,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 14484,
											"end": 14519,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2CE44B5F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 14484,
											"end": 14519,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 14484,
											"end": 14519,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 14484,
											"end": 14519,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 14484,
											"end": 14519,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 14484,
											"end": 14519,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 14484,
											"end": 14519,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 14484,
											"end": 14519,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 14484,
											"end": 14519,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 14484,
											"end": 14519,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 14484,
											"end": 14519,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 14484,
											"end": 14519,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 14453,
											"end": 14519,
											"name": "tag",
											"source": 12,
											"value": "170"
										},
										{
											"begin": 14453,
											"end": 14519,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14533,
											"end": 14549,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 14533,
											"end": 14549,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 14529,
											"end": 14581,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "171"
										},
										{
											"begin": 14529,
											"end": 14581,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 14558,
											"end": 14581,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 14558,
											"end": 14581,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3A954ECD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 14558,
											"end": 14581,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 14558,
											"end": 14581,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 14558,
											"end": 14581,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 14558,
											"end": 14581,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 14558,
											"end": 14581,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 14558,
											"end": 14581,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 14558,
											"end": 14581,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 14558,
											"end": 14581,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 14558,
											"end": 14581,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 14558,
											"end": 14581,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 14558,
											"end": 14581,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 14529,
											"end": 14581,
											"name": "tag",
											"source": 12,
											"value": "171"
										},
										{
											"begin": 14529,
											"end": 14581,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14697,
											"end": 14732,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "174"
										},
										{
											"begin": 14714,
											"end": 14715,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 14718,
											"end": 14725,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 14727,
											"end": 14731,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 14697,
											"end": 14705,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "106"
										},
										{
											"begin": 14697,
											"end": 14732,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 14697,
											"end": 14732,
											"name": "tag",
											"source": 12,
											"value": "174"
										},
										{
											"begin": 14697,
											"end": 14732,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 15022,
											"end": 15040,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15040,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15040,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15040,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 15022,
											"end": 15040,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15040,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15040,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15034,
											"name": "PUSH",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 15022,
											"end": 15040,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 15022,
											"end": 15040,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15040,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15040,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15040,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 15022,
											"end": 15040,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15040,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15040,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15053,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15053,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 15022,
											"end": 15053,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15053,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15053,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15053,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 15022,
											"end": 15053,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15053,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15053,
											"name": "AND",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 15022,
											"end": 15053,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15053,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15053,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15053,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15053,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15053,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15053,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15083,
											"name": "DUP10",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15083,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15083,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15083,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15083,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15083,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15083,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15083,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15083,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15096,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15096,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15096,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15096,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15096,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15096,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15096,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15096,
											"name": "AND",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": 15067,
											"end": 15096,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15096,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15096,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15096,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15096,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15096,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15096,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15096,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15096,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15096,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15067,
											"end": 15096,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 15145,
											"end": 15165,
											"name": "DUP10",
											"source": 12
										},
										{
											"begin": 15145,
											"end": 15165,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 15145,
											"end": 15165,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 15145,
											"end": 15156,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 15145,
											"end": 15165,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15145,
											"end": 15165,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 15145,
											"end": 15165,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 15145,
											"end": 15165,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 15145,
											"end": 15165,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 15145,
											"end": 15165,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 15179,
											"end": 15197,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 15179,
											"end": 15197,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 15211,
											"end": 15260,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 15211,
											"end": 15260,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15211,
											"end": 15260,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 15211,
											"end": 15260,
											"name": "OR",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 15244,
											"end": 15259,
											"name": "TIMESTAMP",
											"source": 12
										},
										{
											"begin": 15211,
											"end": 15260,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15211,
											"end": 15260,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 15211,
											"end": 15260,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 15211,
											"end": 15260,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 15211,
											"end": 15260,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15211,
											"end": 15260,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 15211,
											"end": 15260,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 15211,
											"end": 15260,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 15211,
											"end": 15260,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 15211,
											"end": 15260,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 15530,
											"end": 15541,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 15530,
											"end": 15541,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 15589,
											"end": 15613,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 15589,
											"end": 15613,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 15589,
											"end": 15613,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 15589,
											"end": 15613,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 15589,
											"end": 15613,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 15631,
											"end": 15644,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 15631,
											"end": 15644,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 15145,
											"end": 15165,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 15145,
											"end": 15165,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 15589,
											"end": 15613,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15589,
											"end": 15613,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 15631,
											"end": 15644,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 15627,
											"end": 16004,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "176"
										},
										{
											"begin": 15627,
											"end": 16004,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 15838,
											"end": 15851,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 15838,
											"end": 15851,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 15823,
											"end": 15834,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 15823,
											"end": 15851,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 15819,
											"end": 15990,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "176"
										},
										{
											"begin": 15819,
											"end": 15990,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 15875,
											"end": 15895,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 15875,
											"end": 15895,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 15943,
											"end": 15971,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 15943,
											"end": 15971,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 15943,
											"end": 15971,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 15943,
											"end": 15971,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 15917,
											"end": 15971,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 15917,
											"end": 15971,
											"name": "AND",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 15917,
											"end": 15971,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 15917,
											"end": 15971,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15917,
											"end": 15971,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 15917,
											"end": 15971,
											"name": "AND",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 15875,
											"end": 15895,
											"name": "DUP11",
											"source": 12
										},
										{
											"begin": 15875,
											"end": 15895,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 15917,
											"end": 15971,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 15917,
											"end": 15971,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 15917,
											"end": 15971,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 15917,
											"end": 15971,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 15819,
											"end": 15990,
											"name": "tag",
											"source": 12,
											"value": "176"
										},
										{
											"begin": 15819,
											"end": 15990,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14998,
											"end": 16014,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14998,
											"end": 16014,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14998,
											"end": 16014,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 16048,
											"end": 16055,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 16044,
											"end": 16046,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 16029,
											"end": 16056,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 16038,
											"end": 16042,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 16029,
											"end": 16056,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 16029,
											"end": 16056,
											"name": "PUSH",
											"source": 12,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 16029,
											"end": 16056,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 16029,
											"end": 16056,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 16029,
											"end": 16056,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 16029,
											"end": 16056,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 16029,
											"end": 16056,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 16029,
											"end": 16056,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 16029,
											"end": 16056,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 16029,
											"end": 16056,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 16029,
											"end": 16056,
											"name": "LOG4",
											"source": 12
										},
										{
											"begin": 14133,
											"end": 16115,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14133,
											"end": 16115,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14032,
											"end": 16115,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14032,
											"end": 16115,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14032,
											"end": 16115,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14032,
											"end": 16115,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 6309,
											"end": 7393,
											"name": "tag",
											"source": 12,
											"value": "117"
										},
										{
											"begin": 6309,
											"end": 7393,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 6419,
											"end": 6426,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6499,
											"end": 6512,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6499,
											"end": 6512,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 6492,
											"end": 6496,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6492,
											"end": 6512,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 6461,
											"end": 7329,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6461,
											"end": 7329,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "184"
										},
										{
											"begin": 6461,
											"end": 7329,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6563,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6566,
											"end": 6583,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6566,
											"end": 6583,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6566,
											"end": 6583,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6566,
											"end": 6577,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 6566,
											"end": 6583,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 6566,
											"end": 6583,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6566,
											"end": 6583,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6566,
											"end": 6583,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6566,
											"end": 6583,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 6566,
											"end": 6583,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6566,
											"end": 6583,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6566,
											"end": 6583,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6566,
											"end": 6583,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "PUSH",
											"source": 12,
											"value": "FF"
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6532,
											"end": 6583,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6601,
											"end": 7315,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "188"
										},
										{
											"begin": 6601,
											"end": 7315,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 6650,
											"end": 6664,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6650,
											"end": 6664,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6650,
											"end": 6678,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 6650,
											"end": 6678,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6646,
											"end": 6745,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "186"
										},
										{
											"begin": 6646,
											"end": 6745,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 6713,
											"end": 6722,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 6309,
											"end": 7393,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6309,
											"end": 7393,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 6646,
											"end": 6745,
											"name": "tag",
											"source": 12,
											"value": "186"
										},
										{
											"begin": 6646,
											"end": 6745,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 7081,
											"end": 7087,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7125,
											"end": 7142,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7125,
											"end": 7142,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7125,
											"end": 7142,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7125,
											"end": 7142,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7125,
											"end": 7136,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7125,
											"end": 7142,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 7125,
											"end": 7142,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7125,
											"end": 7142,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7125,
											"end": 7142,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7125,
											"end": 7142,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7125,
											"end": 7142,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7125,
											"end": 7142,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7125,
											"end": 7142,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7125,
											"end": 7142,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "PUSH",
											"source": 12,
											"value": "FF"
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 7113,
											"end": 7142,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7172,
											"end": 7200,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7168,
											"end": 7275,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "189"
										},
										{
											"begin": 7168,
											"end": 7275,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7239,
											"end": 7248,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 6309,
											"end": 7393,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6309,
											"end": 7393,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7168,
											"end": 7275,
											"name": "tag",
											"source": 12,
											"value": "189"
										},
										{
											"begin": 7168,
											"end": 7275,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7042,
											"end": 7297,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "186"
										},
										{
											"begin": 7042,
											"end": 7297,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7042,
											"end": 7297,
											"name": "tag",
											"source": 12,
											"value": "188"
										},
										{
											"begin": 7042,
											"end": 7297,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6514,
											"end": 7329,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6461,
											"end": 7329,
											"name": "tag",
											"source": 12,
											"value": "184"
										},
										{
											"begin": 6461,
											"end": 7329,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7355,
											"end": 7386,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7355,
											"end": 7386,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6F96CDA1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7355,
											"end": 7386,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7355,
											"end": 7386,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7355,
											"end": 7386,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7355,
											"end": 7386,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7355,
											"end": 7386,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7355,
											"end": 7386,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 7355,
											"end": 7386,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7355,
											"end": 7386,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7355,
											"end": 7386,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 7355,
											"end": 7386,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7355,
											"end": 7386,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 19634,
											"end": 20285,
											"name": "tag",
											"source": 12,
											"value": "138"
										},
										{
											"begin": 19634,
											"end": 20285,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A85BD01"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 19793,
											"end": 19797,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 19793,
											"end": 19797,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 19813,
											"end": 19849,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19849,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19849,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19849,
											"name": "PUSH",
											"source": 12,
											"value": "150B7A02"
										},
										{
											"begin": 19813,
											"end": 19849,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "193"
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 719,
											"end": 729,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 19864,
											"end": 19868,
											"name": "DUP10",
											"source": 12
										},
										{
											"begin": 19864,
											"end": 19868,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 19870,
											"end": 19877,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 19870,
											"end": 19877,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 19879,
											"end": 19884,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 19879,
											"end": 19884,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "194"
										},
										{
											"begin": 19813,
											"end": 19885,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "tag",
											"source": 12,
											"value": "193"
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "GAS",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "CALL",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "195"
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "196"
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "197"
										},
										{
											"begin": 19813,
											"end": 19885,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "tag",
											"source": 12,
											"value": "196"
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "tag",
											"source": 12,
											"value": "195"
										},
										{
											"begin": 19813,
											"end": 19885,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "198"
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "203"
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "NOT",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "PUSH",
											"source": 12,
											"value": "3F"
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "RETURNDATACOPY",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "202"
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "tag",
											"source": 12,
											"value": "203"
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "tag",
											"source": 12,
											"value": "202"
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 20044,
											"end": 20050,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 20044,
											"end": 20057,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 20061,
											"end": 20062,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 20044,
											"end": 20062,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 20040,
											"end": 20269,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "204"
										},
										{
											"begin": 20040,
											"end": 20269,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 20089,
											"end": 20129,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 20089,
											"end": 20129,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "68D2BF6B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 20089,
											"end": 20129,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 20089,
											"end": 20129,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 20089,
											"end": 20129,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 20089,
											"end": 20129,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 20089,
											"end": 20129,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 20089,
											"end": 20129,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 20089,
											"end": 20129,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 20089,
											"end": 20129,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 20089,
											"end": 20129,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 20089,
											"end": 20129,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 20089,
											"end": 20129,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 20040,
											"end": 20269,
											"name": "tag",
											"source": 12,
											"value": "204"
										},
										{
											"begin": 20040,
											"end": 20269,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 20229,
											"end": 20235,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 20223,
											"end": 20236,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 20214,
											"end": 20220,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 20210,
											"end": 20212,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 20206,
											"end": 20221,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 20199,
											"end": 20237,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "tag",
											"source": 12,
											"value": "198"
										},
										{
											"begin": 19809,
											"end": 20279,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 19931,
											"end": 19986,
											"name": "AND",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A85BD01"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 19931,
											"end": 19986,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 19931,
											"end": 19986,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 19634,
											"end": 20285,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 19634,
											"end": 20285,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 19634,
											"end": 20285,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 19634,
											"end": 20285,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 19634,
											"end": 20285,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 19634,
											"end": 20285,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 19634,
											"end": 20285,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 447,
											"end": 1143,
											"name": "tag",
											"source": 6,
											"value": "148"
										},
										{
											"begin": 447,
											"end": 1143,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 503,
											"end": 516,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 552,
											"end": 566,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 569,
											"end": 586,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "209"
										},
										{
											"begin": 580,
											"end": 585,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 569,
											"end": 579,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "210"
										},
										{
											"begin": 569,
											"end": 586,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 569,
											"end": 586,
											"name": "tag",
											"source": 6,
											"value": "209"
										},
										{
											"begin": 569,
											"end": 586,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 589,
											"end": 590,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 569,
											"end": 590,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 552,
											"end": 590,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 552,
											"end": 590,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 604,
											"end": 624,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 638,
											"end": 644,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 627,
											"end": 645,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "212"
										},
										{
											"begin": 627,
											"end": 645,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "212"
										},
										{
											"begin": 627,
											"end": 645,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "213"
										},
										{
											"begin": 627,
											"end": 645,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "tag",
											"source": 6,
											"value": "212"
										},
										{
											"begin": 627,
											"end": 645,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 627,
											"end": 645,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 627,
											"end": 645,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 627,
											"end": 645,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 627,
											"end": 645,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 627,
											"end": 645,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "214"
										},
										{
											"begin": 627,
											"end": 645,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 627,
											"end": 645,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "CALLDATACOPY",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 627,
											"end": 645,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 627,
											"end": 645,
											"name": "tag",
											"source": 6,
											"value": "214"
										},
										{
											"begin": 627,
											"end": 645,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 604,
											"end": 645,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 765,
											"end": 793,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 765,
											"end": 793,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 765,
											"end": 793,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 781,
											"end": 783,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 765,
											"end": 793,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 820,
											"end": 1100,
											"name": "tag",
											"source": 6,
											"value": "215"
										},
										{
											"begin": 820,
											"end": 1100,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 851,
											"end": 856,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "181899199A1A9B1B9C1CB0B131B232B3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "81"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 985,
											"end": 987,
											"name": "PUSH",
											"source": 6,
											"value": "A"
										},
										{
											"begin": 974,
											"end": 988,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 974,
											"end": 988,
											"name": "MOD",
											"source": 6
										},
										{
											"begin": 969,
											"end": 999,
											"name": "BYTE",
											"source": 6
										},
										{
											"begin": 851,
											"end": 856,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 956,
											"end": 1000,
											"name": "MSTORE8",
											"source": 6
										},
										{
											"begin": 1044,
											"end": 1046,
											"name": "PUSH",
											"source": 6,
											"value": "A"
										},
										{
											"begin": 1035,
											"end": 1046,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 1035,
											"end": 1046,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 1035,
											"end": 1046,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1064,
											"end": 1085,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 820,
											"end": 1100,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "215"
										},
										{
											"begin": 1064,
											"end": 1085,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1120,
											"end": 1126,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 447,
											"end": 1143,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 447,
											"end": 1143,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 10139,
											"end": 11055,
											"name": "tag",
											"source": 9,
											"value": "210"
										},
										{
											"begin": 10139,
											"end": 11055,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10192,
											"end": 10199,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 10192,
											"end": 10199,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "184F03E93FF9F4DAA797ED6E38ED64BF6A1F01"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10267,
											"end": 10284,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10267,
											"end": 10284,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 10263,
											"end": 10366,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "224"
										},
										{
											"begin": 10263,
											"end": 10366,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "184F03E93FF9F4DAA797ED6E38ED64BF6A1F01"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10304,
											"end": 10321,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10304,
											"end": 10321,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 10304,
											"end": 10321,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10349,
											"end": 10351,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 10339,
											"end": 10351,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10263,
											"end": 10366,
											"name": "tag",
											"source": 9,
											"value": "224"
										},
										{
											"begin": 10263,
											"end": 10366,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10392,
											"end": 10400,
											"name": "PUSH",
											"source": 9,
											"value": "4EE2D6D415B85ACEF8100000000"
										},
										{
											"begin": 10383,
											"end": 10388,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10383,
											"end": 10400,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 10379,
											"end": 10482,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "227"
										},
										{
											"begin": 10379,
											"end": 10482,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 10429,
											"end": 10437,
											"name": "PUSH",
											"source": 9,
											"value": "4EE2D6D415B85ACEF8100000000"
										},
										{
											"begin": 10420,
											"end": 10437,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10420,
											"end": 10437,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 10420,
											"end": 10437,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10465,
											"end": 10467,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 10455,
											"end": 10467,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10379,
											"end": 10482,
											"name": "tag",
											"source": 9,
											"value": "227"
										},
										{
											"begin": 10379,
											"end": 10482,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10508,
											"end": 10516,
											"name": "PUSH",
											"source": 9,
											"value": "2386F26FC10000"
										},
										{
											"begin": 10499,
											"end": 10504,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10499,
											"end": 10516,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 10495,
											"end": 10598,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "230"
										},
										{
											"begin": 10495,
											"end": 10598,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 10545,
											"end": 10553,
											"name": "PUSH",
											"source": 9,
											"value": "2386F26FC10000"
										},
										{
											"begin": 10536,
											"end": 10553,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10536,
											"end": 10553,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 10536,
											"end": 10553,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10581,
											"end": 10583,
											"name": "PUSH",
											"source": 9,
											"value": "10"
										},
										{
											"begin": 10571,
											"end": 10583,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10495,
											"end": 10598,
											"name": "tag",
											"source": 9,
											"value": "230"
										},
										{
											"begin": 10495,
											"end": 10598,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10624,
											"end": 10631,
											"name": "PUSH",
											"source": 9,
											"value": "5F5E100"
										},
										{
											"begin": 10615,
											"end": 10620,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10615,
											"end": 10631,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 10611,
											"end": 10711,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "233"
										},
										{
											"begin": 10611,
											"end": 10711,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 10660,
											"end": 10667,
											"name": "PUSH",
											"source": 9,
											"value": "5F5E100"
										},
										{
											"begin": 10651,
											"end": 10667,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10651,
											"end": 10667,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 10651,
											"end": 10667,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10695,
											"end": 10696,
											"name": "PUSH",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 10685,
											"end": 10696,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10611,
											"end": 10711,
											"name": "tag",
											"source": 9,
											"value": "233"
										},
										{
											"begin": 10611,
											"end": 10711,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10737,
											"end": 10744,
											"name": "PUSH",
											"source": 9,
											"value": "2710"
										},
										{
											"begin": 10728,
											"end": 10733,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10728,
											"end": 10744,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 10724,
											"end": 10824,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "236"
										},
										{
											"begin": 10724,
											"end": 10824,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 10773,
											"end": 10780,
											"name": "PUSH",
											"source": 9,
											"value": "2710"
										},
										{
											"begin": 10764,
											"end": 10780,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10764,
											"end": 10780,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 10764,
											"end": 10780,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10808,
											"end": 10809,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 10798,
											"end": 10809,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10724,
											"end": 10824,
											"name": "tag",
											"source": 9,
											"value": "236"
										},
										{
											"begin": 10724,
											"end": 10824,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10850,
											"end": 10857,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 10841,
											"end": 10846,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10841,
											"end": 10857,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 10837,
											"end": 10937,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "239"
										},
										{
											"begin": 10837,
											"end": 10937,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 10886,
											"end": 10893,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 10877,
											"end": 10893,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10877,
											"end": 10893,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 10877,
											"end": 10893,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10921,
											"end": 10922,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 10911,
											"end": 10922,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10837,
											"end": 10937,
											"name": "tag",
											"source": 9,
											"value": "239"
										},
										{
											"begin": 10837,
											"end": 10937,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10963,
											"end": 10970,
											"name": "PUSH",
											"source": 9,
											"value": "A"
										},
										{
											"begin": 10954,
											"end": 10959,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10954,
											"end": 10970,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 10950,
											"end": 11016,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "83"
										},
										{
											"begin": 10950,
											"end": 11016,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 11000,
											"end": 11001,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 10990,
											"end": 11001,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 11042,
											"end": 11048,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 10139,
											"end": 11055,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10139,
											"end": 11055,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 14,
											"end": 145,
											"name": "tag",
											"source": 14,
											"value": "243"
										},
										{
											"begin": 14,
											"end": 145,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 88,
											"end": 120,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 88,
											"end": 120,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 78,
											"end": 121,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 78,
											"end": 121,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 68,
											"end": 139,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "249"
										},
										{
											"begin": 68,
											"end": 139,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 135,
											"end": 136,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 132,
											"end": 133,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 125,
											"end": 137,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 68,
											"end": 139,
											"name": "tag",
											"source": 14,
											"value": "249"
										},
										{
											"begin": 68,
											"end": 139,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 14,
											"end": 145,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 14,
											"end": 145,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 150,
											"end": 395,
											"name": "tag",
											"source": 14,
											"value": "22"
										},
										{
											"begin": 150,
											"end": 395,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 208,
											"end": 214,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 261,
											"end": 263,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 249,
											"end": 258,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 240,
											"end": 247,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 236,
											"end": 259,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 232,
											"end": 264,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 229,
											"end": 281,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 229,
											"end": 281,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "251"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 277,
											"end": 278,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 274,
											"end": 275,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 267,
											"end": 279,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 229,
											"end": 281,
											"name": "tag",
											"source": 14,
											"value": "251"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 316,
											"end": 325,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 303,
											"end": 326,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 335,
											"end": 365,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "146"
										},
										{
											"begin": 359,
											"end": 364,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 335,
											"end": 365,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "243"
										},
										{
											"begin": 335,
											"end": 365,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 592,
											"end": 842,
											"name": "tag",
											"source": 14,
											"value": "244"
										},
										{
											"begin": 592,
											"end": 842,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 677,
											"end": 678,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 687,
											"end": 800,
											"name": "tag",
											"source": 14,
											"value": "255"
										},
										{
											"begin": 687,
											"end": 800,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 701,
											"end": 707,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 698,
											"end": 699,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 695,
											"end": 708,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 687,
											"end": 800,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 687,
											"end": 800,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "257"
										},
										{
											"begin": 687,
											"end": 800,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 777,
											"end": 788,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 777,
											"end": 788,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 777,
											"end": 788,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 771,
											"end": 789,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 758,
											"end": 769,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 758,
											"end": 769,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 758,
											"end": 769,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 751,
											"end": 790,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 723,
											"end": 725,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 716,
											"end": 726,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 687,
											"end": 800,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "255"
										},
										{
											"begin": 687,
											"end": 800,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 687,
											"end": 800,
											"name": "tag",
											"source": 14,
											"value": "257"
										},
										{
											"begin": 687,
											"end": 800,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 834,
											"end": 835,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 816,
											"end": 832,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 816,
											"end": 832,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 809,
											"end": 836,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 592,
											"end": 842,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 847,
											"end": 1118,
											"name": "tag",
											"source": 14,
											"value": "245"
										},
										{
											"begin": 847,
											"end": 1118,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 889,
											"end": 892,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 927,
											"end": 932,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 921,
											"end": 933,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 954,
											"end": 960,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 949,
											"end": 952,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 942,
											"end": 961,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 970,
											"end": 1046,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "259"
										},
										{
											"begin": 1039,
											"end": 1045,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1032,
											"end": 1036,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1027,
											"end": 1030,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 1023,
											"end": 1037,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1016,
											"end": 1020,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1009,
											"end": 1014,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 1005,
											"end": 1021,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 970,
											"end": 1046,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "244"
										},
										{
											"begin": 970,
											"end": 1046,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 970,
											"end": 1046,
											"name": "tag",
											"source": 14,
											"value": "259"
										},
										{
											"begin": 970,
											"end": 1046,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1100,
											"end": 1102,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 1079,
											"end": 1094,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1075,
											"end": 1104,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1066,
											"end": 1105,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 1066,
											"end": 1105,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1066,
											"end": 1105,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 1066,
											"end": 1105,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1107,
											"end": 1111,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 847,
											"end": 1118,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 847,
											"end": 1118,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 1123,
											"end": 1343,
											"name": "tag",
											"source": 14,
											"value": "29"
										},
										{
											"begin": 1123,
											"end": 1343,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1272,
											"end": 1274,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1261,
											"end": 1270,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1254,
											"end": 1275,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1235,
											"end": 1239,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1292,
											"end": 1337,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "146"
										},
										{
											"begin": 1333,
											"end": 1335,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1322,
											"end": 1331,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 1318,
											"end": 1336,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1310,
											"end": 1316,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 1292,
											"end": 1337,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "245"
										},
										{
											"begin": 1292,
											"end": 1337,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 1348,
											"end": 1528,
											"name": "tag",
											"source": 14,
											"value": "32"
										},
										{
											"begin": 1348,
											"end": 1528,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1407,
											"end": 1413,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1460,
											"end": 1462,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1448,
											"end": 1457,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 1439,
											"end": 1446,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 1435,
											"end": 1458,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 1431,
											"end": 1463,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 1428,
											"end": 1480,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1428,
											"end": 1480,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "263"
										},
										{
											"begin": 1428,
											"end": 1480,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1476,
											"end": 1477,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1473,
											"end": 1474,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1466,
											"end": 1478,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 1428,
											"end": 1480,
											"name": "tag",
											"source": 14,
											"value": "263"
										},
										{
											"begin": 1428,
											"end": 1480,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1499,
											"end": 1522,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 1499,
											"end": 1522,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 1348,
											"end": 1528,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1348,
											"end": 1528,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 1741,
											"end": 1914,
											"name": "tag",
											"source": 14,
											"value": "246"
										},
										{
											"begin": 1741,
											"end": 1914,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1809,
											"end": 1829,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1809,
											"end": 1829,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1858,
											"end": 1889,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1858,
											"end": 1889,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1848,
											"end": 1890,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1848,
											"end": 1890,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 1838,
											"end": 1908,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "266"
										},
										{
											"begin": 1838,
											"end": 1908,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1904,
											"end": 1905,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1901,
											"end": 1902,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1894,
											"end": 1906,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 1838,
											"end": 1908,
											"name": "tag",
											"source": 14,
											"value": "266"
										},
										{
											"begin": 1838,
											"end": 1908,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1741,
											"end": 1914,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 1741,
											"end": 1914,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1741,
											"end": 1914,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1741,
											"end": 1914,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 1919,
											"end": 2173,
											"name": "tag",
											"source": 14,
											"value": "38"
										},
										{
											"begin": 1919,
											"end": 2173,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1987,
											"end": 1993,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1995,
											"end": 2001,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 2048,
											"end": 2050,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 2036,
											"end": 2045,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 2027,
											"end": 2034,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 2023,
											"end": 2046,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 2019,
											"end": 2051,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 2016,
											"end": 2068,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 2016,
											"end": 2068,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "268"
										},
										{
											"begin": 2016,
											"end": 2068,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 2064,
											"end": 2065,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2061,
											"end": 2062,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 2054,
											"end": 2066,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 2016,
											"end": 2068,
											"name": "tag",
											"source": 14,
											"value": "268"
										},
										{
											"begin": 2016,
											"end": 2068,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2087,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "269"
										},
										{
											"begin": 2106,
											"end": 2115,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 2087,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "246"
										},
										{
											"begin": 2087,
											"end": 2116,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 2087,
											"end": 2116,
											"name": "tag",
											"source": 14,
											"value": "269"
										},
										{
											"begin": 2087,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2077,
											"end": 2116,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 2163,
											"end": 2165,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 2148,
											"end": 2166,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 2148,
											"end": 2166,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 2148,
											"end": 2166,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 2148,
											"end": 2166,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2135,
											"end": 2167,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 2135,
											"end": 2167,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1919,
											"end": 2173,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 2360,
											"end": 2688,
											"name": "tag",
											"source": 14,
											"value": "46"
										},
										{
											"begin": 2360,
											"end": 2688,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2437,
											"end": 2443,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2445,
											"end": 2451,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 2453,
											"end": 2459,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2506,
											"end": 2508,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 2494,
											"end": 2503,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 2485,
											"end": 2492,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 2481,
											"end": 2504,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 2477,
											"end": 2509,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 2474,
											"end": 2526,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 2474,
											"end": 2526,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "272"
										},
										{
											"begin": 2474,
											"end": 2526,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 2522,
											"end": 2523,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2519,
											"end": 2520,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 2512,
											"end": 2524,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 2474,
											"end": 2526,
											"name": "tag",
											"source": 14,
											"value": "272"
										},
										{
											"begin": 2474,
											"end": 2526,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2545,
											"end": 2574,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "273"
										},
										{
											"begin": 2564,
											"end": 2573,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 2545,
											"end": 2574,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "246"
										},
										{
											"begin": 2545,
											"end": 2574,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 2545,
											"end": 2574,
											"name": "tag",
											"source": 14,
											"value": "273"
										},
										{
											"begin": 2545,
											"end": 2574,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2535,
											"end": 2574,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 2535,
											"end": 2574,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2593,
											"end": 2631,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "274"
										},
										{
											"begin": 2627,
											"end": 2629,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 2616,
											"end": 2625,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 2612,
											"end": 2630,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2593,
											"end": 2631,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "246"
										},
										{
											"begin": 2593,
											"end": 2631,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 2593,
											"end": 2631,
											"name": "tag",
											"source": 14,
											"value": "274"
										},
										{
											"begin": 2593,
											"end": 2631,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2583,
											"end": 2631,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 2583,
											"end": 2631,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2678,
											"end": 2680,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 2667,
											"end": 2676,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 2663,
											"end": 2681,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2650,
											"end": 2682,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 2640,
											"end": 2682,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 2640,
											"end": 2682,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2360,
											"end": 2688,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 2360,
											"end": 2688,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2360,
											"end": 2688,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 2360,
											"end": 2688,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2360,
											"end": 2688,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 2360,
											"end": 2688,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 2693,
											"end": 2879,
											"name": "tag",
											"source": 14,
											"value": "57"
										},
										{
											"begin": 2693,
											"end": 2879,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2752,
											"end": 2758,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2805,
											"end": 2807,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 2793,
											"end": 2802,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2784,
											"end": 2791,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 2780,
											"end": 2803,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 2776,
											"end": 2808,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 2773,
											"end": 2825,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 2773,
											"end": 2825,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "276"
										},
										{
											"begin": 2773,
											"end": 2825,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 2821,
											"end": 2822,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2818,
											"end": 2819,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 2811,
											"end": 2823,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 2773,
											"end": 2825,
											"name": "tag",
											"source": 14,
											"value": "276"
										},
										{
											"begin": 2773,
											"end": 2825,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2844,
											"end": 2873,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "146"
										},
										{
											"begin": 2863,
											"end": 2872,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2844,
											"end": 2873,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "246"
										},
										{
											"begin": 2844,
											"end": 2873,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 2884,
											"end": 3231,
											"name": "tag",
											"source": 14,
											"value": "65"
										},
										{
											"begin": 2884,
											"end": 3231,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2949,
											"end": 2955,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2957,
											"end": 2963,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3010,
											"end": 3012,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 2998,
											"end": 3007,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 2989,
											"end": 2996,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 2985,
											"end": 3008,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 2981,
											"end": 3013,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 2978,
											"end": 3030,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 2978,
											"end": 3030,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "279"
										},
										{
											"begin": 2978,
											"end": 3030,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 3026,
											"end": 3027,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3023,
											"end": 3024,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3016,
											"end": 3028,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 2978,
											"end": 3030,
											"name": "tag",
											"source": 14,
											"value": "279"
										},
										{
											"begin": 2978,
											"end": 3030,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3049,
											"end": 3078,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "280"
										},
										{
											"begin": 3068,
											"end": 3077,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 3049,
											"end": 3078,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "246"
										},
										{
											"begin": 3049,
											"end": 3078,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 3049,
											"end": 3078,
											"name": "tag",
											"source": 14,
											"value": "280"
										},
										{
											"begin": 3049,
											"end": 3078,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3039,
											"end": 3078,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 3039,
											"end": 3078,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3128,
											"end": 3130,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 3117,
											"end": 3126,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 3113,
											"end": 3131,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3100,
											"end": 3132,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 3175,
											"end": 3180,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3168,
											"end": 3181,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 3161,
											"end": 3182,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 3154,
											"end": 3159,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3151,
											"end": 3183,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 3141,
											"end": 3201,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "281"
										},
										{
											"begin": 3141,
											"end": 3201,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 3197,
											"end": 3198,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3194,
											"end": 3195,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3187,
											"end": 3199,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 3141,
											"end": 3201,
											"name": "tag",
											"source": 14,
											"value": "281"
										},
										{
											"begin": 3141,
											"end": 3201,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3220,
											"end": 3225,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3210,
											"end": 3225,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 3210,
											"end": 3225,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3210,
											"end": 3225,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2884,
											"end": 3231,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 2884,
											"end": 3231,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2884,
											"end": 3231,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 2884,
											"end": 3231,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 2884,
											"end": 3231,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2884,
											"end": 3231,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 3236,
											"end": 3363,
											"name": "tag",
											"source": 14,
											"value": "213"
										},
										{
											"begin": 3236,
											"end": 3363,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3297,
											"end": 3307,
											"name": "PUSH",
											"source": 14,
											"value": "4E487B71"
										},
										{
											"begin": 3292,
											"end": 3295,
											"name": "PUSH",
											"source": 14,
											"value": "E0"
										},
										{
											"begin": 3288,
											"end": 3308,
											"name": "SHL",
											"source": 14
										},
										{
											"begin": 3285,
											"end": 3286,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3278,
											"end": 3309,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3328,
											"end": 3332,
											"name": "PUSH",
											"source": 14,
											"value": "41"
										},
										{
											"begin": 3325,
											"end": 3326,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 3318,
											"end": 3333,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3352,
											"end": 3356,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 3349,
											"end": 3350,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3342,
											"end": 3357,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 3368,
											"end": 4506,
											"name": "tag",
											"source": 14,
											"value": "69"
										},
										{
											"begin": 3368,
											"end": 4506,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3463,
											"end": 3469,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3471,
											"end": 3477,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3479,
											"end": 3485,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3487,
											"end": 3493,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3540,
											"end": 3543,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 3528,
											"end": 3537,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 3519,
											"end": 3526,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 3515,
											"end": 3538,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 3511,
											"end": 3544,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 3508,
											"end": 3561,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 3508,
											"end": 3561,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "284"
										},
										{
											"begin": 3508,
											"end": 3561,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 3557,
											"end": 3558,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3554,
											"end": 3555,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3547,
											"end": 3559,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 3508,
											"end": 3561,
											"name": "tag",
											"source": 14,
											"value": "284"
										},
										{
											"begin": 3508,
											"end": 3561,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3580,
											"end": 3609,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "285"
										},
										{
											"begin": 3599,
											"end": 3608,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 3580,
											"end": 3609,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "246"
										},
										{
											"begin": 3580,
											"end": 3609,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 3580,
											"end": 3609,
											"name": "tag",
											"source": 14,
											"value": "285"
										},
										{
											"begin": 3580,
											"end": 3609,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3570,
											"end": 3609,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 3570,
											"end": 3609,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3628,
											"end": 3666,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "286"
										},
										{
											"begin": 3662,
											"end": 3664,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 3651,
											"end": 3660,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 3647,
											"end": 3665,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3628,
											"end": 3666,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "246"
										},
										{
											"begin": 3628,
											"end": 3666,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 3628,
											"end": 3666,
											"name": "tag",
											"source": 14,
											"value": "286"
										},
										{
											"begin": 3628,
											"end": 3666,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3618,
											"end": 3666,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 3618,
											"end": 3666,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3713,
											"end": 3715,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 3702,
											"end": 3711,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 3698,
											"end": 3716,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3685,
											"end": 3717,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 3675,
											"end": 3717,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 3675,
											"end": 3717,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3768,
											"end": 3770,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 3757,
											"end": 3766,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 3753,
											"end": 3771,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3740,
											"end": 3772,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 3791,
											"end": 3809,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3832,
											"end": 3834,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3824,
											"end": 3830,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3821,
											"end": 3835,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 3818,
											"end": 3852,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 3818,
											"end": 3852,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "287"
										},
										{
											"begin": 3818,
											"end": 3852,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 3848,
											"end": 3849,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3845,
											"end": 3846,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3838,
											"end": 3850,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 3818,
											"end": 3852,
											"name": "tag",
											"source": 14,
											"value": "287"
										},
										{
											"begin": 3818,
											"end": 3852,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3886,
											"end": 3892,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3875,
											"end": 3884,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 3871,
											"end": 3893,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3861,
											"end": 3893,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 3861,
											"end": 3893,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3931,
											"end": 3938,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 3924,
											"end": 3928,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 3920,
											"end": 3922,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 3916,
											"end": 3929,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3912,
											"end": 3939,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 3902,
											"end": 3957,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "288"
										},
										{
											"begin": 3902,
											"end": 3957,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 3953,
											"end": 3954,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3950,
											"end": 3951,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3943,
											"end": 3955,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 3902,
											"end": 3957,
											"name": "tag",
											"source": 14,
											"value": "288"
										},
										{
											"begin": 3902,
											"end": 3957,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3989,
											"end": 3991,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3976,
											"end": 3992,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 4011,
											"end": 4013,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4007,
											"end": 4009,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4004,
											"end": 4014,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 4001,
											"end": 4037,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 4001,
											"end": 4037,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "290"
										},
										{
											"begin": 4001,
											"end": 4037,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 4017,
											"end": 4035,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "290"
										},
										{
											"begin": 4017,
											"end": 4035,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "213"
										},
										{
											"begin": 4017,
											"end": 4035,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 4017,
											"end": 4035,
											"name": "tag",
											"source": 14,
											"value": "290"
										},
										{
											"begin": 4017,
											"end": 4035,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4092,
											"end": 4094,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 4086,
											"end": 4095,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 4060,
											"end": 4062,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 4146,
											"end": 4159,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4146,
											"end": 4159,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4142,
											"end": 4164,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4142,
											"end": 4164,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4142,
											"end": 4164,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 4166,
											"end": 4168,
											"name": "PUSH",
											"source": 14,
											"value": "3F"
										},
										{
											"begin": 4138,
											"end": 4169,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4134,
											"end": 4174,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 4122,
											"end": 4175,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4122,
											"end": 4175,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4122,
											"end": 4175,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4190,
											"end": 4208,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 4190,
											"end": 4208,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4190,
											"end": 4208,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 4210,
											"end": 4232,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4210,
											"end": 4232,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 4210,
											"end": 4232,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 4187,
											"end": 4233,
											"name": "OR",
											"source": 14
										},
										{
											"begin": 4184,
											"end": 4256,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 4184,
											"end": 4256,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "292"
										},
										{
											"begin": 4184,
											"end": 4256,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 4236,
											"end": 4254,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "292"
										},
										{
											"begin": 4236,
											"end": 4254,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "213"
										},
										{
											"begin": 4236,
											"end": 4254,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 4236,
											"end": 4254,
											"name": "tag",
											"source": 14,
											"value": "292"
										},
										{
											"begin": 4236,
											"end": 4254,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4276,
											"end": 4286,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4272,
											"end": 4274,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 4265,
											"end": 4287,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4311,
											"end": 4313,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4303,
											"end": 4309,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4296,
											"end": 4314,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4351,
											"end": 4358,
											"name": "DUP11",
											"source": 14
										},
										{
											"begin": 4346,
											"end": 4348,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4341,
											"end": 4343,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 4337,
											"end": 4339,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 4333,
											"end": 4344,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4329,
											"end": 4349,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4326,
											"end": 4359,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 4323,
											"end": 4376,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 4323,
											"end": 4376,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "293"
										},
										{
											"begin": 4323,
											"end": 4376,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 4372,
											"end": 4373,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 4369,
											"end": 4370,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 4362,
											"end": 4374,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 4323,
											"end": 4376,
											"name": "tag",
											"source": 14,
											"value": "293"
										},
										{
											"begin": 4323,
											"end": 4376,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4428,
											"end": 4430,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4423,
											"end": 4425,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4419,
											"end": 4421,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 4415,
											"end": 4426,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4410,
											"end": 4412,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4402,
											"end": 4408,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 4398,
											"end": 4413,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4385,
											"end": 4431,
											"name": "CALLDATACOPY",
											"source": 14
										},
										{
											"begin": 4473,
											"end": 4474,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 4468,
											"end": 4470,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4463,
											"end": 4465,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 4455,
											"end": 4461,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 4451,
											"end": 4466,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4447,
											"end": 4471,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4440,
											"end": 4475,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4494,
											"end": 4500,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 4484,
											"end": 4500,
											"name": "SWAP6",
											"source": 14
										},
										{
											"begin": 4484,
											"end": 4500,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4484,
											"end": 4500,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4484,
											"end": 4500,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4484,
											"end": 4500,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4484,
											"end": 4500,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4484,
											"end": 4500,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3368,
											"end": 4506,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 3368,
											"end": 4506,
											"name": "SWAP6",
											"source": 14
										},
										{
											"begin": 3368,
											"end": 4506,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 3368,
											"end": 4506,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 3368,
											"end": 4506,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3368,
											"end": 4506,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 3368,
											"end": 4506,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3368,
											"end": 4506,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 4511,
											"end": 4771,
											"name": "tag",
											"source": 14,
											"value": "77"
										},
										{
											"begin": 4511,
											"end": 4771,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4579,
											"end": 4585,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 4587,
											"end": 4593,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 4640,
											"end": 4642,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 4628,
											"end": 4637,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 4619,
											"end": 4626,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 4615,
											"end": 4638,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 4611,
											"end": 4643,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 4608,
											"end": 4660,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 4608,
											"end": 4660,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "295"
										},
										{
											"begin": 4608,
											"end": 4660,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 4656,
											"end": 4657,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 4653,
											"end": 4654,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 4646,
											"end": 4658,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 4608,
											"end": 4660,
											"name": "tag",
											"source": 14,
											"value": "295"
										},
										{
											"begin": 4608,
											"end": 4660,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4679,
											"end": 4708,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "296"
										},
										{
											"begin": 4698,
											"end": 4707,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 4679,
											"end": 4708,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "246"
										},
										{
											"begin": 4679,
											"end": 4708,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 4679,
											"end": 4708,
											"name": "tag",
											"source": 14,
											"value": "296"
										},
										{
											"begin": 4679,
											"end": 4708,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4669,
											"end": 4708,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 4669,
											"end": 4708,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4727,
											"end": 4765,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "297"
										},
										{
											"begin": 4761,
											"end": 4763,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4750,
											"end": 4759,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 4746,
											"end": 4764,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4727,
											"end": 4765,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "246"
										},
										{
											"begin": 4727,
											"end": 4765,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 4727,
											"end": 4765,
											"name": "tag",
											"source": 14,
											"value": "297"
										},
										{
											"begin": 4727,
											"end": 4765,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4717,
											"end": 4765,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4717,
											"end": 4765,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4511,
											"end": 4771,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 4511,
											"end": 4771,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4511,
											"end": 4771,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 4511,
											"end": 4771,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4511,
											"end": 4771,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4511,
											"end": 4771,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 4776,
											"end": 5156,
											"name": "tag",
											"source": 14,
											"value": "87"
										},
										{
											"begin": 4776,
											"end": 5156,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4855,
											"end": 4856,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 4851,
											"end": 4863,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4851,
											"end": 4863,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4851,
											"end": 4863,
											"name": "SHR",
											"source": 14
										},
										{
											"begin": 4851,
											"end": 4863,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4898,
											"end": 4910,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4898,
											"end": 4910,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 4898,
											"end": 4910,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 4919,
											"end": 4980,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "299"
										},
										{
											"begin": 4919,
											"end": 4980,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 4973,
											"end": 4977,
											"name": "PUSH",
											"source": 14,
											"value": "7F"
										},
										{
											"begin": 4965,
											"end": 4971,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4961,
											"end": 4978,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 4951,
											"end": 4978,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 4951,
											"end": 4978,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4919,
											"end": 4980,
											"name": "tag",
											"source": 14,
											"value": "299"
										},
										{
											"begin": 4919,
											"end": 4980,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5026,
											"end": 5028,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 5018,
											"end": 5024,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5015,
											"end": 5029,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 4995,
											"end": 5013,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4992,
											"end": 5030,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 4989,
											"end": 5150,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "300"
										},
										{
											"begin": 4989,
											"end": 5150,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 5072,
											"end": 5082,
											"name": "PUSH",
											"source": 14,
											"value": "4E487B71"
										},
										{
											"begin": 5067,
											"end": 5070,
											"name": "PUSH",
											"source": 14,
											"value": "E0"
										},
										{
											"begin": 5063,
											"end": 5083,
											"name": "SHL",
											"source": 14
										},
										{
											"begin": 5060,
											"end": 5061,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5053,
											"end": 5084,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5107,
											"end": 5111,
											"name": "PUSH",
											"source": 14,
											"value": "22"
										},
										{
											"begin": 5104,
											"end": 5105,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 5097,
											"end": 5112,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5135,
											"end": 5139,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 5132,
											"end": 5133,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5125,
											"end": 5140,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 4989,
											"end": 5150,
											"name": "tag",
											"source": 14,
											"value": "300"
										},
										{
											"begin": 4989,
											"end": 5150,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4989,
											"end": 5150,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4776,
											"end": 5156,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 4776,
											"end": 5156,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4776,
											"end": 5156,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4776,
											"end": 5156,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 5161,
											"end": 5657,
											"name": "tag",
											"source": 14,
											"value": "150"
										},
										{
											"begin": 5161,
											"end": 5657,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5340,
											"end": 5343,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5378,
											"end": 5384,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 5372,
											"end": 5385,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 5394,
											"end": 5460,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "302"
										},
										{
											"begin": 5453,
											"end": 5459,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5448,
											"end": 5451,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 5441,
											"end": 5445,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 5433,
											"end": 5439,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 5429,
											"end": 5446,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5394,
											"end": 5460,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "244"
										},
										{
											"begin": 5394,
											"end": 5460,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 5394,
											"end": 5460,
											"name": "tag",
											"source": 14,
											"value": "302"
										},
										{
											"begin": 5394,
											"end": 5460,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5523,
											"end": 5536,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 5523,
											"end": 5536,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 5482,
											"end": 5498,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5482,
											"end": 5498,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 5482,
											"end": 5498,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5482,
											"end": 5498,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5545,
											"end": 5615,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "303"
										},
										{
											"begin": 5523,
											"end": 5536,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5482,
											"end": 5498,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 5592,
											"end": 5596,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 5580,
											"end": 5597,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 5580,
											"end": 5597,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5545,
											"end": 5615,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "244"
										},
										{
											"begin": 5545,
											"end": 5615,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 5545,
											"end": 5615,
											"name": "tag",
											"source": 14,
											"value": "303"
										},
										{
											"begin": 5545,
											"end": 5615,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5631,
											"end": 5651,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5631,
											"end": 5651,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 5161,
											"end": 5657,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5161,
											"end": 5657,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 5662,
											"end": 6151,
											"name": "tag",
											"source": 14,
											"value": "194"
										},
										{
											"begin": 5662,
											"end": 6151,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5931,
											"end": 5946,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 5931,
											"end": 5946,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5931,
											"end": 5946,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 5913,
											"end": 5947,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5913,
											"end": 5947,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5983,
											"end": 5998,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 5983,
											"end": 5998,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 5978,
											"end": 5980,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 5963,
											"end": 5981,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5963,
											"end": 5981,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5956,
											"end": 5999,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6030,
											"end": 6032,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 6015,
											"end": 6033,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6015,
											"end": 6033,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6008,
											"end": 6042,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 6008,
											"end": 6042,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6008,
											"end": 6042,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6078,
											"end": 6081,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 6073,
											"end": 6075,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 6058,
											"end": 6076,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6058,
											"end": 6076,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6051,
											"end": 6082,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6051,
											"end": 6082,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6051,
											"end": 6082,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5856,
											"end": 5860,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5856,
											"end": 5860,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6099,
											"end": 6145,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "305"
										},
										{
											"begin": 6099,
											"end": 6145,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6125,
											"end": 6144,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 6125,
											"end": 6144,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6117,
											"end": 6123,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 6099,
											"end": 6145,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "245"
										},
										{
											"begin": 6099,
											"end": 6145,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 6099,
											"end": 6145,
											"name": "tag",
											"source": 14,
											"value": "305"
										},
										{
											"begin": 6099,
											"end": 6145,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6091,
											"end": 6145,
											"name": "SWAP7",
											"source": 14
										},
										{
											"begin": 5662,
											"end": 6151,
											"name": "SWAP6",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5662,
											"end": 6151,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 6156,
											"end": 6405,
											"name": "tag",
											"source": 14,
											"value": "197"
										},
										{
											"begin": 6156,
											"end": 6405,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6225,
											"end": 6231,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 6278,
											"end": 6280,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 6266,
											"end": 6275,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6257,
											"end": 6264,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 6253,
											"end": 6276,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 6249,
											"end": 6281,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 6246,
											"end": 6298,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 6246,
											"end": 6298,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "307"
										},
										{
											"begin": 6246,
											"end": 6298,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 6294,
											"end": 6295,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 6291,
											"end": 6292,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 6284,
											"end": 6296,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 6246,
											"end": 6298,
											"name": "tag",
											"source": 14,
											"value": "307"
										},
										{
											"begin": 6246,
											"end": 6298,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6326,
											"end": 6335,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6320,
											"end": 6336,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 6345,
											"end": 6375,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "146"
										},
										{
											"begin": 6369,
											"end": 6374,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6345,
											"end": 6375,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "243"
										},
										{
											"begin": 6345,
											"end": 6375,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
								"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/introspection/ERC165.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/ERC-721AWRefund.sol",
								"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol",
								"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/IERC721R.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"totalSupply()": "18160ddd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension. Built to optimize for lower gas during batch mints. Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..). Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply. Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":\"ERC721A\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708\",\"dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931\",\"dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b81d9ff6559ea5c47fc573e17ece6d9ba5d6839e213e6ebc3b4c5c8fe4199d7f\",\"dweb:/ipfs/QmPCW1bFisUzJkyjroY3yipwfism9RRCigCcK1hbXtVM8n\"]},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c\",\"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7\",\"dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6\"]},\"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol\":{\"keccak256\":\"0x738d86ea38f9edfe777a7334e1d51901d7664cbc55d3c1024301004861198340\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0391831504205678c81d091d9ae1dcf159be092de1cbc3364f85ff3d0f766bb\",\"dweb:/ipfs/QmXupsaarsrtF63dBRi9cFrSGxnwK4HdCFp4F72QtwsPzq\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 2188,
								"contract": "https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol:ERC721A",
								"label": "_currentIndex",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							},
							{
								"astId": 2190,
								"contract": "https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol:ERC721A",
								"label": "_burnCounter",
								"offset": 0,
								"slot": "1",
								"type": "t_uint256"
							},
							{
								"astId": 2192,
								"contract": "https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol:ERC721A",
								"label": "_name",
								"offset": 0,
								"slot": "2",
								"type": "t_string_storage"
							},
							{
								"astId": 2194,
								"contract": "https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol:ERC721A",
								"label": "_symbol",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 2199,
								"contract": "https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol:ERC721A",
								"label": "_ownerships",
								"offset": 0,
								"slot": "4",
								"type": "t_mapping(t_uint256,t_struct(TokenOwnership)2177_storage)"
							},
							{
								"astId": 2204,
								"contract": "https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol:ERC721A",
								"label": "_addressData",
								"offset": 0,
								"slot": "5",
								"type": "t_mapping(t_address,t_struct(AddressData)2186_storage)"
							},
							{
								"astId": 2208,
								"contract": "https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol:ERC721A",
								"label": "_tokenApprovals",
								"offset": 0,
								"slot": "6",
								"type": "t_mapping(t_uint256,t_address)"
							},
							{
								"astId": 2214,
								"contract": "https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol:ERC721A",
								"label": "_operatorApprovals",
								"offset": 0,
								"slot": "7",
								"type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_address,t_mapping(t_address,t_bool))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => bool))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_bool)"
							},
							"t_mapping(t_address,t_struct(AddressData)2186_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct ERC721A.AddressData)",
								"numberOfBytes": "32",
								"value": "t_struct(AddressData)2186_storage"
							},
							"t_mapping(t_uint256,t_address)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => address)",
								"numberOfBytes": "32",
								"value": "t_address"
							},
							"t_mapping(t_uint256,t_struct(TokenOwnership)2177_storage)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => struct ERC721A.TokenOwnership)",
								"numberOfBytes": "32",
								"value": "t_struct(TokenOwnership)2177_storage"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_struct(AddressData)2186_storage": {
								"encoding": "inplace",
								"label": "struct ERC721A.AddressData",
								"members": [
									{
										"astId": 2179,
										"contract": "https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol:ERC721A",
										"label": "balance",
										"offset": 0,
										"slot": "0",
										"type": "t_uint64"
									},
									{
										"astId": 2181,
										"contract": "https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol:ERC721A",
										"label": "numberMinted",
										"offset": 8,
										"slot": "0",
										"type": "t_uint64"
									},
									{
										"astId": 2183,
										"contract": "https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol:ERC721A",
										"label": "numberBurned",
										"offset": 16,
										"slot": "0",
										"type": "t_uint64"
									},
									{
										"astId": 2185,
										"contract": "https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol:ERC721A",
										"label": "aux",
										"offset": 24,
										"slot": "0",
										"type": "t_uint64"
									}
								],
								"numberOfBytes": "32"
							},
							"t_struct(TokenOwnership)2177_storage": {
								"encoding": "inplace",
								"label": "struct ERC721A.TokenOwnership",
								"members": [
									{
										"astId": 2172,
										"contract": "https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol:ERC721A",
										"label": "addr",
										"offset": 0,
										"slot": "0",
										"type": "t_address"
									},
									{
										"astId": 2174,
										"contract": "https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol:ERC721A",
										"label": "startTimestamp",
										"offset": 20,
										"slot": "0",
										"type": "t_uint64"
									},
									{
										"astId": 2176,
										"contract": "https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol:ERC721A",
										"label": "burned",
										"offset": 28,
										"slot": "0",
										"type": "t_bool"
									}
								],
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint64": {
								"encoding": "inplace",
								"label": "uint64",
								"numberOfBytes": "8"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/IERC721R.sol": {
				"IERC721R": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "_tokenId",
									"type": "uint256"
								}
							],
							"name": "Refund",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "refund",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "refundDeadlineOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "_block",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "refundOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "_wei",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Refund(address,uint256)": {
								"details": "Emitted by `refund`",
								"params": {
									"_sender": "The person that requested a refund",
									"_tokenId": "The `tokenId` that was refunded"
								}
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"refund(uint256)": {
								"details": "Make sure to check that the user has the token, and be aware of potential re-entrancy vectors",
								"params": {
									"tokenId": "The `tokenId` to refund"
								}
							},
							"refundDeadlineOf(uint256)": {
								"params": {
									"tokenId": "The `tokenId` to query"
								},
								"returns": {
									"_block": "  The block beyond which the token cannot be refunded"
								}
							},
							"refundOf(uint256)": {
								"params": {
									"tokenId": "The `tokenId` to query"
								},
								"returns": {
									"_wei": "   The amount of ether (in wei) that would be refunded"
								}
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"refund(uint256)": "278ecde1",
							"refundDeadlineOf(uint256)": "4f556016",
							"refundOf(uint256)": "81a49174",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"refundDeadlineOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"refundOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_wei\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Refund(address,uint256)\":{\"details\":\"Emitted by `refund`\",\"params\":{\"_sender\":\"The person that requested a refund\",\"_tokenId\":\"The `tokenId` that was refunded\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"refund(uint256)\":{\"details\":\"Make sure to check that the user has the token, and be aware of potential re-entrancy vectors\",\"params\":{\"tokenId\":\"The `tokenId` to refund\"}},\"refundDeadlineOf(uint256)\":{\"params\":{\"tokenId\":\"The `tokenId` to query\"},\"returns\":{\"_block\":\"  The block beyond which the token cannot be refunded\"}},\"refundOf(uint256)\":{\"params\":{\"tokenId\":\"The `tokenId` to query\"},\"returns\":{\"_wei\":\"   The amount of ether (in wei) that would be refunded\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"events\":{\"Refund(address,uint256)\":{\"notice\":\"Emitted when a token is refunded\"}},\"kind\":\"user\",\"methods\":{\"refund(uint256)\":{\"notice\":\"As long as the refund is active for the given `tokenId`, refunds the user\"},\"refundDeadlineOf(uint256)\":{\"notice\":\"Gets the first block for which the refund is not active for a given `tokenId`\"},\"refundOf(uint256)\":{\"notice\":\"Gets the refund price of the specific `tokenId`\"}},\"notice\":\"Refundable EIP-721 tokens\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/IERC721R.sol\":\"IERC721R\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/IERC721R.sol\":{\"keccak256\":\"0x199b2202de80f5383c594362d9df792caeae9f73ff002b2be586f6bb23beedac\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2daf9185bcd500f31c0f717efb94b6fe37a0b4539394859329e23dcf7460591d\",\"dweb:/ipfs/QmfHAzNroMo2kFD1293VnhPXuQCxMX1UHiWWyc4REAe32s\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Refund(address,uint256)": {
								"notice": "Emitted when a token is refunded"
							}
						},
						"kind": "user",
						"methods": {
							"refund(uint256)": {
								"notice": "As long as the refund is active for the given `tokenId`, refunds the user"
							},
							"refundDeadlineOf(uint256)": {
								"notice": "Gets the first block for which the refund is not active for a given `tokenId`"
							},
							"refundOf(uint256)": {
								"notice": "Gets the refund price of the specific `tokenId`"
							}
						},
						"notice": "Refundable EIP-721 tokens",
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							625
						],
						"Ownable": [
							112
						]
					},
					"id": 113,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "102:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 113,
							"sourceUnit": 626,
							"src": "127:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "Context",
										"nameLocations": [
											"683:7:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 625,
										"src": "683:7:0"
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "683:7:0"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "159:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 112,
							"linearizedBaseContracts": [
								112,
								625
							],
							"name": "Ownable",
							"nameLocation": "672:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 7,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "713:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 112,
									"src": "697:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 6,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "697:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 13,
									"name": "OwnershipTransferred",
									"nameLocation": "732:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "769:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "753:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "753:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "800:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "784:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "784:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "752:57:0"
									},
									"src": "726:84:0"
								},
								{
									"body": {
										"id": 22,
										"nodeType": "Block",
										"src": "926:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 18,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 615,
																"src": "955:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "955:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 17,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "936:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "936:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 21,
												"nodeType": "ExpressionStatement",
												"src": "936:32:0"
											}
										]
									},
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "816:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 23,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "923:2:0"
									},
									"returnParameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "926:0:0"
									},
									"scope": 112,
									"src": "912:63:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 30,
										"nodeType": "Block",
										"src": "1084:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 26,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 54,
														"src": "1094:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 27,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1094:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 28,
												"nodeType": "ExpressionStatement",
												"src": "1094:13:0"
											},
											{
												"id": 29,
												"nodeType": "PlaceholderStatement",
												"src": "1117:1:0"
											}
										]
									},
									"documentation": {
										"id": 24,
										"nodeType": "StructuredDocumentation",
										"src": "981:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 31,
									"name": "onlyOwner",
									"nameLocation": "1072:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1081:2:0"
									},
									"src": "1063:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 39,
										"nodeType": "Block",
										"src": "1256:30:0",
										"statements": [
											{
												"expression": {
													"id": 37,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "1273:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 36,
												"id": 38,
												"nodeType": "Return",
												"src": "1266:13:0"
											}
										]
									},
									"documentation": {
										"id": 32,
										"nodeType": "StructuredDocumentation",
										"src": "1131:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 40,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1210:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1215:2:0"
									},
									"returnParameters": {
										"id": 36,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 35,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "1247:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 34,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1247:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1246:9:0"
									},
									"scope": 112,
									"src": "1201:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 53,
										"nodeType": "Block",
										"src": "1404:85:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 49,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 45,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 40,
																	"src": "1422:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 46,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1422:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 47,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 615,
																	"src": "1433:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 48,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1433:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1422:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 50,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1447:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 44,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1414:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 51,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1414:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 52,
												"nodeType": "ExpressionStatement",
												"src": "1414:68:0"
											}
										]
									},
									"documentation": {
										"id": 41,
										"nodeType": "StructuredDocumentation",
										"src": "1292:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 54,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1368:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1379:2:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1404:0:0"
									},
									"scope": 112,
									"src": "1359:130:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 67,
										"nodeType": "Block",
										"src": "1878:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 63,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1915:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 62,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1907:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 61,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1907:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 64,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1907:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 60,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "1888:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 65,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1888:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 66,
												"nodeType": "ExpressionStatement",
												"src": "1888:30:0"
											}
										]
									},
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "1495:324:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 68,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 58,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 57,
												"name": "onlyOwner",
												"nameLocations": [
													"1868:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "1868:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1868:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "1833:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1850:2:0"
									},
									"returnParameters": {
										"id": 59,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1878:0:0"
									},
									"scope": 112,
									"src": "1824:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 90,
										"nodeType": "Block",
										"src": "2144:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 82,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 77,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 71,
																"src": "2162:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 80,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2182:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 79,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2174:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 78,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2174:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 81,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2174:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2162:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 83,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2186:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 76,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2154:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 84,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2154:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 85,
												"nodeType": "ExpressionStatement",
												"src": "2154:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 87,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 71,
															"src": "2256:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 86,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "2237:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 88,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2237:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 89,
												"nodeType": "ExpressionStatement",
												"src": "2237:28:0"
											}
										]
									},
									"documentation": {
										"id": 69,
										"nodeType": "StructuredDocumentation",
										"src": "1931:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 91,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 74,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 73,
												"name": "onlyOwner",
												"nameLocations": [
													"2134:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "2134:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2134:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2083:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2109:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 91,
												"src": "2101:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 70,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2101:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2100:18:0"
									},
									"returnParameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2144:0:0"
									},
									"scope": 112,
									"src": "2074:198:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 110,
										"nodeType": "Block",
										"src": "2489:124:0",
										"statements": [
											{
												"assignments": [
													98
												],
												"declarations": [
													{
														"constant": false,
														"id": 98,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2507:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 110,
														"src": "2499:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 97,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2499:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 100,
												"initialValue": {
													"id": 99,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "2518:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2499:25:0"
											},
											{
												"expression": {
													"id": 103,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 101,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "2534:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 102,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 94,
														"src": "2543:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2534:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 104,
												"nodeType": "ExpressionStatement",
												"src": "2534:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 106,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 98,
															"src": "2587:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 107,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 94,
															"src": "2597:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 105,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "2566:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 108,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2566:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 109,
												"nodeType": "EmitStatement",
												"src": "2561:45:0"
											}
										]
									},
									"documentation": {
										"id": 92,
										"nodeType": "StructuredDocumentation",
										"src": "2278:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 111,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2435:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 95,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 94,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2462:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "2454:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 93,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2454:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2453:18:0"
									},
									"returnParameters": {
										"id": 96,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2489:0:0"
									},
									"scope": 112,
									"src": "2426:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 113,
							"src": "654:1961:0",
							"usedErrors": []
						}
					],
					"src": "102:2514:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
					"exportedSymbols": {
						"IERC165": [
							890
						],
						"IERC721": [
							228
						]
					},
					"id": 229,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 114,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "../../utils/introspection/IERC165.sol",
							"id": 115,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 229,
							"sourceUnit": 891,
							"src": "133:47:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 117,
										"name": "IERC165",
										"nameLocations": [
											"271:7:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 890,
										"src": "271:7:1"
									},
									"id": 118,
									"nodeType": "InheritanceSpecifier",
									"src": "271:7:1"
								}
							],
							"canonicalName": "IERC721",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 116,
								"nodeType": "StructuredDocumentation",
								"src": "182:67:1",
								"text": " @dev Required interface of an ERC721 compliant contract."
							},
							"fullyImplemented": false,
							"id": 228,
							"linearizedBaseContracts": [
								228,
								890
							],
							"name": "IERC721",
							"nameLocation": "260:7:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 119,
										"nodeType": "StructuredDocumentation",
										"src": "285:88:1",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 127,
									"name": "Transfer",
									"nameLocation": "384:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 126,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 121,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "409:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 127,
												"src": "393:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 120,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "393:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 123,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "431:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 127,
												"src": "415:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 122,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "415:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 125,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "451:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 127,
												"src": "435:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 124,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "435:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "392:67:1"
									},
									"src": "378:82:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 128,
										"nodeType": "StructuredDocumentation",
										"src": "466:94:1",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 136,
									"name": "Approval",
									"nameLocation": "571:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 135,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 130,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "596:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 136,
												"src": "580:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 129,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "580:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 132,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "619:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 136,
												"src": "603:24:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 131,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "603:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 134,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "645:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 136,
												"src": "629:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 133,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "629:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "579:74:1"
									},
									"src": "565:89:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 137,
										"nodeType": "StructuredDocumentation",
										"src": "660:117:1",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"eventSelector": "17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31",
									"id": 145,
									"name": "ApprovalForAll",
									"nameLocation": "788:14:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 144,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 139,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "819:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 145,
												"src": "803:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 138,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "803:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 141,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "842:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 145,
												"src": "826:24:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 140,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "826:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 143,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "857:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 145,
												"src": "852:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 142,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "852:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "802:64:1"
									},
									"src": "782:85:1"
								},
								{
									"documentation": {
										"id": 146,
										"nodeType": "StructuredDocumentation",
										"src": "873:76:1",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 153,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "963:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 149,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 148,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "981:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "973:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 147,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "973:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "972:15:1"
									},
									"returnParameters": {
										"id": 152,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 151,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "1019:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "1011:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 150,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1011:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1010:17:1"
									},
									"scope": 228,
									"src": "954:74:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 154,
										"nodeType": "StructuredDocumentation",
										"src": "1034:131:1",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 161,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "1179:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 156,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1195:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 161,
												"src": "1187:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 155,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1187:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1186:17:1"
									},
									"returnParameters": {
										"id": 160,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 159,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1235:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 161,
												"src": "1227:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 158,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1227:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1226:15:1"
									},
									"scope": 228,
									"src": "1170:72:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 162,
										"nodeType": "StructuredDocumentation",
										"src": "1248:556:1",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "b88d4fde",
									"id": 173,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1818:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 171,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 164,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1843:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 173,
												"src": "1835:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 163,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1835:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 166,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1857:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 173,
												"src": "1849:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 165,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1849:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 168,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1869:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 173,
												"src": "1861:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 167,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1861:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 170,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1893:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 173,
												"src": "1878:19:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 169,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1878:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1834:64:1"
									},
									"returnParameters": {
										"id": 172,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1907:0:1"
									},
									"scope": 228,
									"src": "1809:99:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 174,
										"nodeType": "StructuredDocumentation",
										"src": "1914:687:1",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "42842e0e",
									"id": 183,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "2615:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 181,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 176,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2640:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 183,
												"src": "2632:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 175,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2632:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 178,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2654:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 183,
												"src": "2646:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 177,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2646:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 180,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2666:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 183,
												"src": "2658:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 179,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2658:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2631:43:1"
									},
									"returnParameters": {
										"id": 182,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2683:0:1"
									},
									"scope": 228,
									"src": "2606:78:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 184,
										"nodeType": "StructuredDocumentation",
										"src": "2690:732:1",
										"text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 193,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "3436:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 191,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 186,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "3457:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 193,
												"src": "3449:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 185,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3449:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 188,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3471:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 193,
												"src": "3463:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 187,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3463:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 190,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3483:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 193,
												"src": "3475:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 189,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3475:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3448:43:1"
									},
									"returnParameters": {
										"id": 192,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3500:0:1"
									},
									"scope": 228,
									"src": "3427:74:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 194,
										"nodeType": "StructuredDocumentation",
										"src": "3507:452:1",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 201,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "3973:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 196,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3989:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 201,
												"src": "3981:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 195,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3981:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 198,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4001:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 201,
												"src": "3993:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 197,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3993:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3980:29:1"
									},
									"returnParameters": {
										"id": 200,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4018:0:1"
									},
									"scope": 228,
									"src": "3964:55:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 202,
										"nodeType": "StructuredDocumentation",
										"src": "4025:309:1",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 209,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "4348:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 207,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 204,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4374:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 209,
												"src": "4366:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 203,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4366:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 206,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "4389:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 209,
												"src": "4384:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 205,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4384:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4365:33:1"
									},
									"returnParameters": {
										"id": 208,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4407:0:1"
									},
									"scope": 228,
									"src": "4339:69:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 210,
										"nodeType": "StructuredDocumentation",
										"src": "4414:139:1",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 217,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "4567:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 213,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 212,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4587:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 217,
												"src": "4579:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 211,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4579:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4578:17:1"
									},
									"returnParameters": {
										"id": 216,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 215,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4627:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 217,
												"src": "4619:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 214,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4619:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4618:18:1"
									},
									"scope": 228,
									"src": "4558:79:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 218,
										"nodeType": "StructuredDocumentation",
										"src": "4643:138:1",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 227,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "4795:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 223,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 220,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4820:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 227,
												"src": "4812:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 219,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4812:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 222,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4835:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 227,
												"src": "4827:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 221,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4827:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4811:33:1"
									},
									"returnParameters": {
										"id": 226,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 225,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 227,
												"src": "4868:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 224,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4868:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4867:6:1"
									},
									"scope": 228,
									"src": "4786:88:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 229,
							"src": "250:4626:1",
							"usedErrors": []
						}
					],
					"src": "108:4769:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
					"exportedSymbols": {
						"IERC721Receiver": [
							246
						]
					},
					"id": 247,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 230,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "116:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721Receiver",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 231,
								"nodeType": "StructuredDocumentation",
								"src": "141:152:2",
								"text": " @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."
							},
							"fullyImplemented": false,
							"id": 246,
							"linearizedBaseContracts": [
								246
							],
							"name": "IERC721Receiver",
							"nameLocation": "304:15:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 232,
										"nodeType": "StructuredDocumentation",
										"src": "326:493:2",
										"text": " @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."
									},
									"functionSelector": "150b7a02",
									"id": 245,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onERC721Received",
									"nameLocation": "833:16:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 241,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 234,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "867:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 245,
												"src": "859:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 233,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "859:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 236,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "893:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 245,
												"src": "885:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 235,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "885:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 238,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "915:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 245,
												"src": "907:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 237,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "907:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 240,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "947:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 245,
												"src": "932:19:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 239,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "932:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "849:108:2"
									},
									"returnParameters": {
										"id": 244,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 243,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 245,
												"src": "976:6:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 242,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "976:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "975:8:2"
									},
									"scope": 246,
									"src": "824:160:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 247,
							"src": "294:692:2",
							"usedErrors": []
						}
					],
					"src": "116:871:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
					"exportedSymbols": {
						"IERC165": [
							890
						],
						"IERC721": [
							228
						],
						"IERC721Metadata": [
							273
						]
					},
					"id": 274,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 248,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "112:23:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "../IERC721.sol",
							"id": 249,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 274,
							"sourceUnit": 229,
							"src": "137:24:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 251,
										"name": "IERC721",
										"nameLocations": [
											"326:7:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 228,
										"src": "326:7:3"
									},
									"id": 252,
									"nodeType": "InheritanceSpecifier",
									"src": "326:7:3"
								}
							],
							"canonicalName": "IERC721Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 250,
								"nodeType": "StructuredDocumentation",
								"src": "163:133:3",
								"text": " @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
							},
							"fullyImplemented": false,
							"id": 273,
							"linearizedBaseContracts": [
								273,
								228,
								890
							],
							"name": "IERC721Metadata",
							"nameLocation": "307:15:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 253,
										"nodeType": "StructuredDocumentation",
										"src": "340:58:3",
										"text": " @dev Returns the token collection name."
									},
									"functionSelector": "06fdde03",
									"id": 258,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "412:4:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 254,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "416:2:3"
									},
									"returnParameters": {
										"id": 257,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 256,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "442:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 255,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "442:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "441:15:3"
									},
									"scope": 273,
									"src": "403:54:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 259,
										"nodeType": "StructuredDocumentation",
										"src": "463:60:3",
										"text": " @dev Returns the token collection symbol."
									},
									"functionSelector": "95d89b41",
									"id": 264,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "537:6:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 260,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "543:2:3"
									},
									"returnParameters": {
										"id": 263,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 262,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 264,
												"src": "569:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 261,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "569:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "568:15:3"
									},
									"scope": 273,
									"src": "528:56:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 265,
										"nodeType": "StructuredDocumentation",
										"src": "590:90:3",
										"text": " @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."
									},
									"functionSelector": "c87b56dd",
									"id": 272,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenURI",
									"nameLocation": "694:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 268,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 267,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "711:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 272,
												"src": "703:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 266,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "703:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "702:17:3"
									},
									"returnParameters": {
										"id": 271,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 270,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 272,
												"src": "743:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 269,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "743:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "742:15:3"
									},
									"scope": 273,
									"src": "685:73:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 274,
							"src": "297:463:3",
							"usedErrors": []
						}
					],
					"src": "112:649:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							603
						]
					},
					"id": 604,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 275,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Address",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 276,
								"nodeType": "StructuredDocumentation",
								"src": "126:67:4",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 603,
							"linearizedBaseContracts": [
								603
							],
							"name": "Address",
							"nameLocation": "202:7:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 290,
										"nodeType": "Block",
										"src": "1478:254:4",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 288,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 284,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 279,
																"src": "1702:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 285,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1710:4:4",
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1702:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 286,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1715:6:4",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1702:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 287,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1724:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1702:23:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 283,
												"id": 289,
												"nodeType": "Return",
												"src": "1695:30:4"
											}
										]
									},
									"documentation": {
										"id": 277,
										"nodeType": "StructuredDocumentation",
										"src": "216:1191:4",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 291,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1421:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 280,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 279,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1440:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 291,
												"src": "1432:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 278,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1432:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1431:17:4"
									},
									"returnParameters": {
										"id": 283,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 282,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 291,
												"src": "1472:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 281,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1472:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1471:6:4"
									},
									"scope": 603,
									"src": "1412:320:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 324,
										"nodeType": "Block",
										"src": "2718:241:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 306,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 302,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2744:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$603",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$603",
																				"typeString": "library Address"
																			}
																		],
																		"id": 301,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2736:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 300,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2736:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 303,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2736:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 304,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2750:7:4",
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2736:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 305,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 296,
																"src": "2761:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2736:31:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 307,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2769:31:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 299,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2728:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 308,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2728:73:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 309,
												"nodeType": "ExpressionStatement",
												"src": "2728:73:4"
											},
											{
												"assignments": [
													311,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 311,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2818:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 324,
														"src": "2813:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 310,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2813:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 318,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 316,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2861:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 312,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 294,
																"src": "2831:9:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 313,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2841:4:4",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2831:14:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 315,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 314,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 296,
																"src": "2853:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2831:29:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 317,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2831:33:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2812:52:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 320,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 311,
															"src": "2882:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 321,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2891:60:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 319,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2874:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 322,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2874:78:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 323,
												"nodeType": "ExpressionStatement",
												"src": "2874:78:4"
											}
										]
									},
									"documentation": {
										"id": 292,
										"nodeType": "StructuredDocumentation",
										"src": "1738:904:4",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 325,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2656:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 297,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 294,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2682:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 325,
												"src": "2666:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 293,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2666:15:4",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 296,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2701:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 325,
												"src": "2693:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 295,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2693:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2665:43:4"
									},
									"returnParameters": {
										"id": 298,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2718:0:4"
									},
									"scope": 603,
									"src": "2647:312:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 342,
										"nodeType": "Block",
										"src": "3790:96:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 336,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 328,
															"src": "3829:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 337,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 330,
															"src": "3837:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 338,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3843:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 339,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3846:32:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 335,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															383,
															427
														],
														"referencedDeclaration": 427,
														"src": "3807:21:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 340,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3807:72:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 334,
												"id": 341,
												"nodeType": "Return",
												"src": "3800:79:4"
											}
										]
									},
									"documentation": {
										"id": 326,
										"nodeType": "StructuredDocumentation",
										"src": "2965:731:4",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 343,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3710:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 331,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 328,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3731:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 343,
												"src": "3723:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 327,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3723:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 330,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3752:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 343,
												"src": "3739:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 329,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3739:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3722:35:4"
									},
									"returnParameters": {
										"id": 334,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 333,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 343,
												"src": "3776:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 332,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3776:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3775:14:4"
									},
									"scope": 603,
									"src": "3701:185:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 362,
										"nodeType": "Block",
										"src": "4255:76:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 356,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 346,
															"src": "4294:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 357,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 348,
															"src": "4302:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 358,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4308:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 359,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 350,
															"src": "4311:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 355,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															383,
															427
														],
														"referencedDeclaration": 427,
														"src": "4272:21:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 360,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4272:52:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 354,
												"id": 361,
												"nodeType": "Return",
												"src": "4265:59:4"
											}
										]
									},
									"documentation": {
										"id": 344,
										"nodeType": "StructuredDocumentation",
										"src": "3892:211:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 363,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "4117:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 351,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 346,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4147:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 363,
												"src": "4139:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 345,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4139:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 348,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4176:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 363,
												"src": "4163:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 347,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4163:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 350,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "4204:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 363,
												"src": "4190:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 349,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4190:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4129:93:4"
									},
									"returnParameters": {
										"id": 354,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 353,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 363,
												"src": "4241:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 352,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4241:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4240:14:4"
									},
									"scope": 603,
									"src": "4108:223:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 382,
										"nodeType": "Block",
										"src": "4806:111:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 376,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 366,
															"src": "4845:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 377,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 368,
															"src": "4853:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 378,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 370,
															"src": "4859:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 379,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4866:43:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 375,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															383,
															427
														],
														"referencedDeclaration": 427,
														"src": "4823:21:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 380,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4823:87:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 374,
												"id": 381,
												"nodeType": "Return",
												"src": "4816:94:4"
											}
										]
									},
									"documentation": {
										"id": 364,
										"nodeType": "StructuredDocumentation",
										"src": "4337:351:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 383,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4702:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 371,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 366,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4732:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 383,
												"src": "4724:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 365,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4724:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 368,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4753:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 383,
												"src": "4740:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 367,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4740:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 370,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4767:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 383,
												"src": "4759:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 369,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4759:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4723:50:4"
									},
									"returnParameters": {
										"id": 374,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 373,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 383,
												"src": "4792:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 372,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4792:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4791:14:4"
									},
									"scope": 603,
									"src": "4693:224:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 426,
										"nodeType": "Block",
										"src": "5344:267:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 404,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 400,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5370:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$603",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$603",
																				"typeString": "library Address"
																			}
																		],
																		"id": 399,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5362:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 398,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5362:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 401,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5362:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 402,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5376:7:4",
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5362:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 403,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 390,
																"src": "5387:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5362:30:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 405,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5394:40:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 397,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5354:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 406,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5354:81:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 407,
												"nodeType": "ExpressionStatement",
												"src": "5354:81:4"
											},
											{
												"assignments": [
													409,
													411
												],
												"declarations": [
													{
														"constant": false,
														"id": 409,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5451:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 426,
														"src": "5446:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 408,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5446:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 411,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5473:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 426,
														"src": "5460:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 410,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5460:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 418,
												"initialValue": {
													"arguments": [
														{
															"id": 416,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 388,
															"src": "5513:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 412,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 386,
																"src": "5487:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 413,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5494:4:4",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5487:11:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 415,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 414,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 390,
																"src": "5506:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5487:25:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 417,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5487:31:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5445:73:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 420,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 386,
															"src": "5562:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 421,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 409,
															"src": "5570:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 422,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 411,
															"src": "5579:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 423,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 392,
															"src": "5591:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 419,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 558,
														"src": "5535:26:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 424,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5535:69:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 396,
												"id": 425,
												"nodeType": "Return",
												"src": "5528:76:4"
											}
										]
									},
									"documentation": {
										"id": 384,
										"nodeType": "StructuredDocumentation",
										"src": "4923:237:4",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 427,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "5174:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 393,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 386,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5213:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 427,
												"src": "5205:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 385,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5205:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 388,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5242:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 427,
												"src": "5229:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 387,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5229:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 390,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5264:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 427,
												"src": "5256:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 389,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5256:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 392,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5293:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 427,
												"src": "5279:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 391,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5279:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5195:116:4"
									},
									"returnParameters": {
										"id": 396,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 395,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 427,
												"src": "5330:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 394,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5330:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5329:14:4"
									},
									"scope": 603,
									"src": "5165:446:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 443,
										"nodeType": "Block",
										"src": "5888:97:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 438,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 430,
															"src": "5924:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 439,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 432,
															"src": "5932:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 440,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5938:39:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 437,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															444,
															473
														],
														"referencedDeclaration": 473,
														"src": "5905:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 441,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5905:73:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 436,
												"id": 442,
												"nodeType": "Return",
												"src": "5898:80:4"
											}
										]
									},
									"documentation": {
										"id": 428,
										"nodeType": "StructuredDocumentation",
										"src": "5617:166:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 444,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5797:18:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 433,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 430,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5824:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 444,
												"src": "5816:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 429,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5816:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 432,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5845:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 444,
												"src": "5832:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 431,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5832:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5815:35:4"
									},
									"returnParameters": {
										"id": 436,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 435,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 444,
												"src": "5874:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 434,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5874:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5873:14:4"
									},
									"scope": 603,
									"src": "5788:197:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 472,
										"nodeType": "Block",
										"src": "6327:168:4",
										"statements": [
											{
												"assignments": [
													457,
													459
												],
												"declarations": [
													{
														"constant": false,
														"id": 457,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6343:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 472,
														"src": "6338:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 456,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6338:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 459,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6365:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 472,
														"src": "6352:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 458,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6352:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 464,
												"initialValue": {
													"arguments": [
														{
															"id": 462,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 449,
															"src": "6397:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 460,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 447,
															"src": "6379:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 461,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6386:10:4",
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6379:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 463,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6379:23:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6337:65:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 466,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 447,
															"src": "6446:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 467,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 457,
															"src": "6454:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 468,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 459,
															"src": "6463:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 469,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 451,
															"src": "6475:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 465,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 558,
														"src": "6419:26:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 470,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6419:69:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 455,
												"id": 471,
												"nodeType": "Return",
												"src": "6412:76:4"
											}
										]
									},
									"documentation": {
										"id": 445,
										"nodeType": "StructuredDocumentation",
										"src": "5991:173:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 473,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "6178:18:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 452,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 447,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6214:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 473,
												"src": "6206:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 446,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6206:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 449,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6243:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 473,
												"src": "6230:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 448,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6230:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 451,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6271:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 473,
												"src": "6257:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 450,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6257:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6196:93:4"
									},
									"returnParameters": {
										"id": 455,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 454,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 473,
												"src": "6313:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 453,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6313:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6312:14:4"
									},
									"scope": 603,
									"src": "6169:326:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 489,
										"nodeType": "Block",
										"src": "6771:101:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 484,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 476,
															"src": "6809:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 485,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 478,
															"src": "6817:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 486,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6823:41:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 483,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															490,
															519
														],
														"referencedDeclaration": 519,
														"src": "6788:20:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 487,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6788:77:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 482,
												"id": 488,
												"nodeType": "Return",
												"src": "6781:84:4"
											}
										]
									},
									"documentation": {
										"id": 474,
										"nodeType": "StructuredDocumentation",
										"src": "6501:168:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 490,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6683:20:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 479,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 476,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6712:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 490,
												"src": "6704:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 475,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6704:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 478,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6733:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 490,
												"src": "6720:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 477,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6720:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6703:35:4"
									},
									"returnParameters": {
										"id": 482,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 481,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 490,
												"src": "6757:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 480,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6757:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6756:14:4"
									},
									"scope": 603,
									"src": "6674:198:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 518,
										"nodeType": "Block",
										"src": "7213:170:4",
										"statements": [
											{
												"assignments": [
													503,
													505
												],
												"declarations": [
													{
														"constant": false,
														"id": 503,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "7229:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 518,
														"src": "7224:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 502,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7224:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 505,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "7251:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 518,
														"src": "7238:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 504,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7238:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 510,
												"initialValue": {
													"arguments": [
														{
															"id": 508,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 495,
															"src": "7285:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 506,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 493,
															"src": "7265:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 507,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7272:12:4",
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "7265:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 509,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7265:25:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7223:67:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 512,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 493,
															"src": "7334:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 513,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 503,
															"src": "7342:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 514,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 505,
															"src": "7351:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 515,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 497,
															"src": "7363:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 511,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 558,
														"src": "7307:26:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 516,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7307:69:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 501,
												"id": 517,
												"nodeType": "Return",
												"src": "7300:76:4"
											}
										]
									},
									"documentation": {
										"id": 491,
										"nodeType": "StructuredDocumentation",
										"src": "6878:175:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 519,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "7067:20:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 498,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 493,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7105:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 519,
												"src": "7097:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 492,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7097:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 495,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "7134:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 519,
												"src": "7121:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 494,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7121:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 497,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7162:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 519,
												"src": "7148:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 496,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7148:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7087:93:4"
									},
									"returnParameters": {
										"id": 501,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 500,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 519,
												"src": "7199:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 499,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7199:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7198:14:4"
									},
									"scope": 603,
									"src": "7058:325:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 557,
										"nodeType": "Block",
										"src": "7865:434:4",
										"statements": [
											{
												"condition": {
													"id": 533,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 524,
													"src": "7879:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 555,
													"nodeType": "Block",
													"src": "8235:58:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 551,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 526,
																		"src": "8257:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 552,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 528,
																		"src": "8269:12:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 550,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 602,
																	"src": "8249:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 553,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8249:33:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 554,
															"nodeType": "ExpressionStatement",
															"src": "8249:33:4"
														}
													]
												},
												"id": 556,
												"nodeType": "IfStatement",
												"src": "7875:418:4",
												"trueBody": {
													"id": 549,
													"nodeType": "Block",
													"src": "7888:341:4",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 537,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 534,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 526,
																		"src": "7906:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 535,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "7917:6:4",
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7906:17:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 536,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7927:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7906:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 546,
															"nodeType": "IfStatement",
															"src": "7902:286:4",
															"trueBody": {
																"id": 545,
																"nodeType": "Block",
																"src": "7930:258:4",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 540,
																							"name": "target",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 522,
																							"src": "8132:6:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 539,
																						"name": "isContract",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 291,
																						"src": "8121:10:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																							"typeString": "function (address) view returns (bool)"
																						}
																					},
																					"id": 541,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "8121:18:4",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				{
																					"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																					"id": 542,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "8141:31:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					},
																					"value": "Address: call to non-contract"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					{
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					}
																				],
																				"id": 538,
																				"name": "require",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967278,
																					4294967278
																				],
																				"referencedDeclaration": 4294967278,
																				"src": "8113:7:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (bool,string memory) pure"
																				}
																			},
																			"id": 543,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8113:60:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 544,
																		"nodeType": "ExpressionStatement",
																		"src": "8113:60:4"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 547,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 526,
																"src": "8208:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 532,
															"id": 548,
															"nodeType": "Return",
															"src": "8201:17:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 520,
										"nodeType": "StructuredDocumentation",
										"src": "7389:277:4",
										"text": " @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"
									},
									"id": 558,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResultFromTarget",
									"nameLocation": "7680:26:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 529,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 522,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7724:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 558,
												"src": "7716:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 521,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7716:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 524,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7745:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 558,
												"src": "7740:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 523,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7740:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 526,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7775:10:4",
												"nodeType": "VariableDeclaration",
												"scope": 558,
												"src": "7762:23:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 525,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7762:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 528,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7809:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 558,
												"src": "7795:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 527,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7795:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7706:121:4"
									},
									"returnParameters": {
										"id": 532,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 531,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 558,
												"src": "7851:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 530,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7851:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7850:14:4"
									},
									"scope": 603,
									"src": "7671:628:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 581,
										"nodeType": "Block",
										"src": "8680:135:4",
										"statements": [
											{
												"condition": {
													"id": 570,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 561,
													"src": "8694:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 579,
													"nodeType": "Block",
													"src": "8751:58:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 575,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 563,
																		"src": "8773:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 576,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 565,
																		"src": "8785:12:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 574,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 602,
																	"src": "8765:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 577,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8765:33:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 578,
															"nodeType": "ExpressionStatement",
															"src": "8765:33:4"
														}
													]
												},
												"id": 580,
												"nodeType": "IfStatement",
												"src": "8690:119:4",
												"trueBody": {
													"id": 573,
													"nodeType": "Block",
													"src": "8703:42:4",
													"statements": [
														{
															"expression": {
																"id": 571,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 563,
																"src": "8724:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 569,
															"id": 572,
															"nodeType": "Return",
															"src": "8717:17:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 559,
										"nodeType": "StructuredDocumentation",
										"src": "8305:210:4",
										"text": " @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"
									},
									"id": 582,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "8529:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 566,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 561,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "8560:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 582,
												"src": "8555:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 560,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8555:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 563,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8590:10:4",
												"nodeType": "VariableDeclaration",
												"scope": 582,
												"src": "8577:23:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 562,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8577:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 565,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8624:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 582,
												"src": "8610:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 564,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8610:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8545:97:4"
									},
									"returnParameters": {
										"id": 569,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 568,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 582,
												"src": "8666:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 567,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8666:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8665:14:4"
									},
									"scope": 603,
									"src": "8520:295:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 601,
										"nodeType": "Block",
										"src": "8904:457:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 592,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 589,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 584,
															"src": "8980:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 590,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "8991:6:4",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "8980:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 591,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9000:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8980:21:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 599,
													"nodeType": "Block",
													"src": "9310:45:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 596,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 586,
																		"src": "9331:12:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 595,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "9324:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 597,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9324:20:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 598,
															"nodeType": "ExpressionStatement",
															"src": "9324:20:4"
														}
													]
												},
												"id": 600,
												"nodeType": "IfStatement",
												"src": "8976:379:4",
												"trueBody": {
													"id": 594,
													"nodeType": "Block",
													"src": "9003:301:4",
													"statements": [
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "9161:133:4",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "9179:40:4",
																		"value": {
																			"arguments": [
																				{
																					"name": "returndata",
																					"nodeType": "YulIdentifier",
																					"src": "9208:10:4"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "9202:5:4"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9202:17:4"
																		},
																		"variables": [
																			{
																				"name": "returndata_size",
																				"nodeType": "YulTypedName",
																				"src": "9183:15:4",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "9247:2:4",
																							"type": "",
																							"value": "32"
																						},
																						{
																							"name": "returndata",
																							"nodeType": "YulIdentifier",
																							"src": "9251:10:4"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "9243:3:4"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9243:19:4"
																				},
																				{
																					"name": "returndata_size",
																					"nodeType": "YulIdentifier",
																					"src": "9264:15:4"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9236:6:4"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9236:44:4"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9236:44:4"
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "paris",
															"externalReferences": [
																{
																	"declaration": 584,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9208:10:4",
																	"valueSize": 1
																},
																{
																	"declaration": 584,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9251:10:4",
																	"valueSize": 1
																}
															],
															"id": 593,
															"nodeType": "InlineAssembly",
															"src": "9152:142:4"
														}
													]
												}
											}
										]
									},
									"id": 602,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revert",
									"nameLocation": "8830:7:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 587,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 584,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8851:10:4",
												"nodeType": "VariableDeclaration",
												"scope": 602,
												"src": "8838:23:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 583,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8838:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 586,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8877:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 602,
												"src": "8863:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 585,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8863:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8837:53:4"
									},
									"returnParameters": {
										"id": 588,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8904:0:4"
									},
									"scope": 603,
									"src": "8821:540:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 604,
							"src": "194:9169:4",
							"usedErrors": []
						}
					],
					"src": "101:9263:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							625
						]
					},
					"id": 626,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 605,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:5"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 606,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:5",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 625,
							"linearizedBaseContracts": [
								625
							],
							"name": "Context",
							"nameLocation": "626:7:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 614,
										"nodeType": "Block",
										"src": "702:34:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 611,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 612,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "723:6:5",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 610,
												"id": 613,
												"nodeType": "Return",
												"src": "712:17:5"
											}
										]
									},
									"id": 615,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "649:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 607,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:5"
									},
									"returnParameters": {
										"id": 610,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 609,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 615,
												"src": "693:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 608,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:5"
									},
									"scope": 625,
									"src": "640:96:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 623,
										"nodeType": "Block",
										"src": "809:32:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 620,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 621,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "830:4:5",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 619,
												"id": 622,
												"nodeType": "Return",
												"src": "819:15:5"
											}
										]
									},
									"id": 624,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "751:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 616,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:5"
									},
									"returnParameters": {
										"id": 619,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 618,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 624,
												"src": "793:14:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 617,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:5"
									},
									"scope": 625,
									"src": "742:99:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 626,
							"src": "608:235:5",
							"usedErrors": []
						}
					],
					"src": "86:758:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
					"exportedSymbols": {
						"Math": [
							1756
						],
						"SignedMath": [
							1861
						],
						"Strings": [
							854
						]
					},
					"id": 855,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 627,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/math/Math.sol",
							"file": "./math/Math.sol",
							"id": 628,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 855,
							"sourceUnit": 1757,
							"src": "126:25:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/math/SignedMath.sol",
							"file": "./math/SignedMath.sol",
							"id": 629,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 855,
							"sourceUnit": 1862,
							"src": "152:31:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Strings",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 630,
								"nodeType": "StructuredDocumentation",
								"src": "185:34:6",
								"text": " @dev String operations."
							},
							"fullyImplemented": true,
							"id": 854,
							"linearizedBaseContracts": [
								854
							],
							"name": "Strings",
							"nameLocation": "228:7:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 633,
									"mutability": "constant",
									"name": "_SYMBOLS",
									"nameLocation": "267:8:6",
									"nodeType": "VariableDeclaration",
									"scope": 854,
									"src": "242:54:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes16",
										"typeString": "bytes16"
									},
									"typeName": {
										"id": 631,
										"name": "bytes16",
										"nodeType": "ElementaryTypeName",
										"src": "242:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes16",
											"typeString": "bytes16"
										}
									},
									"value": {
										"hexValue": "30313233343536373839616263646566",
										"id": 632,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "278:18:6",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f",
											"typeString": "literal_string \"0123456789abcdef\""
										},
										"value": "0123456789abcdef"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 636,
									"mutability": "constant",
									"name": "_ADDRESS_LENGTH",
									"nameLocation": "325:15:6",
									"nodeType": "VariableDeclaration",
									"scope": 854,
									"src": "302:43:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 634,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "302:5:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"hexValue": "3230",
										"id": 635,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "343:2:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_20_by_1",
											"typeString": "int_const 20"
										},
										"value": "20"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 683,
										"nodeType": "Block",
										"src": "518:625:6",
										"statements": [
											{
												"id": 682,
												"nodeType": "UncheckedBlock",
												"src": "528:609:6",
												"statements": [
													{
														"assignments": [
															645
														],
														"declarations": [
															{
																"constant": false,
																"id": 645,
																"mutability": "mutable",
																"name": "length",
																"nameLocation": "560:6:6",
																"nodeType": "VariableDeclaration",
																"scope": 682,
																"src": "552:14:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 644,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "552:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 652,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 651,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 648,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 639,
																		"src": "580:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 646,
																		"name": "Math",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1756,
																		"src": "569:4:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Math_$1756_$",
																			"typeString": "type(library Math)"
																		}
																	},
																	"id": 647,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "574:5:6",
																	"memberName": "log10",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1593,
																	"src": "569:10:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256) pure returns (uint256)"
																	}
																},
																"id": 649,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "569:17:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "31",
																"id": 650,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "589:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "569:21:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "552:38:6"
													},
													{
														"assignments": [
															654
														],
														"declarations": [
															{
																"constant": false,
																"id": 654,
																"mutability": "mutable",
																"name": "buffer",
																"nameLocation": "618:6:6",
																"nodeType": "VariableDeclaration",
																"scope": 682,
																"src": "604:20:6",
																"stateVariable": false,
																"storageLocation": "memory",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string"
																},
																"typeName": {
																	"id": 653,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "604:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 659,
														"initialValue": {
															"arguments": [
																{
																	"id": 657,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 645,
																	"src": "638:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 656,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "627:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																},
																"typeName": {
																	"id": 655,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "631:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																}
															},
															"id": 658,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "627:18:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "604:41:6"
													},
													{
														"assignments": [
															661
														],
														"declarations": [
															{
																"constant": false,
																"id": 661,
																"mutability": "mutable",
																"name": "ptr",
																"nameLocation": "667:3:6",
																"nodeType": "VariableDeclaration",
																"scope": 682,
																"src": "659:11:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 660,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "659:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 662,
														"nodeType": "VariableDeclarationStatement",
														"src": "659:11:6"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "740:67:6",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "758:35:6",
																	"value": {
																		"arguments": [
																			{
																				"name": "buffer",
																				"nodeType": "YulIdentifier",
																				"src": "769:6:6"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "781:2:6",
																						"type": "",
																						"value": "32"
																					},
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "785:6:6"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "777:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "777:15:6"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "765:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "765:28:6"
																	},
																	"variableNames": [
																		{
																			"name": "ptr",
																			"nodeType": "YulIdentifier",
																			"src": "758:3:6"
																		}
																	]
																}
															]
														},
														"documentation": "@solidity memory-safe-assembly",
														"evmVersion": "paris",
														"externalReferences": [
															{
																"declaration": 654,
																"isOffset": false,
																"isSlot": false,
																"src": "769:6:6",
																"valueSize": 1
															},
															{
																"declaration": 645,
																"isOffset": false,
																"isSlot": false,
																"src": "785:6:6",
																"valueSize": 1
															},
															{
																"declaration": 661,
																"isOffset": false,
																"isSlot": false,
																"src": "758:3:6",
																"valueSize": 1
															}
														],
														"id": 663,
														"nodeType": "InlineAssembly",
														"src": "731:76:6"
													},
													{
														"body": {
															"id": 678,
															"nodeType": "Block",
															"src": "833:267:6",
															"statements": [
																{
																	"expression": {
																		"id": 666,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "--",
																		"prefix": false,
																		"src": "851:5:6",
																		"subExpression": {
																			"id": 665,
																			"name": "ptr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 661,
																			"src": "851:3:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 667,
																	"nodeType": "ExpressionStatement",
																	"src": "851:5:6"
																},
																{
																	"AST": {
																		"nodeType": "YulBlock",
																		"src": "934:84:6",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "ptr",
																							"nodeType": "YulIdentifier",
																							"src": "964:3:6"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value",
																											"nodeType": "YulIdentifier",
																											"src": "978:5:6"
																										},
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "985:2:6",
																											"type": "",
																											"value": "10"
																										}
																									],
																									"functionName": {
																										"name": "mod",
																										"nodeType": "YulIdentifier",
																										"src": "974:3:6"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "974:14:6"
																								},
																								{
																									"name": "_SYMBOLS",
																									"nodeType": "YulIdentifier",
																									"src": "990:8:6"
																								}
																							],
																							"functionName": {
																								"name": "byte",
																								"nodeType": "YulIdentifier",
																								"src": "969:4:6"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "969:30:6"
																						}
																					],
																					"functionName": {
																						"name": "mstore8",
																						"nodeType": "YulIdentifier",
																						"src": "956:7:6"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "956:44:6"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "956:44:6"
																			}
																		]
																	},
																	"documentation": "@solidity memory-safe-assembly",
																	"evmVersion": "paris",
																	"externalReferences": [
																		{
																			"declaration": 633,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "990:8:6",
																			"valueSize": 1
																		},
																		{
																			"declaration": 661,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "964:3:6",
																			"valueSize": 1
																		},
																		{
																			"declaration": 639,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "978:5:6",
																			"valueSize": 1
																		}
																	],
																	"id": 668,
																	"nodeType": "InlineAssembly",
																	"src": "925:93:6"
																},
																{
																	"expression": {
																		"id": 671,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 669,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 639,
																			"src": "1035:5:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"hexValue": "3130",
																			"id": 670,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1044:2:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10_by_1",
																				"typeString": "int_const 10"
																			},
																			"value": "10"
																		},
																		"src": "1035:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 672,
																	"nodeType": "ExpressionStatement",
																	"src": "1035:11:6"
																},
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 675,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 673,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 639,
																			"src": "1068:5:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 674,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1077:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1068:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 677,
																	"nodeType": "IfStatement",
																	"src": "1064:21:6",
																	"trueBody": {
																		"id": 676,
																		"nodeType": "Break",
																		"src": "1080:5:6"
																	}
																}
															]
														},
														"condition": {
															"hexValue": "74727565",
															"id": 664,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "827:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														"id": 679,
														"nodeType": "WhileStatement",
														"src": "820:280:6"
													},
													{
														"expression": {
															"id": 680,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 654,
															"src": "1120:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 643,
														"id": 681,
														"nodeType": "Return",
														"src": "1113:13:6"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 637,
										"nodeType": "StructuredDocumentation",
										"src": "352:90:6",
										"text": " @dev Converts a `uint256` to its ASCII `string` decimal representation."
									},
									"id": 684,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "456:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 640,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 639,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "473:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 684,
												"src": "465:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 638,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "465:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "464:15:6"
									},
									"returnParameters": {
										"id": 643,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 642,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 684,
												"src": "503:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 641,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "503:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "502:15:6"
									},
									"scope": 854,
									"src": "447:696:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 711,
										"nodeType": "Block",
										"src": "1313:103:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 698,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 696,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 687,
																			"src": "1354:5:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 697,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1362:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1354:9:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"falseExpression": {
																		"hexValue": "",
																		"id": 700,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1372:2:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																			"typeString": "literal_string \"\""
																		},
																		"value": ""
																	},
																	"id": 701,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "Conditional",
																	"src": "1354:20:6",
																	"trueExpression": {
																		"hexValue": "2d",
																		"id": 699,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1366:3:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561",
																			"typeString": "literal_string \"-\""
																		},
																		"value": "-"
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 705,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 687,
																					"src": "1400:5:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				],
																				"expression": {
																					"id": 703,
																					"name": "SignedMath",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1861,
																					"src": "1385:10:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_SignedMath_$1861_$",
																						"typeString": "type(library SignedMath)"
																					}
																				},
																				"id": 704,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "1396:3:6",
																				"memberName": "abs",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1860,
																				"src": "1385:14:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_uint256_$",
																					"typeString": "function (int256) pure returns (uint256)"
																				}
																			},
																			"id": 706,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1385:21:6",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 702,
																		"name": "toString",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			684,
																			712
																		],
																		"referencedDeclaration": 684,
																		"src": "1376:8:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																			"typeString": "function (uint256) pure returns (string memory)"
																		}
																	},
																	"id": 707,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1376:31:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"expression": {
																	"id": 694,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1337:3:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 695,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1341:12:6",
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "1337:16:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 708,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1337:71:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 693,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1330:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 692,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "1330:6:6",
															"typeDescriptions": {}
														}
													},
													"id": 709,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1330:79:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 691,
												"id": 710,
												"nodeType": "Return",
												"src": "1323:86:6"
											}
										]
									},
									"documentation": {
										"id": 685,
										"nodeType": "StructuredDocumentation",
										"src": "1149:89:6",
										"text": " @dev Converts a `int256` to its ASCII `string` decimal representation."
									},
									"id": 712,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "1252:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 688,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 687,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1268:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 712,
												"src": "1261:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 686,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1261:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1260:14:6"
									},
									"returnParameters": {
										"id": 691,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 690,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 712,
												"src": "1298:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 689,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1298:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1297:15:6"
									},
									"scope": 854,
									"src": "1243:173:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 731,
										"nodeType": "Block",
										"src": "1595:100:6",
										"statements": [
											{
												"id": 730,
												"nodeType": "UncheckedBlock",
												"src": "1605:84:6",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 721,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 715,
																	"src": "1648:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 727,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"id": 724,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 715,
																				"src": "1667:5:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"id": 722,
																				"name": "Math",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1756,
																				"src": "1655:4:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_Math_$1756_$",
																					"typeString": "type(library Math)"
																				}
																			},
																			"id": 723,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "1660:6:6",
																			"memberName": "log256",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1716,
																			"src": "1655:11:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256) pure returns (uint256)"
																			}
																		},
																		"id": 725,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1655:18:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 726,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1676:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "1655:22:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 720,
																"name": "toHexString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	732,
																	808,
																	828
																],
																"referencedDeclaration": 808,
																"src": "1636:11:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256,uint256) pure returns (string memory)"
																}
															},
															"id": 728,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1636:42:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 719,
														"id": 729,
														"nodeType": "Return",
														"src": "1629:49:6"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 713,
										"nodeType": "StructuredDocumentation",
										"src": "1422:94:6",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."
									},
									"id": 732,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1530:11:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 716,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 715,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1550:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 732,
												"src": "1542:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 714,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1542:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1541:15:6"
									},
									"returnParameters": {
										"id": 719,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 718,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 732,
												"src": "1580:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 717,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1580:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1579:15:6"
									},
									"scope": 854,
									"src": "1521:174:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 807,
										"nodeType": "Block",
										"src": "1908:347:6",
										"statements": [
											{
												"assignments": [
													743
												],
												"declarations": [
													{
														"constant": false,
														"id": 743,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "1931:6:6",
														"nodeType": "VariableDeclaration",
														"scope": 807,
														"src": "1918:19:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 742,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1918:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 752,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 750,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 748,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 746,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1950:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 747,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 737,
																	"src": "1954:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1950:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "32",
																"id": 749,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1963:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "1950:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 745,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "1940:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 744,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1944:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 751,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1940:25:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1918:47:6"
											},
											{
												"expression": {
													"id": 757,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 753,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 743,
															"src": "1975:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 755,
														"indexExpression": {
															"hexValue": "30",
															"id": 754,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1982:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1975:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 756,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1987:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
															"typeString": "literal_string \"0\""
														},
														"value": "0"
													},
													"src": "1975:15:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 758,
												"nodeType": "ExpressionStatement",
												"src": "1975:15:6"
											},
											{
												"expression": {
													"id": 763,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 759,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 743,
															"src": "2000:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 761,
														"indexExpression": {
															"hexValue": "31",
															"id": 760,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2007:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2000:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "78",
														"id": 762,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2012:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83",
															"typeString": "literal_string \"x\""
														},
														"value": "x"
													},
													"src": "2000:15:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 764,
												"nodeType": "ExpressionStatement",
												"src": "2000:15:6"
											},
											{
												"body": {
													"id": 793,
													"nodeType": "Block",
													"src": "2070:83:6",
													"statements": [
														{
															"expression": {
																"id": 787,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 779,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 743,
																		"src": "2084:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 781,
																	"indexExpression": {
																		"id": 780,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 766,
																		"src": "2091:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "2084:9:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 782,
																		"name": "_SYMBOLS",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 633,
																		"src": "2096:8:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes16",
																			"typeString": "bytes16"
																		}
																	},
																	"id": 786,
																	"indexExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 785,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 783,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 735,
																			"src": "2105:5:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&",
																		"rightExpression": {
																			"hexValue": "307866",
																			"id": 784,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2113:3:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_15_by_1",
																				"typeString": "int_const 15"
																			},
																			"value": "0xf"
																		},
																		"src": "2105:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "2096:21:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "2084:33:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 788,
															"nodeType": "ExpressionStatement",
															"src": "2084:33:6"
														},
														{
															"expression": {
																"id": 791,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 789,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 735,
																	"src": "2131:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 790,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2141:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "2131:11:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 792,
															"nodeType": "ExpressionStatement",
															"src": "2131:11:6"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 775,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 773,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 766,
														"src": "2058:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "31",
														"id": 774,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2062:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "2058:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 794,
												"initializationExpression": {
													"assignments": [
														766
													],
													"declarations": [
														{
															"constant": false,
															"id": 766,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "2038:1:6",
															"nodeType": "VariableDeclaration",
															"scope": 794,
															"src": "2030:9:6",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 765,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2030:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 772,
													"initialValue": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 771,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 769,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "32",
																"id": 767,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2042:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 768,
																"name": "length",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 737,
																"src": "2046:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2042:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 770,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2055:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "2042:14:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "2030:26:6"
												},
												"loopExpression": {
													"expression": {
														"id": 777,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "--",
														"prefix": true,
														"src": "2065:3:6",
														"subExpression": {
															"id": 776,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 766,
															"src": "2067:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 778,
													"nodeType": "ExpressionStatement",
													"src": "2065:3:6"
												},
												"nodeType": "ForStatement",
												"src": "2025:128:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 798,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 796,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 735,
																"src": "2170:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 797,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2179:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2170:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "537472696e67733a20686578206c656e67746820696e73756666696369656e74",
															"id": 799,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2182:34:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															},
															"value": "Strings: hex length insufficient"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															}
														],
														"id": 795,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2162:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 800,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2162:55:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 801,
												"nodeType": "ExpressionStatement",
												"src": "2162:55:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 804,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 743,
															"src": "2241:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 803,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "2234:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 802,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2234:6:6",
															"typeDescriptions": {}
														}
													},
													"id": 805,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2234:14:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 741,
												"id": 806,
												"nodeType": "Return",
												"src": "2227:21:6"
											}
										]
									},
									"documentation": {
										"id": 733,
										"nodeType": "StructuredDocumentation",
										"src": "1701:112:6",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."
									},
									"id": 808,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1827:11:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 738,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 735,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1847:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 808,
												"src": "1839:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 734,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1839:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 737,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "1862:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 808,
												"src": "1854:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 736,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1854:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1838:31:6"
									},
									"returnParameters": {
										"id": 741,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 740,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 808,
												"src": "1893:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 739,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1893:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1892:15:6"
									},
									"scope": 854,
									"src": "1818:437:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 827,
										"nodeType": "Block",
										"src": "2480:76:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 821,
																			"name": "addr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 811,
																			"src": "2525:4:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 820,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2517:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint160_$",
																			"typeString": "type(uint160)"
																		},
																		"typeName": {
																			"id": 819,
																			"name": "uint160",
																			"nodeType": "ElementaryTypeName",
																			"src": "2517:7:6",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 822,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2517:13:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																],
																"id": 818,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2509:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 817,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2509:7:6",
																	"typeDescriptions": {}
																}
															},
															"id": 823,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2509:22:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 824,
															"name": "_ADDRESS_LENGTH",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 636,
															"src": "2533:15:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 816,
														"name": "toHexString",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															732,
															808,
															828
														],
														"referencedDeclaration": 808,
														"src": "2497:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256,uint256) pure returns (string memory)"
														}
													},
													"id": 825,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2497:52:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 815,
												"id": 826,
												"nodeType": "Return",
												"src": "2490:59:6"
											}
										]
									},
									"documentation": {
										"id": 809,
										"nodeType": "StructuredDocumentation",
										"src": "2261:141:6",
										"text": " @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."
									},
									"id": 828,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "2416:11:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 812,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 811,
												"mutability": "mutable",
												"name": "addr",
												"nameLocation": "2436:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 828,
												"src": "2428:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 810,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2428:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2427:14:6"
									},
									"returnParameters": {
										"id": 815,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 814,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 828,
												"src": "2465:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 813,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2465:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2464:15:6"
									},
									"scope": 854,
									"src": "2407:149:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 852,
										"nodeType": "Block",
										"src": "2711:66:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 850,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 841,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 831,
																		"src": "2744:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 840,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2738:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 839,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "2738:5:6",
																		"typeDescriptions": {}
																	}
																},
																"id": 842,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2738:8:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 838,
															"name": "keccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967288,
															"src": "2728:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes memory) pure returns (bytes32)"
															}
														},
														"id": 843,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2728:19:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 847,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 833,
																		"src": "2767:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 846,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2761:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 845,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "2761:5:6",
																		"typeDescriptions": {}
																	}
																},
																"id": 848,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2761:8:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 844,
															"name": "keccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967288,
															"src": "2751:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes memory) pure returns (bytes32)"
															}
														},
														"id": 849,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2751:19:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "2728:42:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 837,
												"id": 851,
												"nodeType": "Return",
												"src": "2721:49:6"
											}
										]
									},
									"documentation": {
										"id": 829,
										"nodeType": "StructuredDocumentation",
										"src": "2562:66:6",
										"text": " @dev Returns true if the two strings are equal."
									},
									"id": 853,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "equal",
									"nameLocation": "2642:5:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 834,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 831,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2662:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 853,
												"src": "2648:15:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 830,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2648:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 833,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2679:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 853,
												"src": "2665:15:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 832,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2665:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2647:34:6"
									},
									"returnParameters": {
										"id": 837,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 836,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 853,
												"src": "2705:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 835,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2705:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2704:6:6"
									},
									"scope": 854,
									"src": "2633:144:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 855,
							"src": "220:2559:6",
							"usedErrors": []
						}
					],
					"src": "101:2679:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/ERC165.sol",
					"exportedSymbols": {
						"ERC165": [
							878
						],
						"IERC165": [
							890
						]
					},
					"id": 879,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 856,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "99:23:7"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "./IERC165.sol",
							"id": 857,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 879,
							"sourceUnit": 891,
							"src": "124:23:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 859,
										"name": "IERC165",
										"nameLocations": [
											"754:7:7"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 890,
										"src": "754:7:7"
									},
									"id": 860,
									"nodeType": "InheritanceSpecifier",
									"src": "754:7:7"
								}
							],
							"canonicalName": "ERC165",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 858,
								"nodeType": "StructuredDocumentation",
								"src": "149:576:7",
								"text": " @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."
							},
							"fullyImplemented": true,
							"id": 878,
							"linearizedBaseContracts": [
								878,
								890
							],
							"name": "ERC165",
							"nameLocation": "744:6:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"baseFunctions": [
										889
									],
									"body": {
										"id": 876,
										"nodeType": "Block",
										"src": "920:64:7",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													},
													"id": 874,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 869,
														"name": "interfaceId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 863,
														"src": "937:11:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 871,
																	"name": "IERC165",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 890,
																	"src": "957:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_IERC165_$890_$",
																		"typeString": "type(contract IERC165)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_contract$_IERC165_$890_$",
																		"typeString": "type(contract IERC165)"
																	}
																],
																"id": 870,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "952:4:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 872,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "952:13:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_contract$_IERC165_$890",
																"typeString": "type(contract IERC165)"
															}
														},
														"id": 873,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "966:11:7",
														"memberName": "interfaceId",
														"nodeType": "MemberAccess",
														"src": "952:25:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"src": "937:40:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 868,
												"id": 875,
												"nodeType": "Return",
												"src": "930:47:7"
											}
										]
									},
									"documentation": {
										"id": 861,
										"nodeType": "StructuredDocumentation",
										"src": "768:56:7",
										"text": " @dev See {IERC165-supportsInterface}."
									},
									"functionSelector": "01ffc9a7",
									"id": 877,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "838:17:7",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 865,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "896:8:7"
									},
									"parameters": {
										"id": 864,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 863,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "863:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 877,
												"src": "856:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 862,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "856:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "855:20:7"
									},
									"returnParameters": {
										"id": 868,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 867,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 877,
												"src": "914:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 866,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "914:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "913:6:7"
									},
									"scope": 878,
									"src": "829:155:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 879,
							"src": "726:260:7",
							"usedErrors": []
						}
					],
					"src": "99:888:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							890
						]
					},
					"id": 891,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 880,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC165",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 881,
								"nodeType": "StructuredDocumentation",
								"src": "125:279:8",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 890,
							"linearizedBaseContracts": [
								890
							],
							"name": "IERC165",
							"nameLocation": "415:7:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 882,
										"nodeType": "StructuredDocumentation",
										"src": "429:340:8",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 889,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "783:17:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 885,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 884,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "808:11:8",
												"nodeType": "VariableDeclaration",
												"scope": 889,
												"src": "801:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 883,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "801:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "800:20:8"
									},
									"returnParameters": {
										"id": 888,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 887,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 889,
												"src": "844:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 886,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "844:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "843:6:8"
									},
									"scope": 890,
									"src": "774:76:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 891,
							"src": "405:447:8",
							"usedErrors": []
						}
					],
					"src": "100:753:8"
				},
				"id": 8
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/math/Math.sol",
					"exportedSymbols": {
						"Math": [
							1756
						]
					},
					"id": 1757,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 892,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "103:23:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Math",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 893,
								"nodeType": "StructuredDocumentation",
								"src": "128:73:9",
								"text": " @dev Standard math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 1756,
							"linearizedBaseContracts": [
								1756
							],
							"name": "Math",
							"nameLocation": "210:4:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "Math.Rounding",
									"id": 897,
									"members": [
										{
											"id": 894,
											"name": "Down",
											"nameLocation": "245:4:9",
											"nodeType": "EnumValue",
											"src": "245:4:9"
										},
										{
											"id": 895,
											"name": "Up",
											"nameLocation": "287:2:9",
											"nodeType": "EnumValue",
											"src": "287:2:9"
										},
										{
											"id": 896,
											"name": "Zero",
											"nameLocation": "318:4:9",
											"nodeType": "EnumValue",
											"src": "318:4:9"
										}
									],
									"name": "Rounding",
									"nameLocation": "226:8:9",
									"nodeType": "EnumDefinition",
									"src": "221:122:9"
								},
								{
									"body": {
										"id": 914,
										"nodeType": "Block",
										"src": "480:37:9",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 909,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 907,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 900,
															"src": "497:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 908,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 902,
															"src": "501:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "497:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 911,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 902,
														"src": "509:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 912,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "497:13:9",
													"trueExpression": {
														"id": 910,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 900,
														"src": "505:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 906,
												"id": 913,
												"nodeType": "Return",
												"src": "490:20:9"
											}
										]
									},
									"documentation": {
										"id": 898,
										"nodeType": "StructuredDocumentation",
										"src": "349:59:9",
										"text": " @dev Returns the largest of two numbers."
									},
									"id": 915,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "422:3:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 903,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 900,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "434:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 915,
												"src": "426:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 899,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "426:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 902,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "445:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 915,
												"src": "437:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 901,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "437:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "425:22:9"
									},
									"returnParameters": {
										"id": 906,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 905,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 915,
												"src": "471:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 904,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "471:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "470:9:9"
									},
									"scope": 1756,
									"src": "413:104:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 932,
										"nodeType": "Block",
										"src": "655:37:9",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 927,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 925,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 918,
															"src": "672:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 926,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 920,
															"src": "676:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "672:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 929,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 920,
														"src": "684:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 930,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "672:13:9",
													"trueExpression": {
														"id": 928,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 918,
														"src": "680:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 924,
												"id": 931,
												"nodeType": "Return",
												"src": "665:20:9"
											}
										]
									},
									"documentation": {
										"id": 916,
										"nodeType": "StructuredDocumentation",
										"src": "523:60:9",
										"text": " @dev Returns the smallest of two numbers."
									},
									"id": 933,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "597:3:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 921,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 918,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "609:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 933,
												"src": "601:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 917,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "601:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 920,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "620:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 933,
												"src": "612:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 919,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "612:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "600:22:9"
									},
									"returnParameters": {
										"id": 924,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 923,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 933,
												"src": "646:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 922,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "646:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "645:9:9"
									},
									"scope": 1756,
									"src": "588:104:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 955,
										"nodeType": "Block",
										"src": "876:82:9",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 953,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 945,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 943,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 936,
																	"src": "931:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 944,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 938,
																	"src": "935:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "931:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 946,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "930:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 952,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 949,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 947,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 936,
																		"src": "941:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "^",
																	"rightExpression": {
																		"id": 948,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 938,
																		"src": "945:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "941:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 950,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "940:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"hexValue": "32",
															"id": 951,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "950:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "940:11:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "930:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 942,
												"id": 954,
												"nodeType": "Return",
												"src": "923:28:9"
											}
										]
									},
									"documentation": {
										"id": 934,
										"nodeType": "StructuredDocumentation",
										"src": "698:102:9",
										"text": " @dev Returns the average of two numbers. The result is rounded towards\n zero."
									},
									"id": 956,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "814:7:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 939,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 936,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "830:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 956,
												"src": "822:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 935,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "822:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 938,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "841:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 956,
												"src": "833:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 937,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "833:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "821:22:9"
									},
									"returnParameters": {
										"id": 942,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 941,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 956,
												"src": "867:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 940,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "867:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "866:9:9"
									},
									"scope": 1756,
									"src": "805:153:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 980,
										"nodeType": "Block",
										"src": "1228:123:9",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 968,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 966,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 959,
															"src": "1316:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 967,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1321:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "1316:6:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 977,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 975,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 972,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 970,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 959,
																			"src": "1330:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 971,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1334:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "1330:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 973,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1329:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 974,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 961,
																"src": "1339:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1329:11:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 976,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1343:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "1329:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 978,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "1316:28:9",
													"trueExpression": {
														"hexValue": "30",
														"id": 969,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1325:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 965,
												"id": 979,
												"nodeType": "Return",
												"src": "1309:35:9"
											}
										]
									},
									"documentation": {
										"id": 957,
										"nodeType": "StructuredDocumentation",
										"src": "964:188:9",
										"text": " @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."
									},
									"id": 981,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ceilDiv",
									"nameLocation": "1166:7:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 962,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 959,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1182:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 981,
												"src": "1174:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 958,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1174:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 961,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1193:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 981,
												"src": "1185:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 960,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1185:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1173:22:9"
									},
									"returnParameters": {
										"id": 965,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 964,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 981,
												"src": "1219:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 963,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1219:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1218:9:9"
									},
									"scope": 1756,
									"src": "1157:194:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1103,
										"nodeType": "Block",
										"src": "1765:4115:9",
										"statements": [
											{
												"id": 1102,
												"nodeType": "UncheckedBlock",
												"src": "1775:4099:9",
												"statements": [
													{
														"assignments": [
															994
														],
														"declarations": [
															{
																"constant": false,
																"id": 994,
																"mutability": "mutable",
																"name": "prod0",
																"nameLocation": "2104:5:9",
																"nodeType": "VariableDeclaration",
																"scope": 1102,
																"src": "2096:13:9",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 993,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2096:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 995,
														"nodeType": "VariableDeclarationStatement",
														"src": "2096:13:9"
													},
													{
														"assignments": [
															997
														],
														"declarations": [
															{
																"constant": false,
																"id": 997,
																"mutability": "mutable",
																"name": "prod1",
																"nameLocation": "2176:5:9",
																"nodeType": "VariableDeclaration",
																"scope": 1102,
																"src": "2168:13:9",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 996,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2168:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 998,
														"nodeType": "VariableDeclarationStatement",
														"src": "2168:13:9"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "2248:157:9",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2266:30:9",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "2283:1:9"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2286:1:9"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2293:1:9",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "2289:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2289:6:9"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nodeType": "YulIdentifier",
																			"src": "2276:6:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2276:20:9"
																	},
																	"variables": [
																		{
																			"name": "mm",
																			"nodeType": "YulTypedName",
																			"src": "2270:2:9",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2313:18:9",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "2326:1:9"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2329:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "2322:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2322:9:9"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "2313:5:9"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2348:43:9",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nodeType": "YulIdentifier",
																						"src": "2365:2:9"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "2369:5:9"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "2361:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2361:14:9"
																			},
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nodeType": "YulIdentifier",
																						"src": "2380:2:9"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "2384:5:9"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "2377:2:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2377:13:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2357:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2357:34:9"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nodeType": "YulIdentifier",
																			"src": "2348:5:9"
																		}
																	]
																}
															]
														},
														"evmVersion": "paris",
														"externalReferences": [
															{
																"declaration": 994,
																"isOffset": false,
																"isSlot": false,
																"src": "2313:5:9",
																"valueSize": 1
															},
															{
																"declaration": 994,
																"isOffset": false,
																"isSlot": false,
																"src": "2369:5:9",
																"valueSize": 1
															},
															{
																"declaration": 994,
																"isOffset": false,
																"isSlot": false,
																"src": "2384:5:9",
																"valueSize": 1
															},
															{
																"declaration": 997,
																"isOffset": false,
																"isSlot": false,
																"src": "2348:5:9",
																"valueSize": 1
															},
															{
																"declaration": 984,
																"isOffset": false,
																"isSlot": false,
																"src": "2283:1:9",
																"valueSize": 1
															},
															{
																"declaration": 984,
																"isOffset": false,
																"isSlot": false,
																"src": "2326:1:9",
																"valueSize": 1
															},
															{
																"declaration": 986,
																"isOffset": false,
																"isSlot": false,
																"src": "2286:1:9",
																"valueSize": 1
															},
															{
																"declaration": 986,
																"isOffset": false,
																"isSlot": false,
																"src": "2329:1:9",
																"valueSize": 1
															}
														],
														"id": 999,
														"nodeType": "InlineAssembly",
														"src": "2239:166:9"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1002,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1000,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 997,
																"src": "2486:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 1001,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2495:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2486:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1008,
														"nodeType": "IfStatement",
														"src": "2482:368:9",
														"trueBody": {
															"id": 1007,
															"nodeType": "Block",
															"src": "2498:352:9",
															"statements": [
																{
																	"expression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1005,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1003,
																			"name": "prod0",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 994,
																			"src": "2816:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"id": 1004,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 988,
																			"src": "2824:11:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "2816:19:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"functionReturnParameters": 992,
																	"id": 1006,
																	"nodeType": "Return",
																	"src": "2809:26:9"
																}
															]
														}
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1012,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1010,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 988,
																		"src": "2960:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"id": 1011,
																		"name": "prod1",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 997,
																		"src": "2974:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2960:19:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"hexValue": "4d6174683a206d756c446976206f766572666c6f77",
																	"id": 1013,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2981:23:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851",
																		"typeString": "literal_string \"Math: mulDiv overflow\""
																	},
																	"value": "Math: mulDiv overflow"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851",
																		"typeString": "literal_string \"Math: mulDiv overflow\""
																	}
																],
																"id": 1009,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "2952:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 1014,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2952:53:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1015,
														"nodeType": "ExpressionStatement",
														"src": "2952:53:9"
													},
													{
														"assignments": [
															1017
														],
														"declarations": [
															{
																"constant": false,
																"id": 1017,
																"mutability": "mutable",
																"name": "remainder",
																"nameLocation": "3269:9:9",
																"nodeType": "VariableDeclaration",
																"scope": 1102,
																"src": "3261:17:9",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1016,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "3261:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1018,
														"nodeType": "VariableDeclarationStatement",
														"src": "3261:17:9"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "3301:291:9",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "3370:38:9",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "3390:1:9"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "3393:1:9"
																			},
																			{
																				"name": "denominator",
																				"nodeType": "YulIdentifier",
																				"src": "3396:11:9"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nodeType": "YulIdentifier",
																			"src": "3383:6:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3383:25:9"
																	},
																	"variableNames": [
																		{
																			"name": "remainder",
																			"nodeType": "YulIdentifier",
																			"src": "3370:9:9"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3490:41:9",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod1",
																				"nodeType": "YulIdentifier",
																				"src": "3503:5:9"
																			},
																			{
																				"arguments": [
																					{
																						"name": "remainder",
																						"nodeType": "YulIdentifier",
																						"src": "3513:9:9"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "3524:5:9"
																					}
																				],
																				"functionName": {
																					"name": "gt",
																					"nodeType": "YulIdentifier",
																					"src": "3510:2:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3510:20:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3499:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3499:32:9"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nodeType": "YulIdentifier",
																			"src": "3490:5:9"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3548:30:9",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "3561:5:9"
																			},
																			{
																				"name": "remainder",
																				"nodeType": "YulIdentifier",
																				"src": "3568:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3557:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3557:21:9"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "3548:5:9"
																		}
																	]
																}
															]
														},
														"evmVersion": "paris",
														"externalReferences": [
															{
																"declaration": 988,
																"isOffset": false,
																"isSlot": false,
																"src": "3396:11:9",
																"valueSize": 1
															},
															{
																"declaration": 994,
																"isOffset": false,
																"isSlot": false,
																"src": "3524:5:9",
																"valueSize": 1
															},
															{
																"declaration": 994,
																"isOffset": false,
																"isSlot": false,
																"src": "3548:5:9",
																"valueSize": 1
															},
															{
																"declaration": 994,
																"isOffset": false,
																"isSlot": false,
																"src": "3561:5:9",
																"valueSize": 1
															},
															{
																"declaration": 997,
																"isOffset": false,
																"isSlot": false,
																"src": "3490:5:9",
																"valueSize": 1
															},
															{
																"declaration": 997,
																"isOffset": false,
																"isSlot": false,
																"src": "3503:5:9",
																"valueSize": 1
															},
															{
																"declaration": 1017,
																"isOffset": false,
																"isSlot": false,
																"src": "3370:9:9",
																"valueSize": 1
															},
															{
																"declaration": 1017,
																"isOffset": false,
																"isSlot": false,
																"src": "3513:9:9",
																"valueSize": 1
															},
															{
																"declaration": 1017,
																"isOffset": false,
																"isSlot": false,
																"src": "3568:9:9",
																"valueSize": 1
															},
															{
																"declaration": 984,
																"isOffset": false,
																"isSlot": false,
																"src": "3390:1:9",
																"valueSize": 1
															},
															{
																"declaration": 986,
																"isOffset": false,
																"isSlot": false,
																"src": "3393:1:9",
																"valueSize": 1
															}
														],
														"id": 1019,
														"nodeType": "InlineAssembly",
														"src": "3292:300:9"
													},
													{
														"assignments": [
															1021
														],
														"declarations": [
															{
																"constant": false,
																"id": 1021,
																"mutability": "mutable",
																"name": "twos",
																"nameLocation": "3907:4:9",
																"nodeType": "VariableDeclaration",
																"scope": 1102,
																"src": "3899:12:9",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1020,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "3899:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1029,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1028,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1022,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 988,
																"src": "3914:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1026,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1024,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "~",
																			"prefix": true,
																			"src": "3929:12:9",
																			"subExpression": {
																				"id": 1023,
																				"name": "denominator",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 988,
																				"src": "3930:11:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 1025,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3944:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "3929:16:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1027,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3928:18:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3914:32:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "3899:47:9"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "3969:362:9",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "4034:37:9",
																	"value": {
																		"arguments": [
																			{
																				"name": "denominator",
																				"nodeType": "YulIdentifier",
																				"src": "4053:11:9"
																			},
																			{
																				"name": "twos",
																				"nodeType": "YulIdentifier",
																				"src": "4066:4:9"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "4049:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4049:22:9"
																	},
																	"variableNames": [
																		{
																			"name": "denominator",
																			"nodeType": "YulIdentifier",
																			"src": "4034:11:9"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4138:25:9",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "4151:5:9"
																			},
																			{
																				"name": "twos",
																				"nodeType": "YulIdentifier",
																				"src": "4158:4:9"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "4147:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4147:16:9"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "4138:5:9"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4278:39:9",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4298:1:9",
																								"type": "",
																								"value": "0"
																							},
																							{
																								"name": "twos",
																								"nodeType": "YulIdentifier",
																								"src": "4301:4:9"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "4294:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4294:12:9"
																					},
																					{
																						"name": "twos",
																						"nodeType": "YulIdentifier",
																						"src": "4308:4:9"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "4290:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4290:23:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4315:1:9",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4286:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4286:31:9"
																	},
																	"variableNames": [
																		{
																			"name": "twos",
																			"nodeType": "YulIdentifier",
																			"src": "4278:4:9"
																		}
																	]
																}
															]
														},
														"evmVersion": "paris",
														"externalReferences": [
															{
																"declaration": 988,
																"isOffset": false,
																"isSlot": false,
																"src": "4034:11:9",
																"valueSize": 1
															},
															{
																"declaration": 988,
																"isOffset": false,
																"isSlot": false,
																"src": "4053:11:9",
																"valueSize": 1
															},
															{
																"declaration": 994,
																"isOffset": false,
																"isSlot": false,
																"src": "4138:5:9",
																"valueSize": 1
															},
															{
																"declaration": 994,
																"isOffset": false,
																"isSlot": false,
																"src": "4151:5:9",
																"valueSize": 1
															},
															{
																"declaration": 1021,
																"isOffset": false,
																"isSlot": false,
																"src": "4066:4:9",
																"valueSize": 1
															},
															{
																"declaration": 1021,
																"isOffset": false,
																"isSlot": false,
																"src": "4158:4:9",
																"valueSize": 1
															},
															{
																"declaration": 1021,
																"isOffset": false,
																"isSlot": false,
																"src": "4278:4:9",
																"valueSize": 1
															},
															{
																"declaration": 1021,
																"isOffset": false,
																"isSlot": false,
																"src": "4301:4:9",
																"valueSize": 1
															},
															{
																"declaration": 1021,
																"isOffset": false,
																"isSlot": false,
																"src": "4308:4:9",
																"valueSize": 1
															}
														],
														"id": 1030,
														"nodeType": "InlineAssembly",
														"src": "3960:371:9"
													},
													{
														"expression": {
															"id": 1035,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1031,
																"name": "prod0",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 994,
																"src": "4397:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "|=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1034,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1032,
																	"name": "prod1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 997,
																	"src": "4406:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1033,
																	"name": "twos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1021,
																	"src": "4414:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4406:12:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4397:21:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1036,
														"nodeType": "ExpressionStatement",
														"src": "4397:21:9"
													},
													{
														"assignments": [
															1038
														],
														"declarations": [
															{
																"constant": false,
																"id": 1038,
																"mutability": "mutable",
																"name": "inverse",
																"nameLocation": "4744:7:9",
																"nodeType": "VariableDeclaration",
																"scope": 1102,
																"src": "4736:15:9",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1037,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4736:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1045,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1044,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1041,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "33",
																			"id": 1039,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "4755:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3_by_1",
																				"typeString": "int_const 3"
																			},
																			"value": "3"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 1040,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 988,
																			"src": "4759:11:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4755:15:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1042,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "4754:17:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "^",
															"rightExpression": {
																"hexValue": "32",
																"id": 1043,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4774:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "4754:21:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4736:39:9"
													},
													{
														"expression": {
															"id": 1052,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1046,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1038,
																"src": "4992:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1051,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1047,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5003:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1050,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1048,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 988,
																		"src": "5007:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 1049,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1038,
																		"src": "5021:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5007:21:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5003:25:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4992:36:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1053,
														"nodeType": "ExpressionStatement",
														"src": "4992:36:9"
													},
													{
														"expression": {
															"id": 1060,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1054,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1038,
																"src": "5061:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1059,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1055,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5072:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1058,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1056,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 988,
																		"src": "5076:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 1057,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1038,
																		"src": "5090:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5076:21:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5072:25:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5061:36:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1061,
														"nodeType": "ExpressionStatement",
														"src": "5061:36:9"
													},
													{
														"expression": {
															"id": 1068,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1062,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1038,
																"src": "5131:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1067,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1063,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5142:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1066,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1064,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 988,
																		"src": "5146:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 1065,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1038,
																		"src": "5160:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5146:21:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5142:25:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5131:36:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1069,
														"nodeType": "ExpressionStatement",
														"src": "5131:36:9"
													},
													{
														"expression": {
															"id": 1076,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1070,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1038,
																"src": "5201:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1075,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1071,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5212:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1074,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1072,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 988,
																		"src": "5216:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 1073,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1038,
																		"src": "5230:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5216:21:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5212:25:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5201:36:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1077,
														"nodeType": "ExpressionStatement",
														"src": "5201:36:9"
													},
													{
														"expression": {
															"id": 1084,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1078,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1038,
																"src": "5271:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1083,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1079,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5282:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1082,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1080,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 988,
																		"src": "5286:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 1081,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1038,
																		"src": "5300:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5286:21:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5282:25:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5271:36:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1085,
														"nodeType": "ExpressionStatement",
														"src": "5271:36:9"
													},
													{
														"expression": {
															"id": 1092,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1086,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1038,
																"src": "5342:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1091,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1087,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5353:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1090,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1088,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 988,
																		"src": "5357:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 1089,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1038,
																		"src": "5371:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5357:21:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5353:25:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5342:36:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1093,
														"nodeType": "ExpressionStatement",
														"src": "5342:36:9"
													},
													{
														"expression": {
															"id": 1098,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1094,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 991,
																"src": "5812:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1097,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1095,
																	"name": "prod0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 994,
																	"src": "5821:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1096,
																	"name": "inverse",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1038,
																	"src": "5829:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5821:15:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5812:24:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1099,
														"nodeType": "ExpressionStatement",
														"src": "5812:24:9"
													},
													{
														"expression": {
															"id": 1100,
															"name": "result",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 991,
															"src": "5857:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 992,
														"id": 1101,
														"nodeType": "Return",
														"src": "5850:13:9"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 982,
										"nodeType": "StructuredDocumentation",
										"src": "1357:305:9",
										"text": " @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."
									},
									"id": 1104,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "1676:6:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 989,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 984,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "1691:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1104,
												"src": "1683:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 983,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1683:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 986,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "1702:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1104,
												"src": "1694:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 985,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1694:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 988,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "1713:11:9",
												"nodeType": "VariableDeclaration",
												"scope": 1104,
												"src": "1705:19:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 987,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1705:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1682:43:9"
									},
									"returnParameters": {
										"id": 992,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 991,
												"mutability": "mutable",
												"name": "result",
												"nameLocation": "1757:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 1104,
												"src": "1749:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 990,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1749:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1748:16:9"
									},
									"scope": 1756,
									"src": "1667:4213:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1147,
										"nodeType": "Block",
										"src": "6122:189:9",
										"statements": [
											{
												"assignments": [
													1120
												],
												"declarations": [
													{
														"constant": false,
														"id": 1120,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "6140:6:9",
														"nodeType": "VariableDeclaration",
														"scope": 1147,
														"src": "6132:14:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1119,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6132:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1126,
												"initialValue": {
													"arguments": [
														{
															"id": 1122,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1107,
															"src": "6156:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1123,
															"name": "y",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1109,
															"src": "6159:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1124,
															"name": "denominator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1111,
															"src": "6162:11:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1121,
														"name": "mulDiv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1104,
															1148
														],
														"referencedDeclaration": 1104,
														"src": "6149:6:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1125,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6149:25:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6132:42:9"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1138,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_enum$_Rounding_$897",
															"typeString": "enum Math.Rounding"
														},
														"id": 1130,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1127,
															"name": "rounding",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1114,
															"src": "6188:8:9",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$897",
																"typeString": "enum Math.Rounding"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"id": 1128,
																"name": "Rounding",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 897,
																"src": "6200:8:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$897_$",
																	"typeString": "type(enum Math.Rounding)"
																}
															},
															"id": 1129,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "6209:2:9",
															"memberName": "Up",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 895,
															"src": "6200:11:9",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$897",
																"typeString": "enum Math.Rounding"
															}
														},
														"src": "6188:23:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1137,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 1132,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1107,
																	"src": "6222:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 1133,
																	"name": "y",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1109,
																	"src": "6225:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 1134,
																	"name": "denominator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1111,
																	"src": "6228:11:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1131,
																"name": "mulmod",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967280,
																"src": "6215:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 1135,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6215:25:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 1136,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6243:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "6215:29:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "6188:56:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1144,
												"nodeType": "IfStatement",
												"src": "6184:98:9",
												"trueBody": {
													"id": 1143,
													"nodeType": "Block",
													"src": "6246:36:9",
													"statements": [
														{
															"expression": {
																"id": 1141,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1139,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1120,
																	"src": "6260:6:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 1140,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6270:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "6260:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1142,
															"nodeType": "ExpressionStatement",
															"src": "6260:11:9"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1145,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1120,
													"src": "6298:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1118,
												"id": 1146,
												"nodeType": "Return",
												"src": "6291:13:9"
											}
										]
									},
									"documentation": {
										"id": 1105,
										"nodeType": "StructuredDocumentation",
										"src": "5886:121:9",
										"text": " @notice Calculates x * y / denominator with full precision, following the selected rounding direction."
									},
									"id": 1148,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "6021:6:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1115,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1107,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "6036:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1148,
												"src": "6028:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1106,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6028:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1109,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "6047:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1148,
												"src": "6039:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1108,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6039:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1111,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "6058:11:9",
												"nodeType": "VariableDeclaration",
												"scope": 1148,
												"src": "6050:19:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1110,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6050:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1114,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "6080:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1148,
												"src": "6071:17:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$897",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 1113,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1112,
														"name": "Rounding",
														"nameLocations": [
															"6071:8:9"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 897,
														"src": "6071:8:9"
													},
													"referencedDeclaration": 897,
													"src": "6071:8:9",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$897",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6027:62:9"
									},
									"returnParameters": {
										"id": 1118,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1117,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1148,
												"src": "6113:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1116,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6113:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6112:9:9"
									},
									"scope": 1756,
									"src": "6012:299:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1259,
										"nodeType": "Block",
										"src": "6587:1585:9",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1158,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1156,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1151,
														"src": "6601:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1157,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6606:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "6601:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1162,
												"nodeType": "IfStatement",
												"src": "6597:45:9",
												"trueBody": {
													"id": 1161,
													"nodeType": "Block",
													"src": "6609:33:9",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 1159,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6630:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 1155,
															"id": 1160,
															"nodeType": "Return",
															"src": "6623:8:9"
														}
													]
												}
											},
											{
												"assignments": [
													1164
												],
												"declarations": [
													{
														"constant": false,
														"id": 1164,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "7329:6:9",
														"nodeType": "VariableDeclaration",
														"scope": 1259,
														"src": "7321:14:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1163,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7321:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1173,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1172,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "31",
														"id": 1165,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7338:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1170,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 1167,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1151,
																			"src": "7349:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 1166,
																		"name": "log2",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			1428,
																			1464
																		],
																		"referencedDeclaration": 1428,
																		"src": "7344:4:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) pure returns (uint256)"
																		}
																	},
																	"id": 1168,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7344:7:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1169,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7355:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7344:12:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1171,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "7343:14:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7338:19:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7321:36:9"
											},
											{
												"id": 1258,
												"nodeType": "UncheckedBlock",
												"src": "7758:408:9",
												"statements": [
													{
														"expression": {
															"id": 1183,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1174,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1164,
																"src": "7782:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1182,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1179,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1175,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1164,
																				"src": "7792:6:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1178,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1176,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1151,
																					"src": "7801:1:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 1177,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1164,
																					"src": "7805:6:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7801:10:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7792:19:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1180,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7791:21:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1181,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7816:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7791:26:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7782:35:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1184,
														"nodeType": "ExpressionStatement",
														"src": "7782:35:9"
													},
													{
														"expression": {
															"id": 1194,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1185,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1164,
																"src": "7831:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1193,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1190,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1186,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1164,
																				"src": "7841:6:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1189,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1187,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1151,
																					"src": "7850:1:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 1188,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1164,
																					"src": "7854:6:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7850:10:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7841:19:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1191,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7840:21:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1192,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7865:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7840:26:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7831:35:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1195,
														"nodeType": "ExpressionStatement",
														"src": "7831:35:9"
													},
													{
														"expression": {
															"id": 1205,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1196,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1164,
																"src": "7880:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1204,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1201,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1197,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1164,
																				"src": "7890:6:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1200,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1198,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1151,
																					"src": "7899:1:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 1199,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1164,
																					"src": "7903:6:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7899:10:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7890:19:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1202,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7889:21:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1203,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7914:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7889:26:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7880:35:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1206,
														"nodeType": "ExpressionStatement",
														"src": "7880:35:9"
													},
													{
														"expression": {
															"id": 1216,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1207,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1164,
																"src": "7929:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1215,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1212,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1208,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1164,
																				"src": "7939:6:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1211,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1209,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1151,
																					"src": "7948:1:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 1210,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1164,
																					"src": "7952:6:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7948:10:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7939:19:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1213,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7938:21:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1214,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7963:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7938:26:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7929:35:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1217,
														"nodeType": "ExpressionStatement",
														"src": "7929:35:9"
													},
													{
														"expression": {
															"id": 1227,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1218,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1164,
																"src": "7978:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1226,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1223,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1219,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1164,
																				"src": "7988:6:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1222,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1220,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1151,
																					"src": "7997:1:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 1221,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1164,
																					"src": "8001:6:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7997:10:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7988:19:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1224,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7987:21:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1225,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8012:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7987:26:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7978:35:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1228,
														"nodeType": "ExpressionStatement",
														"src": "7978:35:9"
													},
													{
														"expression": {
															"id": 1238,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1229,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1164,
																"src": "8027:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1237,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1234,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1230,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1164,
																				"src": "8037:6:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1233,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1231,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1151,
																					"src": "8046:1:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 1232,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1164,
																					"src": "8050:6:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "8046:10:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "8037:19:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1235,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "8036:21:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1236,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8061:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "8036:26:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8027:35:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1239,
														"nodeType": "ExpressionStatement",
														"src": "8027:35:9"
													},
													{
														"expression": {
															"id": 1249,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1240,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1164,
																"src": "8076:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1248,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1245,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1241,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1164,
																				"src": "8086:6:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1244,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1242,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1151,
																					"src": "8095:1:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 1243,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1164,
																					"src": "8099:6:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "8095:10:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "8086:19:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1246,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "8085:21:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1247,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8110:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "8085:26:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8076:35:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1250,
														"nodeType": "ExpressionStatement",
														"src": "8076:35:9"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 1252,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1164,
																	"src": "8136:6:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1255,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1253,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1151,
																		"src": "8144:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 1254,
																		"name": "result",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1164,
																		"src": "8148:6:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "8144:10:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1251,
																"name": "min",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 933,
																"src": "8132:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 1256,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8132:23:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1155,
														"id": 1257,
														"nodeType": "Return",
														"src": "8125:30:9"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1149,
										"nodeType": "StructuredDocumentation",
										"src": "6317:208:9",
										"text": " @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."
									},
									"id": 1260,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "6539:4:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1152,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1151,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "6552:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1260,
												"src": "6544:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1150,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6544:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6543:11:9"
									},
									"returnParameters": {
										"id": 1155,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1154,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1260,
												"src": "6578:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1153,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6578:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6577:9:9"
									},
									"scope": 1756,
									"src": "6530:1642:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1295,
										"nodeType": "Block",
										"src": "8348:161:9",
										"statements": [
											{
												"id": 1294,
												"nodeType": "UncheckedBlock",
												"src": "8358:145:9",
												"statements": [
													{
														"assignments": [
															1272
														],
														"declarations": [
															{
																"constant": false,
																"id": 1272,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "8390:6:9",
																"nodeType": "VariableDeclaration",
																"scope": 1294,
																"src": "8382:14:9",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1271,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "8382:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1276,
														"initialValue": {
															"arguments": [
																{
																	"id": 1274,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1263,
																	"src": "8404:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1273,
																"name": "sqrt",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	1260,
																	1296
																],
																"referencedDeclaration": 1260,
																"src": "8399:4:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 1275,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8399:7:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "8382:24:9"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1292,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1277,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1272,
																"src": "8427:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 1287,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$897",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 1281,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1278,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1266,
																					"src": "8437:8:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$897",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 1279,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 897,
																						"src": "8449:8:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$897_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 1280,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberLocation": "8458:2:9",
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 895,
																					"src": "8449:11:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$897",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "8437:23:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1286,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1284,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 1282,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1272,
																						"src": "8464:6:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 1283,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1272,
																						"src": "8473:6:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "8464:15:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 1285,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1263,
																					"src": "8482:1:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "8464:19:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "8437:46:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 1289,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8490:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 1290,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "8437:54:9",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 1288,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8486:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 1291,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "8436:56:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "8427:65:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1270,
														"id": 1293,
														"nodeType": "Return",
														"src": "8420:72:9"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1261,
										"nodeType": "StructuredDocumentation",
										"src": "8178:89:9",
										"text": " @notice Calculates sqrt(a), following the selected rounding direction."
									},
									"id": 1296,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "8281:4:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1267,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1263,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "8294:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1296,
												"src": "8286:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1262,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8286:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1266,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "8306:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1296,
												"src": "8297:17:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$897",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 1265,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1264,
														"name": "Rounding",
														"nameLocations": [
															"8297:8:9"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 897,
														"src": "8297:8:9"
													},
													"referencedDeclaration": 897,
													"src": "8297:8:9",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$897",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8285:30:9"
									},
									"returnParameters": {
										"id": 1270,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1269,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1296,
												"src": "8339:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1268,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8339:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8338:9:9"
									},
									"scope": 1756,
									"src": "8272:237:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1427,
										"nodeType": "Block",
										"src": "8694:922:9",
										"statements": [
											{
												"assignments": [
													1305
												],
												"declarations": [
													{
														"constant": false,
														"id": 1305,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "8712:6:9",
														"nodeType": "VariableDeclaration",
														"scope": 1427,
														"src": "8704:14:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1304,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8704:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1307,
												"initialValue": {
													"hexValue": "30",
													"id": 1306,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "8721:1:9",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8704:18:9"
											},
											{
												"id": 1424,
												"nodeType": "UncheckedBlock",
												"src": "8732:855:9",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1312,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1310,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1308,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1299,
																	"src": "8760:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 1309,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8769:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "8760:12:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1311,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8775:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8760:16:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1322,
														"nodeType": "IfStatement",
														"src": "8756:99:9",
														"trueBody": {
															"id": 1321,
															"nodeType": "Block",
															"src": "8778:77:9",
															"statements": [
																{
																	"expression": {
																		"id": 1315,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1313,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1299,
																			"src": "8796:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 1314,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8806:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "8796:13:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1316,
																	"nodeType": "ExpressionStatement",
																	"src": "8796:13:9"
																},
																{
																	"expression": {
																		"id": 1319,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1317,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1305,
																			"src": "8827:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 1318,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8837:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "8827:13:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1320,
																	"nodeType": "ExpressionStatement",
																	"src": "8827:13:9"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1327,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1325,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1323,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1299,
																	"src": "8872:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 1324,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8881:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "8872:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1326,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8886:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8872:15:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1337,
														"nodeType": "IfStatement",
														"src": "8868:96:9",
														"trueBody": {
															"id": 1336,
															"nodeType": "Block",
															"src": "8889:75:9",
															"statements": [
																{
																	"expression": {
																		"id": 1330,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1328,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1299,
																			"src": "8907:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 1329,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8917:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "8907:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1331,
																	"nodeType": "ExpressionStatement",
																	"src": "8907:12:9"
																},
																{
																	"expression": {
																		"id": 1334,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1332,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1305,
																			"src": "8937:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 1333,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8947:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "8937:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1335,
																	"nodeType": "ExpressionStatement",
																	"src": "8937:12:9"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1342,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1340,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1338,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1299,
																	"src": "8981:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 1339,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8990:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "8981:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1341,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8995:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8981:15:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1352,
														"nodeType": "IfStatement",
														"src": "8977:96:9",
														"trueBody": {
															"id": 1351,
															"nodeType": "Block",
															"src": "8998:75:9",
															"statements": [
																{
																	"expression": {
																		"id": 1345,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1343,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1299,
																			"src": "9016:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 1344,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9026:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "9016:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1346,
																	"nodeType": "ExpressionStatement",
																	"src": "9016:12:9"
																},
																{
																	"expression": {
																		"id": 1349,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1347,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1305,
																			"src": "9046:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 1348,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9056:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "9046:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1350,
																	"nodeType": "ExpressionStatement",
																	"src": "9046:12:9"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1357,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1355,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1353,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1299,
																	"src": "9090:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 1354,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9099:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "9090:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1356,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9104:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9090:15:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1367,
														"nodeType": "IfStatement",
														"src": "9086:96:9",
														"trueBody": {
															"id": 1366,
															"nodeType": "Block",
															"src": "9107:75:9",
															"statements": [
																{
																	"expression": {
																		"id": 1360,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1358,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1299,
																			"src": "9125:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 1359,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9135:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "9125:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1361,
																	"nodeType": "ExpressionStatement",
																	"src": "9125:12:9"
																},
																{
																	"expression": {
																		"id": 1364,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1362,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1305,
																			"src": "9155:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 1363,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9165:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "9155:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1365,
																	"nodeType": "ExpressionStatement",
																	"src": "9155:12:9"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1372,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1370,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1368,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1299,
																	"src": "9199:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 1369,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9208:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "9199:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1371,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9212:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9199:14:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1382,
														"nodeType": "IfStatement",
														"src": "9195:93:9",
														"trueBody": {
															"id": 1381,
															"nodeType": "Block",
															"src": "9215:73:9",
															"statements": [
																{
																	"expression": {
																		"id": 1375,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1373,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1299,
																			"src": "9233:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 1374,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9243:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "9233:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1376,
																	"nodeType": "ExpressionStatement",
																	"src": "9233:11:9"
																},
																{
																	"expression": {
																		"id": 1379,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1377,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1305,
																			"src": "9262:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 1378,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9272:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "9262:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1380,
																	"nodeType": "ExpressionStatement",
																	"src": "9262:11:9"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1387,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1385,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1383,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1299,
																	"src": "9305:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 1384,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9314:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "9305:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1386,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9318:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9305:14:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1397,
														"nodeType": "IfStatement",
														"src": "9301:93:9",
														"trueBody": {
															"id": 1396,
															"nodeType": "Block",
															"src": "9321:73:9",
															"statements": [
																{
																	"expression": {
																		"id": 1390,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1388,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1299,
																			"src": "9339:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 1389,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9349:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "9339:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1391,
																	"nodeType": "ExpressionStatement",
																	"src": "9339:11:9"
																},
																{
																	"expression": {
																		"id": 1394,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1392,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1305,
																			"src": "9368:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 1393,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9378:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "9368:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1395,
																	"nodeType": "ExpressionStatement",
																	"src": "9368:11:9"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1402,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1400,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1398,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1299,
																	"src": "9411:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 1399,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9420:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "9411:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1401,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9424:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9411:14:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1412,
														"nodeType": "IfStatement",
														"src": "9407:93:9",
														"trueBody": {
															"id": 1411,
															"nodeType": "Block",
															"src": "9427:73:9",
															"statements": [
																{
																	"expression": {
																		"id": 1405,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1403,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1299,
																			"src": "9445:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 1404,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9455:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "9445:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1406,
																	"nodeType": "ExpressionStatement",
																	"src": "9445:11:9"
																},
																{
																	"expression": {
																		"id": 1409,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1407,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1305,
																			"src": "9474:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 1408,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9484:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "9474:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1410,
																	"nodeType": "ExpressionStatement",
																	"src": "9474:11:9"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1417,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1415,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1413,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1299,
																	"src": "9517:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1414,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9526:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9517:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1416,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9530:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9517:14:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1423,
														"nodeType": "IfStatement",
														"src": "9513:64:9",
														"trueBody": {
															"id": 1422,
															"nodeType": "Block",
															"src": "9533:44:9",
															"statements": [
																{
																	"expression": {
																		"id": 1420,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1418,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1305,
																			"src": "9551:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 1419,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9561:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "9551:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1421,
																	"nodeType": "ExpressionStatement",
																	"src": "9551:11:9"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 1425,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1305,
													"src": "9603:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1303,
												"id": 1426,
												"nodeType": "Return",
												"src": "9596:13:9"
											}
										]
									},
									"documentation": {
										"id": 1297,
										"nodeType": "StructuredDocumentation",
										"src": "8515:113:9",
										"text": " @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."
									},
									"id": 1428,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "8642:4:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1300,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1299,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8655:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1428,
												"src": "8647:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1298,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8647:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8646:15:9"
									},
									"returnParameters": {
										"id": 1303,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1302,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1428,
												"src": "8685:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1301,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8685:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8684:9:9"
									},
									"scope": 1756,
									"src": "8633:983:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1463,
										"nodeType": "Block",
										"src": "9849:165:9",
										"statements": [
											{
												"id": 1462,
												"nodeType": "UncheckedBlock",
												"src": "9859:149:9",
												"statements": [
													{
														"assignments": [
															1440
														],
														"declarations": [
															{
																"constant": false,
																"id": 1440,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "9891:6:9",
																"nodeType": "VariableDeclaration",
																"scope": 1462,
																"src": "9883:14:9",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1439,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "9883:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1444,
														"initialValue": {
															"arguments": [
																{
																	"id": 1442,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1431,
																	"src": "9905:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1441,
																"name": "log2",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	1428,
																	1464
																],
																"referencedDeclaration": 1428,
																"src": "9900:4:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 1443,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9900:11:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "9883:28:9"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1460,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1445,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1440,
																"src": "9932:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 1455,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$897",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 1449,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1446,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1434,
																					"src": "9942:8:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$897",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 1447,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 897,
																						"src": "9954:8:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$897_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 1448,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberLocation": "9963:2:9",
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 895,
																					"src": "9954:11:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$897",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "9942:23:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1454,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1452,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 1450,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "9969:1:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"id": 1451,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1440,
																						"src": "9974:6:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "9969:11:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 1453,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1431,
																					"src": "9983:5:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9969:19:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "9942:46:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 1457,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9995:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 1458,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "9942:54:9",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 1456,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9991:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 1459,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "9941:56:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "9932:65:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1438,
														"id": 1461,
														"nodeType": "Return",
														"src": "9925:72:9"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1429,
										"nodeType": "StructuredDocumentation",
										"src": "9622:142:9",
										"text": " @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 1464,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "9778:4:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1435,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1431,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9791:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1464,
												"src": "9783:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1430,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9783:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1434,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "9807:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1464,
												"src": "9798:17:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$897",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 1433,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1432,
														"name": "Rounding",
														"nameLocations": [
															"9798:8:9"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 897,
														"src": "9798:8:9"
													},
													"referencedDeclaration": 897,
													"src": "9798:8:9",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$897",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9782:34:9"
									},
									"returnParameters": {
										"id": 1438,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1437,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1464,
												"src": "9840:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1436,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9840:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9839:9:9"
									},
									"scope": 1756,
									"src": "9769:245:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1592,
										"nodeType": "Block",
										"src": "10201:854:9",
										"statements": [
											{
												"assignments": [
													1473
												],
												"declarations": [
													{
														"constant": false,
														"id": 1473,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "10219:6:9",
														"nodeType": "VariableDeclaration",
														"scope": 1592,
														"src": "10211:14:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1472,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10211:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1475,
												"initialValue": {
													"hexValue": "30",
													"id": 1474,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "10228:1:9",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10211:18:9"
											},
											{
												"id": 1589,
												"nodeType": "UncheckedBlock",
												"src": "10239:787:9",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1480,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1476,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1467,
																"src": "10267:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																},
																"id": 1479,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1477,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10276:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 1478,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10282:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "10276:8:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																}
															},
															"src": "10267:17:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1492,
														"nodeType": "IfStatement",
														"src": "10263:103:9",
														"trueBody": {
															"id": 1491,
															"nodeType": "Block",
															"src": "10286:80:9",
															"statements": [
																{
																	"expression": {
																		"id": 1485,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1481,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1467,
																			"src": "10304:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			},
																			"id": 1484,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 1482,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10313:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3634",
																				"id": 1483,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10319:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_64_by_1",
																					"typeString": "int_const 64"
																				},
																				"value": "64"
																			},
																			"src": "10313:8:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			}
																		},
																		"src": "10304:17:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1486,
																	"nodeType": "ExpressionStatement",
																	"src": "10304:17:9"
																},
																{
																	"expression": {
																		"id": 1489,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1487,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1473,
																			"src": "10339:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 1488,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10349:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "10339:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1490,
																	"nodeType": "ExpressionStatement",
																	"src": "10339:12:9"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1497,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1493,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1467,
																"src": "10383:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																},
																"id": 1496,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1494,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10392:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 1495,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10398:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "10392:8:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																}
															},
															"src": "10383:17:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1509,
														"nodeType": "IfStatement",
														"src": "10379:103:9",
														"trueBody": {
															"id": 1508,
															"nodeType": "Block",
															"src": "10402:80:9",
															"statements": [
																{
																	"expression": {
																		"id": 1502,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1498,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1467,
																			"src": "10420:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			},
																			"id": 1501,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 1499,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10429:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 1500,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10435:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "10429:8:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			}
																		},
																		"src": "10420:17:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1503,
																	"nodeType": "ExpressionStatement",
																	"src": "10420:17:9"
																},
																{
																	"expression": {
																		"id": 1506,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1504,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1473,
																			"src": "10455:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 1505,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10465:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "10455:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1507,
																	"nodeType": "ExpressionStatement",
																	"src": "10455:12:9"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1514,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1510,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1467,
																"src": "10499:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																},
																"id": 1513,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1511,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10508:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 1512,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10514:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "10508:8:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																}
															},
															"src": "10499:17:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1526,
														"nodeType": "IfStatement",
														"src": "10495:103:9",
														"trueBody": {
															"id": 1525,
															"nodeType": "Block",
															"src": "10518:80:9",
															"statements": [
																{
																	"expression": {
																		"id": 1519,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1515,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1467,
																			"src": "10536:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			},
																			"id": 1518,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 1516,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10545:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3136",
																				"id": 1517,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10551:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_16_by_1",
																					"typeString": "int_const 16"
																				},
																				"value": "16"
																			},
																			"src": "10545:8:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			}
																		},
																		"src": "10536:17:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1520,
																	"nodeType": "ExpressionStatement",
																	"src": "10536:17:9"
																},
																{
																	"expression": {
																		"id": 1523,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1521,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1473,
																			"src": "10571:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 1522,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10581:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "10571:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1524,
																	"nodeType": "ExpressionStatement",
																	"src": "10571:12:9"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1531,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1527,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1467,
																"src": "10615:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																},
																"id": 1530,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1528,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10624:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 1529,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10630:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "10624:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																}
															},
															"src": "10615:16:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1543,
														"nodeType": "IfStatement",
														"src": "10611:100:9",
														"trueBody": {
															"id": 1542,
															"nodeType": "Block",
															"src": "10633:78:9",
															"statements": [
																{
																	"expression": {
																		"id": 1536,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1532,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1467,
																			"src": "10651:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			},
																			"id": 1535,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 1533,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10660:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "38",
																				"id": 1534,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10666:1:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_8_by_1",
																					"typeString": "int_const 8"
																				},
																				"value": "8"
																			},
																			"src": "10660:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			}
																		},
																		"src": "10651:16:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1537,
																	"nodeType": "ExpressionStatement",
																	"src": "10651:16:9"
																},
																{
																	"expression": {
																		"id": 1540,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1538,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1473,
																			"src": "10685:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 1539,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10695:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "10685:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1541,
																	"nodeType": "ExpressionStatement",
																	"src": "10685:11:9"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1548,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1544,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1467,
																"src": "10728:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																},
																"id": 1547,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1545,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10737:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 1546,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10743:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "10737:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																}
															},
															"src": "10728:16:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1560,
														"nodeType": "IfStatement",
														"src": "10724:100:9",
														"trueBody": {
															"id": 1559,
															"nodeType": "Block",
															"src": "10746:78:9",
															"statements": [
																{
																	"expression": {
																		"id": 1553,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1549,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1467,
																			"src": "10764:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			},
																			"id": 1552,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 1550,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10773:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "34",
																				"id": 1551,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10779:1:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_4_by_1",
																					"typeString": "int_const 4"
																				},
																				"value": "4"
																			},
																			"src": "10773:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			}
																		},
																		"src": "10764:16:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1554,
																	"nodeType": "ExpressionStatement",
																	"src": "10764:16:9"
																},
																{
																	"expression": {
																		"id": 1557,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1555,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1473,
																			"src": "10798:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 1556,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10808:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "10798:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1558,
																	"nodeType": "ExpressionStatement",
																	"src": "10798:11:9"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1565,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1561,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1467,
																"src": "10841:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																},
																"id": 1564,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1562,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10850:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 1563,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10856:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "10850:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																}
															},
															"src": "10841:16:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1577,
														"nodeType": "IfStatement",
														"src": "10837:100:9",
														"trueBody": {
															"id": 1576,
															"nodeType": "Block",
															"src": "10859:78:9",
															"statements": [
																{
																	"expression": {
																		"id": 1570,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1566,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1467,
																			"src": "10877:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			},
																			"id": 1569,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 1567,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10886:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "32",
																				"id": 1568,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10892:1:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_2_by_1",
																					"typeString": "int_const 2"
																				},
																				"value": "2"
																			},
																			"src": "10886:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			}
																		},
																		"src": "10877:16:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1571,
																	"nodeType": "ExpressionStatement",
																	"src": "10877:16:9"
																},
																{
																	"expression": {
																		"id": 1574,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1572,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1473,
																			"src": "10911:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 1573,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10921:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "10911:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1575,
																	"nodeType": "ExpressionStatement",
																	"src": "10911:11:9"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1582,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1578,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1467,
																"src": "10954:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																},
																"id": 1581,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1579,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10963:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1580,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10969:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10963:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																}
															},
															"src": "10954:16:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1588,
														"nodeType": "IfStatement",
														"src": "10950:66:9",
														"trueBody": {
															"id": 1587,
															"nodeType": "Block",
															"src": "10972:44:9",
															"statements": [
																{
																	"expression": {
																		"id": 1585,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1583,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1473,
																			"src": "10990:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 1584,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11000:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "10990:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1586,
																	"nodeType": "ExpressionStatement",
																	"src": "10990:11:9"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 1590,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1473,
													"src": "11042:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1471,
												"id": 1591,
												"nodeType": "Return",
												"src": "11035:13:9"
											}
										]
									},
									"documentation": {
										"id": 1465,
										"nodeType": "StructuredDocumentation",
										"src": "10020:114:9",
										"text": " @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."
									},
									"id": 1593,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "10148:5:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1468,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1467,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10162:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1593,
												"src": "10154:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1466,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10154:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10153:15:9"
									},
									"returnParameters": {
										"id": 1471,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1470,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1593,
												"src": "10192:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1469,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10192:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10191:9:9"
									},
									"scope": 1756,
									"src": "10139:916:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1628,
										"nodeType": "Block",
										"src": "11290:167:9",
										"statements": [
											{
												"id": 1627,
												"nodeType": "UncheckedBlock",
												"src": "11300:151:9",
												"statements": [
													{
														"assignments": [
															1605
														],
														"declarations": [
															{
																"constant": false,
																"id": 1605,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "11332:6:9",
																"nodeType": "VariableDeclaration",
																"scope": 1627,
																"src": "11324:14:9",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1604,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "11324:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1609,
														"initialValue": {
															"arguments": [
																{
																	"id": 1607,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1596,
																	"src": "11347:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1606,
																"name": "log10",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	1593,
																	1629
																],
																"referencedDeclaration": 1593,
																"src": "11341:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 1608,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11341:12:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "11324:29:9"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1625,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1610,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1605,
																"src": "11374:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 1620,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$897",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 1614,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1611,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1599,
																					"src": "11384:8:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$897",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 1612,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 897,
																						"src": "11396:8:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$897_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 1613,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberLocation": "11405:2:9",
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 895,
																					"src": "11396:11:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$897",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "11384:23:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1619,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1617,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "3130",
																						"id": 1615,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "11411:2:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_10_by_1",
																							"typeString": "int_const 10"
																						},
																						"value": "10"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "**",
																					"rightExpression": {
																						"id": 1616,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1605,
																						"src": "11417:6:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "11411:12:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 1618,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1596,
																					"src": "11426:5:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11411:20:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "11384:47:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 1622,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11438:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 1623,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "11384:55:9",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 1621,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11434:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 1624,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "11383:57:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "11374:66:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1603,
														"id": 1626,
														"nodeType": "Return",
														"src": "11367:73:9"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1594,
										"nodeType": "StructuredDocumentation",
										"src": "11061:143:9",
										"text": " @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 1629,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "11218:5:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1600,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1596,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11232:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1629,
												"src": "11224:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1595,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11224:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1599,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "11248:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1629,
												"src": "11239:17:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$897",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 1598,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1597,
														"name": "Rounding",
														"nameLocations": [
															"11239:8:9"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 897,
														"src": "11239:8:9"
													},
													"referencedDeclaration": 897,
													"src": "11239:8:9",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$897",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11223:34:9"
									},
									"returnParameters": {
										"id": 1603,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1602,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1629,
												"src": "11281:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1601,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11281:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11280:9:9"
									},
									"scope": 1756,
									"src": "11209:248:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1715,
										"nodeType": "Block",
										"src": "11771:600:9",
										"statements": [
											{
												"assignments": [
													1638
												],
												"declarations": [
													{
														"constant": false,
														"id": 1638,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "11789:6:9",
														"nodeType": "VariableDeclaration",
														"scope": 1715,
														"src": "11781:14:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1637,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11781:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1640,
												"initialValue": {
													"hexValue": "30",
													"id": 1639,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "11798:1:9",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11781:18:9"
											},
											{
												"id": 1712,
												"nodeType": "UncheckedBlock",
												"src": "11809:533:9",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1645,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1643,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1641,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1632,
																	"src": "11837:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 1642,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11846:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "11837:12:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1644,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11852:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11837:16:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1655,
														"nodeType": "IfStatement",
														"src": "11833:98:9",
														"trueBody": {
															"id": 1654,
															"nodeType": "Block",
															"src": "11855:76:9",
															"statements": [
																{
																	"expression": {
																		"id": 1648,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1646,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1632,
																			"src": "11873:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 1647,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11883:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "11873:13:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1649,
																	"nodeType": "ExpressionStatement",
																	"src": "11873:13:9"
																},
																{
																	"expression": {
																		"id": 1652,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1650,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1638,
																			"src": "11904:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 1651,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11914:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11904:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1653,
																	"nodeType": "ExpressionStatement",
																	"src": "11904:12:9"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1660,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1658,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1656,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1632,
																	"src": "11948:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 1657,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11957:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "11948:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1659,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11962:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11948:15:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1670,
														"nodeType": "IfStatement",
														"src": "11944:95:9",
														"trueBody": {
															"id": 1669,
															"nodeType": "Block",
															"src": "11965:74:9",
															"statements": [
																{
																	"expression": {
																		"id": 1663,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1661,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1632,
																			"src": "11983:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 1662,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11993:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "11983:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1664,
																	"nodeType": "ExpressionStatement",
																	"src": "11983:12:9"
																},
																{
																	"expression": {
																		"id": 1667,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1665,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1638,
																			"src": "12013:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 1666,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12023:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "12013:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1668,
																	"nodeType": "ExpressionStatement",
																	"src": "12013:11:9"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1675,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1673,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1671,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1632,
																	"src": "12056:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 1672,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12065:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "12056:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1674,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12070:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "12056:15:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1685,
														"nodeType": "IfStatement",
														"src": "12052:95:9",
														"trueBody": {
															"id": 1684,
															"nodeType": "Block",
															"src": "12073:74:9",
															"statements": [
																{
																	"expression": {
																		"id": 1678,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1676,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1632,
																			"src": "12091:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 1677,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12101:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "12091:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1679,
																	"nodeType": "ExpressionStatement",
																	"src": "12091:12:9"
																},
																{
																	"expression": {
																		"id": 1682,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1680,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1638,
																			"src": "12121:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 1681,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12131:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "12121:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1683,
																	"nodeType": "ExpressionStatement",
																	"src": "12121:11:9"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1690,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1688,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1686,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1632,
																	"src": "12164:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 1687,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12173:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "12164:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1689,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12178:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "12164:15:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1700,
														"nodeType": "IfStatement",
														"src": "12160:95:9",
														"trueBody": {
															"id": 1699,
															"nodeType": "Block",
															"src": "12181:74:9",
															"statements": [
																{
																	"expression": {
																		"id": 1693,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1691,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1632,
																			"src": "12199:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 1692,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12209:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "12199:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1694,
																	"nodeType": "ExpressionStatement",
																	"src": "12199:12:9"
																},
																{
																	"expression": {
																		"id": 1697,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1695,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1638,
																			"src": "12229:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 1696,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12239:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "12229:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1698,
																	"nodeType": "ExpressionStatement",
																	"src": "12229:11:9"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1705,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1703,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1701,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1632,
																	"src": "12272:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 1702,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12281:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "12272:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1704,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12285:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "12272:14:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1711,
														"nodeType": "IfStatement",
														"src": "12268:64:9",
														"trueBody": {
															"id": 1710,
															"nodeType": "Block",
															"src": "12288:44:9",
															"statements": [
																{
																	"expression": {
																		"id": 1708,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1706,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1638,
																			"src": "12306:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 1707,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12316:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "12306:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1709,
																	"nodeType": "ExpressionStatement",
																	"src": "12306:11:9"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 1713,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1638,
													"src": "12358:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1636,
												"id": 1714,
												"nodeType": "Return",
												"src": "12351:13:9"
											}
										]
									},
									"documentation": {
										"id": 1630,
										"nodeType": "StructuredDocumentation",
										"src": "11463:240:9",
										"text": " @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."
									},
									"id": 1716,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "11717:6:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1633,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1632,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11732:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1716,
												"src": "11724:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1631,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11724:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11723:15:9"
									},
									"returnParameters": {
										"id": 1636,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1635,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1716,
												"src": "11762:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1634,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11762:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11761:9:9"
									},
									"scope": 1756,
									"src": "11708:663:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1754,
										"nodeType": "Block",
										"src": "12608:174:9",
										"statements": [
											{
												"id": 1753,
												"nodeType": "UncheckedBlock",
												"src": "12618:158:9",
												"statements": [
													{
														"assignments": [
															1728
														],
														"declarations": [
															{
																"constant": false,
																"id": 1728,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "12650:6:9",
																"nodeType": "VariableDeclaration",
																"scope": 1753,
																"src": "12642:14:9",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1727,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "12642:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1732,
														"initialValue": {
															"arguments": [
																{
																	"id": 1730,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1719,
																	"src": "12666:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1729,
																"name": "log256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	1716,
																	1755
																],
																"referencedDeclaration": 1716,
																"src": "12659:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 1731,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12659:13:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "12642:30:9"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1751,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1733,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1728,
																"src": "12693:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 1746,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$897",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 1737,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1734,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1722,
																					"src": "12703:8:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$897",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 1735,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 897,
																						"src": "12715:8:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$897_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 1736,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberLocation": "12724:2:9",
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 895,
																					"src": "12715:11:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$897",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "12703:23:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1745,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1743,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 1738,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "12730:1:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 1741,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 1739,
																									"name": "result",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1728,
																									"src": "12736:6:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "<<",
																								"rightExpression": {
																									"hexValue": "33",
																									"id": 1740,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "12746:1:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_3_by_1",
																										"typeString": "int_const 3"
																									},
																									"value": "3"
																								},
																								"src": "12736:11:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 1742,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "12735:13:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "12730:18:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 1744,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1719,
																					"src": "12751:5:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "12730:26:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "12703:53:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 1748,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12763:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 1749,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "12703:61:9",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 1747,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12759:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 1750,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "12702:63:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "12693:72:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1726,
														"id": 1752,
														"nodeType": "Return",
														"src": "12686:79:9"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1717,
										"nodeType": "StructuredDocumentation",
										"src": "12377:144:9",
										"text": " @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 1755,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "12535:6:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1723,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1719,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "12550:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1755,
												"src": "12542:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1718,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12542:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1722,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "12566:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1755,
												"src": "12557:17:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$897",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 1721,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1720,
														"name": "Rounding",
														"nameLocations": [
															"12557:8:9"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 897,
														"src": "12557:8:9"
													},
													"referencedDeclaration": 897,
													"src": "12557:8:9",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$897",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12541:34:9"
									},
									"returnParameters": {
										"id": 1726,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1725,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1755,
												"src": "12599:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1724,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12599:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12598:9:9"
									},
									"scope": 1756,
									"src": "12526:256:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1757,
							"src": "202:12582:9",
							"usedErrors": []
						}
					],
					"src": "103:12682:9"
				},
				"id": 9
			},
			"@openzeppelin/contracts/utils/math/SignedMath.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/math/SignedMath.sol",
					"exportedSymbols": {
						"SignedMath": [
							1861
						]
					},
					"id": 1862,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1758,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "109:23:10"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SignedMath",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1759,
								"nodeType": "StructuredDocumentation",
								"src": "134:80:10",
								"text": " @dev Standard signed math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 1861,
							"linearizedBaseContracts": [
								1861
							],
							"name": "SignedMath",
							"nameLocation": "223:10:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1776,
										"nodeType": "Block",
										"src": "375:37:10",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"id": 1771,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1769,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1762,
															"src": "392:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 1770,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1764,
															"src": "396:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"src": "392:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 1773,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1764,
														"src": "404:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 1774,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "392:13:10",
													"trueExpression": {
														"id": 1772,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1762,
														"src": "400:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 1768,
												"id": 1775,
												"nodeType": "Return",
												"src": "385:20:10"
											}
										]
									},
									"documentation": {
										"id": 1760,
										"nodeType": "StructuredDocumentation",
										"src": "240:66:10",
										"text": " @dev Returns the largest of two signed numbers."
									},
									"id": 1777,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "320:3:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1765,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1762,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "331:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1777,
												"src": "324:8:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1761,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "324:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1764,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "341:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1777,
												"src": "334:8:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1763,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "334:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "323:20:10"
									},
									"returnParameters": {
										"id": 1768,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1767,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1777,
												"src": "367:6:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1766,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "367:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "366:8:10"
									},
									"scope": 1861,
									"src": "311:101:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1794,
										"nodeType": "Block",
										"src": "554:37:10",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"id": 1789,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1787,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1780,
															"src": "571:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 1788,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1782,
															"src": "575:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"src": "571:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 1791,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1782,
														"src": "583:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 1792,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "571:13:10",
													"trueExpression": {
														"id": 1790,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1780,
														"src": "579:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 1786,
												"id": 1793,
												"nodeType": "Return",
												"src": "564:20:10"
											}
										]
									},
									"documentation": {
										"id": 1778,
										"nodeType": "StructuredDocumentation",
										"src": "418:67:10",
										"text": " @dev Returns the smallest of two signed numbers."
									},
									"id": 1795,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "499:3:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1783,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1780,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "510:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1795,
												"src": "503:8:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1779,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "503:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1782,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "520:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1795,
												"src": "513:8:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1781,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "513:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "502:20:10"
									},
									"returnParameters": {
										"id": 1786,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1785,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1795,
												"src": "546:6:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1784,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "546:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "545:8:10"
									},
									"scope": 1861,
									"src": "490:101:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1838,
										"nodeType": "Block",
										"src": "796:162:10",
										"statements": [
											{
												"assignments": [
													1806
												],
												"declarations": [
													{
														"constant": false,
														"id": 1806,
														"mutability": "mutable",
														"name": "x",
														"nameLocation": "865:1:10",
														"nodeType": "VariableDeclaration",
														"scope": 1838,
														"src": "858:8:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 1805,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "858:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1819,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 1818,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 1809,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1807,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1798,
																	"src": "870:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 1808,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1800,
																	"src": "874:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "870:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 1810,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "869:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 1816,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			},
																			"id": 1813,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1811,
																				"name": "a",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1798,
																				"src": "881:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "^",
																			"rightExpression": {
																				"id": 1812,
																				"name": "b",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1800,
																				"src": "885:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "881:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 1814,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "880:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1815,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "891:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "880:12:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 1817,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "879:14:10",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "869:24:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "858:35:10"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 1836,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1820,
														"name": "x",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1806,
														"src": "910:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 1834,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1828,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 1825,
																						"name": "x",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1806,
																						"src": "930:1:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_int256",
																							"typeString": "int256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_int256",
																							"typeString": "int256"
																						}
																					],
																					"id": 1824,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "922:7:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint256_$",
																						"typeString": "type(uint256)"
																					},
																					"typeName": {
																						"id": 1823,
																						"name": "uint256",
																						"nodeType": "ElementaryTypeName",
																						"src": "922:7:10",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 1826,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "922:10:10",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": ">>",
																			"rightExpression": {
																				"hexValue": "323535",
																				"id": 1827,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "936:3:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_255_by_1",
																					"typeString": "int_const 255"
																				},
																				"value": "255"
																			},
																			"src": "922:17:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 1822,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "915:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 1821,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "915:6:10",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1829,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "915:25:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			},
																			"id": 1832,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1830,
																				"name": "a",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1798,
																				"src": "944:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "^",
																			"rightExpression": {
																				"id": 1831,
																				"name": "b",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1800,
																				"src": "948:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "944:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 1833,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "943:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "915:35:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 1835,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "914:37:10",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "910:41:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 1804,
												"id": 1837,
												"nodeType": "Return",
												"src": "903:48:10"
											}
										]
									},
									"documentation": {
										"id": 1796,
										"nodeType": "StructuredDocumentation",
										"src": "597:126:10",
										"text": " @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."
									},
									"id": 1839,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "737:7:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1801,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1798,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "752:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1839,
												"src": "745:8:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1797,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "745:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1800,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "762:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1839,
												"src": "755:8:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1799,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "755:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "744:20:10"
									},
									"returnParameters": {
										"id": 1804,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1803,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1839,
												"src": "788:6:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1802,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "788:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "787:8:10"
									},
									"scope": 1861,
									"src": "728:230:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1859,
										"nodeType": "Block",
										"src": "1102:158:10",
										"statements": [
											{
												"id": 1858,
												"nodeType": "UncheckedBlock",
												"src": "1112:142:10",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 1851,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1849,
																			"name": "n",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1842,
																			"src": "1227:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 1850,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1232:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1227:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"falseExpression": {
																		"id": 1854,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "-",
																		"prefix": true,
																		"src": "1240:2:10",
																		"subExpression": {
																			"id": 1853,
																			"name": "n",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1842,
																			"src": "1241:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"id": 1855,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "Conditional",
																	"src": "1227:15:10",
																	"trueExpression": {
																		"id": 1852,
																		"name": "n",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1842,
																		"src": "1236:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																],
																"id": 1848,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1219:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 1847,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1219:7:10",
																	"typeDescriptions": {}
																}
															},
															"id": 1856,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1219:24:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1846,
														"id": 1857,
														"nodeType": "Return",
														"src": "1212:31:10"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1840,
										"nodeType": "StructuredDocumentation",
										"src": "964:78:10",
										"text": " @dev Returns the absolute unsigned value of a signed value."
									},
									"id": 1860,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "abs",
									"nameLocation": "1056:3:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1843,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1842,
												"mutability": "mutable",
												"name": "n",
												"nameLocation": "1067:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1860,
												"src": "1060:8:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1841,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1060:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1059:10:10"
									},
									"returnParameters": {
										"id": 1846,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1845,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1860,
												"src": "1093:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1844,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1093:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1092:9:10"
									},
									"scope": 1861,
									"src": "1047:213:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1862,
							"src": "215:1047:10",
							"usedErrors": []
						}
					],
					"src": "109:1154:10"
				},
				"id": 10
			},
			"contracts/ERC-721AWRefund.sol": {
				"ast": {
					"absolutePath": "contracts/ERC-721AWRefund.sol",
					"exportedSymbols": {
						"Address": [
							603
						],
						"ApprovalCallerNotOwnerNorApproved": [
							2131
						],
						"ApprovalQueryForNonexistentToken": [
							2133
						],
						"ApprovalToCurrentOwner": [
							2137
						],
						"ApproveToCaller": [
							2135
						],
						"BalanceQueryForZeroAddress": [
							2139
						],
						"Context": [
							625
						],
						"ERC165": [
							878
						],
						"ERC721A": [
							3441
						],
						"IERC165": [
							890
						],
						"IERC721": [
							228
						],
						"IERC721Metadata": [
							273
						],
						"IERC721R": [
							3480
						],
						"IERC721Receiver": [
							246
						],
						"Math": [
							1756
						],
						"MintToZeroAddress": [
							2141
						],
						"MintZeroQuantity": [
							2143
						],
						"Ownable": [
							112
						],
						"OwnerQueryForNonexistentToken": [
							2145
						],
						"SignedMath": [
							1861
						],
						"Strings": [
							854
						],
						"TransferCallerNotOwnerNorApproved": [
							2147
						],
						"TransferFromIncorrectOwner": [
							2149
						],
						"TransferToNonERC721ReceiverImplementer": [
							2151
						],
						"TransferToZeroAddress": [
							2153
						],
						"URIQueryForNonexistentToken": [
							2155
						],
						"Web3Builders": [
							2120
						]
					},
					"id": 2121,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1863,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".9"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:11"
						},
						{
							"absolutePath": "https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol",
							"file": "https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol",
							"id": 1864,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2121,
							"sourceUnit": 3442,
							"src": "56:85:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/IERC721R.sol",
							"file": "https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/IERC721R.sol",
							"id": 1865,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2121,
							"sourceUnit": 3481,
							"src": "142:86:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 1866,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2121,
							"sourceUnit": 113,
							"src": "229:52:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1867,
										"name": "ERC721A",
										"nameLocations": [
											"308:7:11"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 3441,
										"src": "308:7:11"
									},
									"id": 1868,
									"nodeType": "InheritanceSpecifier",
									"src": "308:7:11"
								},
								{
									"baseName": {
										"id": 1869,
										"name": "Ownable",
										"nameLocations": [
											"317:7:11"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 112,
										"src": "317:7:11"
									},
									"id": 1870,
									"nodeType": "InheritanceSpecifier",
									"src": "317:7:11"
								}
							],
							"canonicalName": "Web3Builders",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 2120,
							"linearizedBaseContracts": [
								2120,
								112,
								3441,
								273,
								228,
								878,
								890,
								625
							],
							"name": "Web3Builders",
							"nameLocation": "292:12:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"functionSelector": "6817c76c",
									"id": 1873,
									"mutability": "constant",
									"name": "mintPrice",
									"nameLocation": "356:9:11",
									"nodeType": "VariableDeclaration",
									"scope": 2120,
									"src": "332:43:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1871,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "332:7:11",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 1872,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "368:7:11",
										"subdenomination": "ether",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1000000000000000000_by_1",
											"typeString": "int_const 1000000000000000000"
										},
										"value": "1"
									},
									"visibility": "public"
								},
								{
									"constant": true,
									"functionSelector": "d304c4bc",
									"id": 1876,
									"mutability": "constant",
									"name": "maxMintPerUser",
									"nameLocation": "405:14:11",
									"nodeType": "VariableDeclaration",
									"scope": 2120,
									"src": "381:42:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1874,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "381:7:11",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "35",
										"id": 1875,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "422:1:11",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_5_by_1",
											"typeString": "int_const 5"
										},
										"value": "5"
									},
									"visibility": "public"
								},
								{
									"constant": true,
									"functionSelector": "c285e107",
									"id": 1879,
									"mutability": "constant",
									"name": "maxMintSupply",
									"nameLocation": "453:13:11",
									"nodeType": "VariableDeclaration",
									"scope": 2120,
									"src": "429:43:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1877,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "429:7:11",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "313030",
										"id": 1878,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "469:3:11",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_100_by_1",
											"typeString": "int_const 100"
										},
										"value": "100"
									},
									"visibility": "public"
								},
								{
									"constant": true,
									"functionSelector": "a6a3b5b4",
									"id": 1882,
									"mutability": "constant",
									"name": "refundPeriod",
									"nameLocation": "500:12:11",
									"nodeType": "VariableDeclaration",
									"scope": 2120,
									"src": "479:45:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1880,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "479:4:11",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "33",
										"id": 1881,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "515:9:11",
										"subdenomination": "minutes",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_180_by_1",
											"typeString": "int_const 180"
										},
										"value": "3"
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "6f1d10ce",
									"id": 1884,
									"mutability": "mutable",
									"name": "refundEndTimeStamp",
									"nameLocation": "545:18:11",
									"nodeType": "VariableDeclaration",
									"scope": 2120,
									"src": "530:33:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1883,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "530:7:11",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "0cb61f6c",
									"id": 1886,
									"mutability": "mutable",
									"name": "refundAddress",
									"nameLocation": "585:13:11",
									"nodeType": "VariableDeclaration",
									"scope": 2120,
									"src": "570:28:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1885,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "570:7:11",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "d64297f9",
									"id": 1890,
									"mutability": "mutable",
									"name": "refundEndTimestamps",
									"nameLocation": "686:19:11",
									"nodeType": "VariableDeclaration",
									"scope": 2120,
									"src": "651:54:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
										"typeString": "mapping(uint256 => uint256)"
									},
									"typeName": {
										"id": 1889,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 1887,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "659:7:11",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "651:27:11",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
											"typeString": "mapping(uint256 => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 1888,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "670:7:11",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "c23fcdef",
									"id": 1894,
									"mutability": "mutable",
									"name": "hasRefunded",
									"nameLocation": "847:11:11",
									"nodeType": "VariableDeclaration",
									"scope": 2120,
									"src": "815:43:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
										"typeString": "mapping(uint256 => bool)"
									},
									"typeName": {
										"id": 1893,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 1891,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "823:7:11",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "815:24:11",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
											"typeString": "mapping(uint256 => bool)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 1892,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "834:4:11",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 1915,
										"nodeType": "Block",
										"src": "910:107:11",
										"statements": [
											{
												"expression": {
													"id": 1906,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1901,
														"name": "refundAddress",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1886,
														"src": "920:13:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1904,
																"name": "this",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967268,
																"src": "944:4:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_Web3Builders_$2120",
																	"typeString": "contract Web3Builders"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_Web3Builders_$2120",
																	"typeString": "contract Web3Builders"
																}
															],
															"id": 1903,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "936:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1902,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "936:7:11",
																"typeDescriptions": {}
															}
														},
														"id": 1905,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "936:13:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "920:29:11",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1907,
												"nodeType": "ExpressionStatement",
												"src": "920:29:11"
											},
											{
												"expression": {
													"id": 1913,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1908,
														"name": "refundEndTimeStamp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1884,
														"src": "959:18:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1912,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 1909,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "980:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 1910,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "986:9:11",
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "980:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"id": 1911,
															"name": "refundPeriod",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1882,
															"src": "998:12:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "980:30:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "959:51:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1914,
												"nodeType": "ExpressionStatement",
												"src": "959:51:11"
											}
										]
									},
									"id": 1916,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"hexValue": "576562334275696c64657273",
													"id": 1897,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "887:14:11",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_1004c1d9990429669ae2c5ec43c7a709589bd7344c94a4f9f761e5cf1f38803e",
														"typeString": "literal_string \"Web3Builders\""
													},
													"value": "Web3Builders"
												},
												{
													"hexValue": "574533",
													"id": 1898,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "903:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_fb172ab5297752b4f047d6e0afaaec3e9dc8f1d0eb870dde0a09b2745d1647bc",
														"typeString": "literal_string \"WE3\""
													},
													"value": "WE3"
												}
											],
											"id": 1899,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 1896,
												"name": "ERC721A",
												"nameLocations": [
													"879:7:11"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 3441,
												"src": "879:7:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "879:30:11"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1895,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "876:2:11"
									},
									"returnParameters": {
										"id": 1900,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "910:0:11"
									},
									"scope": 2120,
									"src": "865:152:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										2556
									],
									"body": {
										"id": 1924,
										"nodeType": "Block",
										"src": "1090:80:11",
										"statements": [
											{
												"expression": {
													"hexValue": "697066733a2f2f516d62736552544a5753734c666873695777754232523745744e39335478666f614d7a31533546587473464555422f",
													"id": 1922,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1107:56:11",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_bad8c5b7513efa3484aff4751176e1559e99e0aac6100695fa19afecc4f7431d",
														"typeString": "literal_string \"ipfs://QmbseRTJWSsLfhsiWwuB2R7EtN93TxfoaMz1S5FXtsFEUB/\""
													},
													"value": "ipfs://QmbseRTJWSsLfhsiWwuB2R7EtN93TxfoaMz1S5FXtsFEUB/"
												},
												"functionReturnParameters": 1921,
												"id": 1923,
												"nodeType": "Return",
												"src": "1100:63:11"
											}
										]
									},
									"id": 1925,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_baseURI",
									"nameLocation": "1032:8:11",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1918,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1057:8:11"
									},
									"parameters": {
										"id": 1917,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1040:2:11"
									},
									"returnParameters": {
										"id": 1921,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1920,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1925,
												"src": "1075:13:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1919,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1075:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1074:15:11"
									},
									"scope": 2120,
									"src": "1023:147:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1993,
										"nodeType": "Block",
										"src": "1227:491:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1936,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1931,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1245:3:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1932,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1249:5:11",
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "1245:9:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1935,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1933,
																	"name": "mintPrice",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1873,
																	"src": "1258:9:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1934,
																	"name": "quantity",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1927,
																	"src": "1270:8:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1258:20:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1245:33:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f7420656e6f7567682066756e64732e",
															"id": 1937,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1280:19:11",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_6837646b67057675f05a4cd997fee2159138b7fc7f6519669f46d4a090b51e94",
																"typeString": "literal_string \"Not enough funds.\""
															},
															"value": "Not enough funds."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_6837646b67057675f05a4cd997fee2159138b7fc7f6519669f46d4a090b51e94",
																"typeString": "literal_string \"Not enough funds.\""
															}
														],
														"id": 1930,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1237:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1938,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1237:63:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1939,
												"nodeType": "ExpressionStatement",
												"src": "1237:63:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1948,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1946,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"expression": {
																				"id": 1942,
																				"name": "msg",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967281,
																				"src": "1332:3:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_message",
																					"typeString": "msg"
																				}
																			},
																			"id": 1943,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "1336:6:11",
																			"memberName": "sender",
																			"nodeType": "MemberAccess",
																			"src": "1332:10:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 1941,
																		"name": "_numberMinted",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2348,
																		"src": "1318:13:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
																			"typeString": "function (address) view returns (uint256)"
																		}
																	},
																	"id": 1944,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1318:26:11",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"id": 1945,
																	"name": "quantity",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1927,
																	"src": "1347:8:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1318:37:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 1947,
																"name": "maxMintPerUser",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1876,
																"src": "1359:14:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1318:55:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4d696e74204c696d6974",
															"id": 1949,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1375:12:11",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_6a14f05d16a70fa284e3ee3d9e80d48c30ad433f09385779fd774cb37f61992c",
																"typeString": "literal_string \"Mint Limit\""
															},
															"value": "Mint Limit"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_6a14f05d16a70fa284e3ee3d9e80d48c30ad433f09385779fd774cb37f61992c",
																"typeString": "literal_string \"Mint Limit\""
															}
														],
														"id": 1940,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1310:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1950,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1310:78:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1951,
												"nodeType": "ExpressionStatement",
												"src": "1310:78:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1956,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1953,
																	"name": "_totalMinted",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2272,
																	"src": "1406:12:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 1954,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1406:14:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 1955,
																"name": "maxMintSupply",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1879,
																"src": "1424:13:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1406:31:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "537570706c79204578636565642e20536f6c64206f75742e",
															"id": 1957,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1439:26:11",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0a40b5826414dc662e0159670f2c2438e459989a4ed127048ed58d338cd8012a",
																"typeString": "literal_string \"Supply Exceed. Sold out.\""
															},
															"value": "Supply Exceed. Sold out."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0a40b5826414dc662e0159670f2c2438e459989a4ed127048ed58d338cd8012a",
																"typeString": "literal_string \"Supply Exceed. Sold out.\""
															}
														],
														"id": 1952,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1398:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1958,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1398:68:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1959,
												"nodeType": "ExpressionStatement",
												"src": "1398:68:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1961,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1487:3:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1962,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1491:6:11",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1487:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1963,
															"name": "quantity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1927,
															"src": "1499:8:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1960,
														"name": "_safeMint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2787,
															2805
														],
														"referencedDeclaration": 2787,
														"src": "1477:9:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1964,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1477:31:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1965,
												"nodeType": "ExpressionStatement",
												"src": "1477:31:11"
											},
											{
												"expression": {
													"id": 1971,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1966,
														"name": "refundEndTimeStamp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1884,
														"src": "1518:18:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1970,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 1967,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "1539:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 1968,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1545:9:11",
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "1539:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"id": 1969,
															"name": "refundPeriod",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1882,
															"src": "1557:12:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1539:30:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1518:51:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1972,
												"nodeType": "ExpressionStatement",
												"src": "1518:51:11"
											},
											{
												"body": {
													"id": 1991,
													"nodeType": "Block",
													"src": "1643:68:11",
													"statements": [
														{
															"expression": {
																"id": 1989,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1985,
																		"name": "refundEndTimestamps",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1890,
																		"src": "1657:19:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																			"typeString": "mapping(uint256 => uint256)"
																		}
																	},
																	"id": 1987,
																	"indexExpression": {
																		"id": 1986,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1974,
																		"src": "1677:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "1657:22:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 1988,
																	"name": "refundEndTimeStamp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1884,
																	"src": "1682:18:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1657:43:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1990,
															"nodeType": "ExpressionStatement",
															"src": "1657:43:11"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1981,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1979,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1974,
														"src": "1619:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1980,
														"name": "_currentIndex",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2188,
														"src": "1623:13:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1619:17:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1992,
												"initializationExpression": {
													"assignments": [
														1974
													],
													"declarations": [
														{
															"constant": false,
															"id": 1974,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "1591:1:11",
															"nodeType": "VariableDeclaration",
															"scope": 1992,
															"src": "1583:9:11",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1973,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1583:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1978,
													"initialValue": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1977,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1975,
															"name": "_currentIndex",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2188,
															"src": "1593:13:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"id": 1976,
															"name": "quantity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1927,
															"src": "1609:8:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1593:24:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "1583:34:11"
												},
												"loopExpression": {
													"expression": {
														"id": 1983,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "1638:3:11",
														"subExpression": {
															"id": 1982,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1974,
															"src": "1638:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1984,
													"nodeType": "ExpressionStatement",
													"src": "1638:3:11"
												},
												"nodeType": "ForStatement",
												"src": "1579:132:11"
											}
										]
									},
									"functionSelector": "31c864e8",
									"id": 1994,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeMint",
									"nameLocation": "1185:8:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1928,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1927,
												"mutability": "mutable",
												"name": "quantity",
												"nameLocation": "1202:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 1994,
												"src": "1194:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1926,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1194:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1193:18:11"
									},
									"returnParameters": {
										"id": 1929,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1227:0:11"
									},
									"scope": 2120,
									"src": "1176:542:11",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2049,
										"nodeType": "Block",
										"src": "1766:496:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2005,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 2000,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967292,
																	"src": "1784:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 2001,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1790:9:11",
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "1784:15:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 2003,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1996,
																		"src": "1820:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 2002,
																	"name": "getRefundDeadline",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2069,
																	"src": "1802:17:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256) view returns (uint256)"
																	}
																},
																"id": 2004,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1802:26:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1784:44:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "526566756e6420506572696f6420457870697265642e",
															"id": 2006,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1830:24:11",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5d44bf458cb5c329d8f1e1f54ef008fff7d3ca1323049a1b56efa26acabe1561",
																"typeString": "literal_string \"Refund Period Expired.\""
															},
															"value": "Refund Period Expired."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5d44bf458cb5c329d8f1e1f54ef008fff7d3ca1323049a1b56efa26acabe1561",
																"typeString": "literal_string \"Refund Period Expired.\""
															}
														],
														"id": 1999,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1776:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2007,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1776:79:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2008,
												"nodeType": "ExpressionStatement",
												"src": "1776:79:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 2015,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 2010,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1904:3:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 2011,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1908:6:11",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "1904:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 2013,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1996,
																		"src": "1926:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 2012,
																	"name": "ownerOf",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2484,
																	"src": "1918:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																		"typeString": "function (uint256) view returns (address)"
																	}
																},
																"id": 2014,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1918:16:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1904:30:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f7420796f7572204e4654",
															"id": 2016,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1936:14:11",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_eb2116119b22855e950d27bdfd12d7b042d78f02cb28736b6189fd010760f8f2",
																"typeString": "literal_string \"Not your NFT\""
															},
															"value": "Not your NFT"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_eb2116119b22855e950d27bdfd12d7b042d78f02cb28736b6189fd010760f8f2",
																"typeString": "literal_string \"Not your NFT\""
															}
														],
														"id": 2009,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1896:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2017,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1896:55:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2018,
												"nodeType": "ExpressionStatement",
												"src": "1896:55:11"
											},
											{
												"assignments": [
													2020
												],
												"declarations": [
													{
														"constant": false,
														"id": 2020,
														"mutability": "mutable",
														"name": "refundAmount",
														"nameLocation": "1969:12:11",
														"nodeType": "VariableDeclaration",
														"scope": 2049,
														"src": "1961:20:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2019,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1961:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2024,
												"initialValue": {
													"arguments": [
														{
															"id": 2022,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1996,
															"src": "2000:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2021,
														"name": "getRefundAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2086,
														"src": "1984:15:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) view returns (uint256)"
														}
													},
													"id": 2023,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1984:24:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1961:47:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 2026,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2066:3:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 2027,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2070:6:11",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2066:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2028,
															"name": "refundAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1886,
															"src": "2078:13:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2029,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1996,
															"src": "2093:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2025,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3142,
														"src": "2056:9:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 2030,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2056:45:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2031,
												"nodeType": "ExpressionStatement",
												"src": "2056:45:11"
											},
											{
												"expression": {
													"id": 2036,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 2032,
															"name": "hasRefunded",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1894,
															"src": "2137:11:11",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																"typeString": "mapping(uint256 => bool)"
															}
														},
														"id": 2034,
														"indexExpression": {
															"id": 2033,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1996,
															"src": "2149:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2137:20:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 2035,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2160:4:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "2137:27:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2037,
												"nodeType": "ExpressionStatement",
												"src": "2137:27:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 2043,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "2229:3:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 2044,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2233:6:11",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "2229:10:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 2042,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2221:8:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_payable_$",
																	"typeString": "type(address payable)"
																},
																"typeName": {
																	"id": 2041,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2221:8:11",
																	"stateMutability": "payable",
																	"typeDescriptions": {}
																}
															},
															"id": 2045,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2221:19:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 2046,
															"name": "refundAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2020,
															"src": "2242:12:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 2038,
															"name": "Address",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 603,
															"src": "2203:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_Address_$603_$",
																"typeString": "type(library Address)"
															}
														},
														"id": 2040,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2211:9:11",
														"memberName": "sendValue",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 325,
														"src": "2203:17:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_payable_$_t_uint256_$returns$__$",
															"typeString": "function (address payable,uint256)"
														}
													},
													"id": 2047,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2203:52:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2048,
												"nodeType": "ExpressionStatement",
												"src": "2203:52:11"
											}
										]
									},
									"functionSelector": "278ecde1",
									"id": 2050,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "refund",
									"nameLocation": "1733:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1997,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1996,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1748:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 2050,
												"src": "1740:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1995,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1740:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1739:17:11"
									},
									"returnParameters": {
										"id": 1998,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1766:0:11"
									},
									"scope": 2120,
									"src": "1724:538:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 2068,
										"nodeType": "Block",
										"src": "2341:119:11",
										"statements": [
											{
												"condition": {
													"baseExpression": {
														"id": 2057,
														"name": "hasRefunded",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1894,
														"src": "2354:11:11",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
															"typeString": "mapping(uint256 => bool)"
														}
													},
													"id": 2059,
													"indexExpression": {
														"id": 2058,
														"name": "tokenId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2052,
														"src": "2366:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "2354:20:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2063,
												"nodeType": "IfStatement",
												"src": "2351:58:11",
												"trueBody": {
													"id": 2062,
													"nodeType": "Block",
													"src": "2376:33:11",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 2060,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2397:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 2056,
															"id": 2061,
															"nodeType": "Return",
															"src": "2390:8:11"
														}
													]
												}
											},
											{
												"expression": {
													"baseExpression": {
														"id": 2064,
														"name": "refundEndTimestamps",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1890,
														"src": "2425:19:11",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
															"typeString": "mapping(uint256 => uint256)"
														}
													},
													"id": 2066,
													"indexExpression": {
														"id": 2065,
														"name": "tokenId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2052,
														"src": "2445:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "2425:28:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2056,
												"id": 2067,
												"nodeType": "Return",
												"src": "2418:35:11"
											}
										]
									},
									"functionSelector": "e5496fc8",
									"id": 2069,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getRefundDeadline",
									"nameLocation": "2277:17:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2053,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2052,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2303:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 2069,
												"src": "2295:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2051,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2295:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2294:17:11"
									},
									"returnParameters": {
										"id": 2056,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2055,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2069,
												"src": "2332:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2054,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2332:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2331:9:11"
									},
									"scope": 2120,
									"src": "2268:192:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2085,
										"nodeType": "Block",
										"src": "2537:100:11",
										"statements": [
											{
												"condition": {
													"baseExpression": {
														"id": 2076,
														"name": "hasRefunded",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1894,
														"src": "2550:11:11",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
															"typeString": "mapping(uint256 => bool)"
														}
													},
													"id": 2078,
													"indexExpression": {
														"id": 2077,
														"name": "tokenId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2071,
														"src": "2562:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "2550:20:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2082,
												"nodeType": "IfStatement",
												"src": "2547:58:11",
												"trueBody": {
													"id": 2081,
													"nodeType": "Block",
													"src": "2572:33:11",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 2079,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2593:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 2075,
															"id": 2080,
															"nodeType": "Return",
															"src": "2586:8:11"
														}
													]
												}
											},
											{
												"expression": {
													"id": 2083,
													"name": "mintPrice",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1873,
													"src": "2621:9:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2075,
												"id": 2084,
												"nodeType": "Return",
												"src": "2614:16:11"
											}
										]
									},
									"functionSelector": "04cd5294",
									"id": 2086,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getRefundAmount",
									"nameLocation": "2475:15:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2072,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2071,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2499:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 2086,
												"src": "2491:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2070,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2491:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2490:17:11"
									},
									"returnParameters": {
										"id": 2075,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2074,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2086,
												"src": "2528:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2073,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2528:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2527:9:11"
									},
									"scope": 2120,
									"src": "2466:171:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2118,
										"nodeType": "Block",
										"src": "2682:239:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2095,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 2092,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967292,
																	"src": "2700:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 2093,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2706:9:11",
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "2700:15:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 2094,
																"name": "refundEndTimeStamp",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1884,
																"src": "2718:18:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2700:36:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "49742773206e6f7420706173742074686520726566756e6420706572696f64",
															"id": 2096,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2738:33:11",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_724aa4705af32b8e74bc39ce7211a23369ff686bea75161374d1c30d7570994d",
																"typeString": "literal_string \"It's not past the refund period\""
															},
															"value": "It's not past the refund period"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_724aa4705af32b8e74bc39ce7211a23369ff686bea75161374d1c30d7570994d",
																"typeString": "literal_string \"It's not past the refund period\""
															}
														],
														"id": 2091,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2692:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2097,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2692:80:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2098,
												"nodeType": "ExpressionStatement",
												"src": "2692:80:11"
											},
											{
												"assignments": [
													2100
												],
												"declarations": [
													{
														"constant": false,
														"id": 2100,
														"mutability": "mutable",
														"name": "balance",
														"nameLocation": "2790:7:11",
														"nodeType": "VariableDeclaration",
														"scope": 2118,
														"src": "2782:15:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2099,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2782:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2106,
												"initialValue": {
													"expression": {
														"arguments": [
															{
																"id": 2103,
																"name": "this",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967268,
																"src": "2808:4:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_Web3Builders_$2120",
																	"typeString": "contract Web3Builders"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_Web3Builders_$2120",
																	"typeString": "contract Web3Builders"
																}
															],
															"id": 2102,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2800:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 2101,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2800:7:11",
																"typeDescriptions": {}
															}
														},
														"id": 2104,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2800:13:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 2105,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "2814:7:11",
													"memberName": "balance",
													"nodeType": "MemberAccess",
													"src": "2800:21:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2782:39:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 2112,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "2893:3:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 2113,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2897:6:11",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "2893:10:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 2111,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2885:8:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_payable_$",
																	"typeString": "type(address payable)"
																},
																"typeName": {
																	"id": 2110,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2885:8:11",
																	"stateMutability": "payable",
																	"typeDescriptions": {}
																}
															},
															"id": 2114,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2885:19:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 2115,
															"name": "balance",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2100,
															"src": "2906:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 2107,
															"name": "Address",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 603,
															"src": "2867:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_Address_$603_$",
																"typeString": "type(library Address)"
															}
														},
														"id": 2109,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2875:9:11",
														"memberName": "sendValue",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 325,
														"src": "2867:17:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_payable_$_t_uint256_$returns$__$",
															"typeString": "function (address payable,uint256)"
														}
													},
													"id": 2116,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2867:47:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2117,
												"nodeType": "ExpressionStatement",
												"src": "2867:47:11"
											}
										]
									},
									"functionSelector": "3ccfd60b",
									"id": 2119,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2089,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2088,
												"name": "onlyOwner",
												"nameLocations": [
													"2672:9:11"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "2672:9:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "2672:9:11"
										}
									],
									"name": "withdraw",
									"nameLocation": "2652:8:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2087,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2660:2:11"
									},
									"returnParameters": {
										"id": 2090,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2682:0:11"
									},
									"scope": 2120,
									"src": "2643:278:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2121,
							"src": "283:2640:11",
							"usedErrors": [
								2131,
								2133,
								2135,
								2137,
								2139,
								2141,
								2143,
								2145,
								2147,
								2149,
								2151,
								2153,
								2155
							]
						}
					],
					"src": "32:3149:11"
				},
				"id": 11
			},
			"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol": {
				"ast": {
					"absolutePath": "https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/ERC721A.sol",
					"exportedSymbols": {
						"Address": [
							603
						],
						"ApprovalCallerNotOwnerNorApproved": [
							2131
						],
						"ApprovalQueryForNonexistentToken": [
							2133
						],
						"ApprovalToCurrentOwner": [
							2137
						],
						"ApproveToCaller": [
							2135
						],
						"BalanceQueryForZeroAddress": [
							2139
						],
						"Context": [
							625
						],
						"ERC165": [
							878
						],
						"ERC721A": [
							3441
						],
						"IERC165": [
							890
						],
						"IERC721": [
							228
						],
						"IERC721Metadata": [
							273
						],
						"IERC721Receiver": [
							246
						],
						"Math": [
							1756
						],
						"MintToZeroAddress": [
							2141
						],
						"MintZeroQuantity": [
							2143
						],
						"OwnerQueryForNonexistentToken": [
							2145
						],
						"SignedMath": [
							1861
						],
						"Strings": [
							854
						],
						"TransferCallerNotOwnerNorApproved": [
							2147
						],
						"TransferFromIncorrectOwner": [
							2149
						],
						"TransferToNonERC721ReceiverImplementer": [
							2151
						],
						"TransferToZeroAddress": [
							2153
						],
						"URIQueryForNonexistentToken": [
							2155
						]
					},
					"id": 3442,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2122,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "107:23:12"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"id": 2123,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3442,
							"sourceUnit": 229,
							"src": "132:58:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
							"id": 2124,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3442,
							"sourceUnit": 247,
							"src": "191:66:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
							"file": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
							"id": 2125,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3442,
							"sourceUnit": 274,
							"src": "258:77:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
							"file": "@openzeppelin/contracts/utils/Address.sol",
							"id": 2126,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3442,
							"sourceUnit": 604,
							"src": "336:51:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "@openzeppelin/contracts/utils/Context.sol",
							"id": 2127,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3442,
							"sourceUnit": 626,
							"src": "388:51:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
							"file": "@openzeppelin/contracts/utils/Strings.sol",
							"id": 2128,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3442,
							"sourceUnit": 855,
							"src": "440:51:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/ERC165.sol",
							"file": "@openzeppelin/contracts/utils/introspection/ERC165.sol",
							"id": 2129,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3442,
							"sourceUnit": 879,
							"src": "492:64:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"errorSelector": "cfb3b942",
							"id": 2131,
							"name": "ApprovalCallerNotOwnerNorApproved",
							"nameLocation": "564:33:12",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 2130,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "597:2:12"
							},
							"src": "558:42:12"
						},
						{
							"errorSelector": "cf4700e4",
							"id": 2133,
							"name": "ApprovalQueryForNonexistentToken",
							"nameLocation": "607:32:12",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 2132,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "639:2:12"
							},
							"src": "601:41:12"
						},
						{
							"errorSelector": "b06307db",
							"id": 2135,
							"name": "ApproveToCaller",
							"nameLocation": "649:15:12",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 2134,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "664:2:12"
							},
							"src": "643:24:12"
						},
						{
							"errorSelector": "943f7b8c",
							"id": 2137,
							"name": "ApprovalToCurrentOwner",
							"nameLocation": "674:22:12",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 2136,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "696:2:12"
							},
							"src": "668:31:12"
						},
						{
							"errorSelector": "8f4eb604",
							"id": 2139,
							"name": "BalanceQueryForZeroAddress",
							"nameLocation": "706:26:12",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 2138,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "732:2:12"
							},
							"src": "700:35:12"
						},
						{
							"errorSelector": "2e076300",
							"id": 2141,
							"name": "MintToZeroAddress",
							"nameLocation": "742:17:12",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 2140,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "759:2:12"
							},
							"src": "736:26:12"
						},
						{
							"errorSelector": "b562e8dd",
							"id": 2143,
							"name": "MintZeroQuantity",
							"nameLocation": "769:16:12",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 2142,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "785:2:12"
							},
							"src": "763:25:12"
						},
						{
							"errorSelector": "df2d9b42",
							"id": 2145,
							"name": "OwnerQueryForNonexistentToken",
							"nameLocation": "795:29:12",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 2144,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "824:2:12"
							},
							"src": "789:38:12"
						},
						{
							"errorSelector": "59c896be",
							"id": 2147,
							"name": "TransferCallerNotOwnerNorApproved",
							"nameLocation": "834:33:12",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 2146,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "867:2:12"
							},
							"src": "828:42:12"
						},
						{
							"errorSelector": "a1148100",
							"id": 2149,
							"name": "TransferFromIncorrectOwner",
							"nameLocation": "877:26:12",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 2148,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "903:2:12"
							},
							"src": "871:35:12"
						},
						{
							"errorSelector": "d1a57ed6",
							"id": 2151,
							"name": "TransferToNonERC721ReceiverImplementer",
							"nameLocation": "913:38:12",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 2150,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "951:2:12"
							},
							"src": "907:47:12"
						},
						{
							"errorSelector": "ea553b34",
							"id": 2153,
							"name": "TransferToZeroAddress",
							"nameLocation": "961:21:12",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 2152,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "982:2:12"
							},
							"src": "955:30:12"
						},
						{
							"errorSelector": "a14c4b50",
							"id": 2155,
							"name": "URIQueryForNonexistentToken",
							"nameLocation": "992:27:12",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 2154,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "1019:2:12"
							},
							"src": "986:36:12"
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 2157,
										"name": "Context",
										"nameLocations": [
											"1535:7:12"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 625,
										"src": "1535:7:12"
									},
									"id": 2158,
									"nodeType": "InheritanceSpecifier",
									"src": "1535:7:12"
								},
								{
									"baseName": {
										"id": 2159,
										"name": "ERC165",
										"nameLocations": [
											"1544:6:12"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 878,
										"src": "1544:6:12"
									},
									"id": 2160,
									"nodeType": "InheritanceSpecifier",
									"src": "1544:6:12"
								},
								{
									"baseName": {
										"id": 2161,
										"name": "IERC721",
										"nameLocations": [
											"1552:7:12"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 228,
										"src": "1552:7:12"
									},
									"id": 2162,
									"nodeType": "InheritanceSpecifier",
									"src": "1552:7:12"
								},
								{
									"baseName": {
										"id": 2163,
										"name": "IERC721Metadata",
										"nameLocations": [
											"1561:15:12"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 273,
										"src": "1561:15:12"
									},
									"id": 2164,
									"nodeType": "InheritanceSpecifier",
									"src": "1561:15:12"
								}
							],
							"canonicalName": "ERC721A",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2156,
								"nodeType": "StructuredDocumentation",
								"src": "1024:490:12",
								"text": " @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension. Built to optimize for lower gas during batch mints.\n Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\n Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256)."
							},
							"fullyImplemented": true,
							"id": 3441,
							"linearizedBaseContracts": [
								3441,
								273,
								228,
								878,
								890,
								625
							],
							"name": "ERC721A",
							"nameLocation": "1524:7:12",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 2167,
									"libraryName": {
										"id": 2165,
										"name": "Address",
										"nameLocations": [
											"1589:7:12"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 603,
										"src": "1589:7:12"
									},
									"nodeType": "UsingForDirective",
									"src": "1583:26:12",
									"typeName": {
										"id": 2166,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1601:7:12",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"global": false,
									"id": 2170,
									"libraryName": {
										"id": 2168,
										"name": "Strings",
										"nameLocations": [
											"1620:7:12"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 854,
										"src": "1620:7:12"
									},
									"nodeType": "UsingForDirective",
									"src": "1614:26:12",
									"typeName": {
										"id": 2169,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1632:7:12",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"canonicalName": "ERC721A.TokenOwnership",
									"id": 2177,
									"members": [
										{
											"constant": false,
											"id": 2172,
											"mutability": "mutable",
											"name": "addr",
											"nameLocation": "1781:4:12",
											"nodeType": "VariableDeclaration",
											"scope": 2177,
											"src": "1773:12:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2171,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1773:7:12",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2174,
											"mutability": "mutable",
											"name": "startTimestamp",
											"nameLocation": "1894:14:12",
											"nodeType": "VariableDeclaration",
											"scope": 2177,
											"src": "1887:21:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 2173,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "1887:6:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2176,
											"mutability": "mutable",
											"name": "burned",
											"nameLocation": "1969:6:12",
											"nodeType": "VariableDeclaration",
											"scope": 2177,
											"src": "1964:11:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 2175,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1964:4:12",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "TokenOwnership",
									"nameLocation": "1711:14:12",
									"nodeType": "StructDefinition",
									"scope": 3441,
									"src": "1704:278:12",
									"visibility": "public"
								},
								{
									"canonicalName": "ERC721A.AddressData",
									"id": 2186,
									"members": [
										{
											"constant": false,
											"id": 2179,
											"mutability": "mutable",
											"name": "balance",
											"nameLocation": "2137:7:12",
											"nodeType": "VariableDeclaration",
											"scope": 2186,
											"src": "2130:14:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 2178,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "2130:6:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2181,
											"mutability": "mutable",
											"name": "numberMinted",
											"nameLocation": "2236:12:12",
											"nodeType": "VariableDeclaration",
											"scope": 2186,
											"src": "2229:19:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 2180,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "2229:6:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2183,
											"mutability": "mutable",
											"name": "numberBurned",
											"nameLocation": "2340:12:12",
											"nodeType": "VariableDeclaration",
											"scope": 2186,
											"src": "2333:19:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 2182,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "2333:6:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2185,
											"mutability": "mutable",
											"name": "aux",
											"nameLocation": "2567:3:12",
											"nodeType": "VariableDeclaration",
											"scope": 2186,
											"src": "2560:10:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 2184,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "2560:6:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "AddressData",
									"nameLocation": "2053:11:12",
									"nodeType": "StructDefinition",
									"scope": 3441,
									"src": "2046:531:12",
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 2188,
									"mutability": "mutable",
									"name": "_currentIndex",
									"nameLocation": "2651:13:12",
									"nodeType": "VariableDeclaration",
									"scope": 3441,
									"src": "2634:30:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2187,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2634:7:12",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 2190,
									"mutability": "mutable",
									"name": "_burnCounter",
									"nameLocation": "2724:12:12",
									"nodeType": "VariableDeclaration",
									"scope": 3441,
									"src": "2707:29:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2189,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2707:7:12",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 2192,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "2777:5:12",
									"nodeType": "VariableDeclaration",
									"scope": 3441,
									"src": "2761:21:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 2191,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "2761:6:12",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 2194,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "2825:7:12",
									"nodeType": "VariableDeclaration",
									"scope": 3441,
									"src": "2809:23:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 2193,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "2809:6:12",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 2199,
									"mutability": "mutable",
									"name": "_ownerships",
									"nameLocation": "3055:11:12",
									"nodeType": "VariableDeclaration",
									"scope": 3441,
									"src": "3011:55:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$2177_storage_$",
										"typeString": "mapping(uint256 => struct ERC721A.TokenOwnership)"
									},
									"typeName": {
										"id": 2198,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 2195,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "3019:7:12",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "3011:34:12",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$2177_storage_$",
											"typeString": "mapping(uint256 => struct ERC721A.TokenOwnership)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 2197,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 2196,
												"name": "TokenOwnership",
												"nameLocations": [
													"3030:14:12"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2177,
												"src": "3030:14:12"
											},
											"referencedDeclaration": 2177,
											"src": "3030:14:12",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_TokenOwnership_$2177_storage_ptr",
												"typeString": "struct ERC721A.TokenOwnership"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 2204,
									"mutability": "mutable",
									"name": "_addressData",
									"nameLocation": "3159:12:12",
									"nodeType": "VariableDeclaration",
									"scope": 3441,
									"src": "3118:53:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$2186_storage_$",
										"typeString": "mapping(address => struct ERC721A.AddressData)"
									},
									"typeName": {
										"id": 2203,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 2200,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "3126:7:12",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "3118:31:12",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$2186_storage_$",
											"typeString": "mapping(address => struct ERC721A.AddressData)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 2202,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 2201,
												"name": "AddressData",
												"nameLocations": [
													"3137:11:12"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2186,
												"src": "3137:11:12"
											},
											"referencedDeclaration": 2186,
											"src": "3137:11:12",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_AddressData_$2186_storage_ptr",
												"typeString": "struct ERC721A.AddressData"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 2208,
									"mutability": "mutable",
									"name": "_tokenApprovals",
									"nameLocation": "3264:15:12",
									"nodeType": "VariableDeclaration",
									"scope": 3441,
									"src": "3227:52:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
										"typeString": "mapping(uint256 => address)"
									},
									"typeName": {
										"id": 2207,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 2205,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "3235:7:12",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "3227:27:12",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
											"typeString": "mapping(uint256 => address)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 2206,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "3246:7:12",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 2214,
									"mutability": "mutable",
									"name": "_operatorApprovals",
									"nameLocation": "3388:18:12",
									"nodeType": "VariableDeclaration",
									"scope": 3441,
									"src": "3334:72:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
										"typeString": "mapping(address => mapping(address => bool))"
									},
									"typeName": {
										"id": 2213,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 2209,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "3342:7:12",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "3334:44:12",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
											"typeString": "mapping(address => mapping(address => bool))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 2212,
											"keyName": "",
											"keyNameLocation": "-1:-1:-1",
											"keyType": {
												"id": 2210,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "3361:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "3353:24:12",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
												"typeString": "mapping(address => bool)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 2211,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "3372:4:12",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											}
										}
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2234,
										"nodeType": "Block",
										"src": "3469:98:12",
										"statements": [
											{
												"expression": {
													"id": 2223,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2221,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2192,
														"src": "3479:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2222,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2216,
														"src": "3487:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "3479:13:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 2224,
												"nodeType": "ExpressionStatement",
												"src": "3479:13:12"
											},
											{
												"expression": {
													"id": 2227,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2225,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2194,
														"src": "3502:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2226,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2218,
														"src": "3512:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "3502:17:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 2228,
												"nodeType": "ExpressionStatement",
												"src": "3502:17:12"
											},
											{
												"expression": {
													"id": 2232,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2229,
														"name": "_currentIndex",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2188,
														"src": "3529:13:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 2230,
															"name": "_startTokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2244,
															"src": "3545:13:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																"typeString": "function () view returns (uint256)"
															}
														},
														"id": 2231,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3545:15:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3529:31:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2233,
												"nodeType": "ExpressionStatement",
												"src": "3529:31:12"
											}
										]
									},
									"id": 2235,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2219,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2216,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "3439:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2235,
												"src": "3425:19:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2215,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3425:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2218,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "3460:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 2235,
												"src": "3446:21:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2217,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3446:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3424:44:12"
									},
									"returnParameters": {
										"id": 2220,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3469:0:12"
									},
									"scope": 3441,
									"src": "3413:154:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2243,
										"nodeType": "Block",
										"src": "3724:25:12",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 2241,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3741:1:12",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 2240,
												"id": 2242,
												"nodeType": "Return",
												"src": "3734:8:12"
											}
										]
									},
									"documentation": {
										"id": 2236,
										"nodeType": "StructuredDocumentation",
										"src": "3573:81:12",
										"text": " To change the starting tokenId, please override this function."
									},
									"id": 2244,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_startTokenId",
									"nameLocation": "3668:13:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2237,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3681:2:12"
									},
									"returnParameters": {
										"id": 2240,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2239,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2244,
												"src": "3715:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2238,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3715:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3714:9:12"
									},
									"scope": 3441,
									"src": "3659:90:12",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2258,
										"nodeType": "Block",
										"src": "3931:244:12",
										"statements": [
											{
												"id": 2257,
												"nodeType": "UncheckedBlock",
												"src": "4081:88:12",
												"statements": [
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2255,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2252,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2250,
																	"name": "_currentIndex",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2188,
																	"src": "4112:13:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 2251,
																	"name": "_burnCounter",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2190,
																	"src": "4128:12:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4112:28:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 2253,
																	"name": "_startTokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2244,
																	"src": "4143:13:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 2254,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4143:15:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4112:46:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2249,
														"id": 2256,
														"nodeType": "Return",
														"src": "4105:53:12"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2245,
										"nodeType": "StructuredDocumentation",
										"src": "3755:118:12",
										"text": " @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens."
									},
									"functionSelector": "18160ddd",
									"id": 2259,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "3887:11:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2246,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3898:2:12"
									},
									"returnParameters": {
										"id": 2249,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2248,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2259,
												"src": "3922:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2247,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3922:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3921:9:12"
									},
									"scope": 3441,
									"src": "3878:297:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2271,
										"nodeType": "Block",
										"src": "4319:221:12",
										"statements": [
											{
												"id": 2270,
												"nodeType": "UncheckedBlock",
												"src": "4461:73:12",
												"statements": [
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2268,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2265,
																"name": "_currentIndex",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2188,
																"src": "4492:13:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 2266,
																	"name": "_startTokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2244,
																	"src": "4508:13:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 2267,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4508:15:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4492:31:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2264,
														"id": 2269,
														"nodeType": "Return",
														"src": "4485:38:12"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2260,
										"nodeType": "StructuredDocumentation",
										"src": "4181:77:12",
										"text": " Returns the total amount of tokens minted in the contract."
									},
									"id": 2272,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_totalMinted",
									"nameLocation": "4272:12:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2261,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4284:2:12"
									},
									"returnParameters": {
										"id": 2264,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2263,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2272,
												"src": "4310:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2262,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4310:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4309:9:12"
									},
									"scope": 3441,
									"src": "4263:277:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										877,
										889
									],
									"body": {
										"id": 2302,
										"nodeType": "Block",
										"src": "4715:192:12",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2300,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 2295,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															},
															"id": 2288,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2283,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2275,
																"src": "4744:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 2285,
																			"name": "IERC721",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 228,
																			"src": "4764:7:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC721_$228_$",
																				"typeString": "type(contract IERC721)"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_type$_t_contract$_IERC721_$228_$",
																				"typeString": "type(contract IERC721)"
																			}
																		],
																		"id": 2284,
																		"name": "type",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967269,
																		"src": "4759:4:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 2286,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4759:13:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_meta_type_t_contract$_IERC721_$228",
																		"typeString": "type(contract IERC721)"
																	}
																},
																"id": 2287,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "4773:11:12",
																"memberName": "interfaceId",
																"nodeType": "MemberAccess",
																"src": "4759:25:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"src": "4744:40:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "||",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															},
															"id": 2294,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2289,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2275,
																"src": "4800:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 2291,
																			"name": "IERC721Metadata",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 273,
																			"src": "4820:15:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC721Metadata_$273_$",
																				"typeString": "type(contract IERC721Metadata)"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_type$_t_contract$_IERC721Metadata_$273_$",
																				"typeString": "type(contract IERC721Metadata)"
																			}
																		],
																		"id": 2290,
																		"name": "type",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967269,
																		"src": "4815:4:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 2292,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4815:21:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_meta_type_t_contract$_IERC721Metadata_$273",
																		"typeString": "type(contract IERC721Metadata)"
																	}
																},
																"id": 2293,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "4837:11:12",
																"memberName": "interfaceId",
																"nodeType": "MemberAccess",
																"src": "4815:33:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"src": "4800:48:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "4744:104:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"arguments": [
															{
																"id": 2298,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2275,
																"src": "4888:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															],
															"expression": {
																"id": 2296,
																"name": "super",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967271,
																"src": "4864:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_super$_ERC721A_$3441_$",
																	"typeString": "type(contract super ERC721A)"
																}
															},
															"id": 2297,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4870:17:12",
															"memberName": "supportsInterface",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 877,
															"src": "4864:23:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_bytes4_$returns$_t_bool_$",
																"typeString": "function (bytes4) view returns (bool)"
															}
														},
														"id": 2299,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4864:36:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4744:156:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2282,
												"id": 2301,
												"nodeType": "Return",
												"src": "4725:175:12"
											}
										]
									},
									"documentation": {
										"id": 2273,
										"nodeType": "StructuredDocumentation",
										"src": "4546:56:12",
										"text": " @dev See {IERC165-supportsInterface}."
									},
									"functionSelector": "01ffc9a7",
									"id": 2303,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "4616:17:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2279,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 2277,
												"name": "ERC165",
												"nameLocations": [
													"4683:6:12"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 878,
												"src": "4683:6:12"
											},
											{
												"id": 2278,
												"name": "IERC165",
												"nameLocations": [
													"4691:7:12"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 890,
												"src": "4691:7:12"
											}
										],
										"src": "4674:25:12"
									},
									"parameters": {
										"id": 2276,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2275,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "4641:11:12",
												"nodeType": "VariableDeclaration",
												"scope": 2303,
												"src": "4634:18:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 2274,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "4634:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4633:20:12"
									},
									"returnParameters": {
										"id": 2282,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2281,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2303,
												"src": "4709:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2280,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4709:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4708:6:12"
									},
									"scope": 3441,
									"src": "4607:300:12",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										153
									],
									"body": {
										"id": 2330,
										"nodeType": "Block",
										"src": "5039:130:12",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 2317,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2312,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2306,
														"src": "5053:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 2315,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5070:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 2314,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5062:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 2313,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5062:7:12",
																"typeDescriptions": {}
															}
														},
														"id": 2316,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5062:10:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5053:19:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2321,
												"nodeType": "IfStatement",
												"src": "5049:60:12",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 2318,
															"name": "BalanceQueryForZeroAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2139,
															"src": "5081:26:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 2319,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5081:28:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 2320,
													"nodeType": "RevertStatement",
													"src": "5074:35:12"
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"baseExpression": {
																	"id": 2324,
																	"name": "_addressData",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2204,
																	"src": "5134:12:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$2186_storage_$",
																		"typeString": "mapping(address => struct ERC721A.AddressData storage ref)"
																	}
																},
																"id": 2326,
																"indexExpression": {
																	"id": 2325,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2306,
																	"src": "5147:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "5134:19:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressData_$2186_storage",
																	"typeString": "struct ERC721A.AddressData storage ref"
																}
															},
															"id": 2327,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5154:7:12",
															"memberName": "balance",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2179,
															"src": "5134:27:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														],
														"id": 2323,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "5126:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint256_$",
															"typeString": "type(uint256)"
														},
														"typeName": {
															"id": 2322,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5126:7:12",
															"typeDescriptions": {}
														}
													},
													"id": 2328,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5126:36:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2311,
												"id": 2329,
												"nodeType": "Return",
												"src": "5119:43:12"
											}
										]
									},
									"documentation": {
										"id": 2304,
										"nodeType": "StructuredDocumentation",
										"src": "4913:48:12",
										"text": " @dev See {IERC721-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 2331,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "4975:9:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2308,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5012:8:12"
									},
									"parameters": {
										"id": 2307,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2306,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4993:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2331,
												"src": "4985:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2305,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4985:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4984:15:12"
									},
									"returnParameters": {
										"id": 2311,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2310,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2331,
												"src": "5030:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2309,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5030:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5029:9:12"
									},
									"scope": 3441,
									"src": "4966:203:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2347,
										"nodeType": "Block",
										"src": "5316:65:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"baseExpression": {
																	"id": 2341,
																	"name": "_addressData",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2204,
																	"src": "5341:12:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$2186_storage_$",
																		"typeString": "mapping(address => struct ERC721A.AddressData storage ref)"
																	}
																},
																"id": 2343,
																"indexExpression": {
																	"id": 2342,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2334,
																	"src": "5354:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "5341:19:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressData_$2186_storage",
																	"typeString": "struct ERC721A.AddressData storage ref"
																}
															},
															"id": 2344,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5361:12:12",
															"memberName": "numberMinted",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2181,
															"src": "5341:32:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														],
														"id": 2340,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "5333:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint256_$",
															"typeString": "type(uint256)"
														},
														"typeName": {
															"id": 2339,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5333:7:12",
															"typeDescriptions": {}
														}
													},
													"id": 2345,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5333:41:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2338,
												"id": 2346,
												"nodeType": "Return",
												"src": "5326:48:12"
											}
										]
									},
									"documentation": {
										"id": 2332,
										"nodeType": "StructuredDocumentation",
										"src": "5175:66:12",
										"text": " Returns the number of tokens minted by `owner`."
									},
									"id": 2348,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_numberMinted",
									"nameLocation": "5255:13:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2335,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2334,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5277:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2348,
												"src": "5269:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2333,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5269:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5268:15:12"
									},
									"returnParameters": {
										"id": 2338,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2337,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2348,
												"src": "5307:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2336,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5307:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5306:9:12"
									},
									"scope": 3441,
									"src": "5246:135:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2364,
										"nodeType": "Block",
										"src": "5544:65:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"baseExpression": {
																	"id": 2358,
																	"name": "_addressData",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2204,
																	"src": "5569:12:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$2186_storage_$",
																		"typeString": "mapping(address => struct ERC721A.AddressData storage ref)"
																	}
																},
																"id": 2360,
																"indexExpression": {
																	"id": 2359,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2351,
																	"src": "5582:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "5569:19:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressData_$2186_storage",
																	"typeString": "struct ERC721A.AddressData storage ref"
																}
															},
															"id": 2361,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5589:12:12",
															"memberName": "numberBurned",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2183,
															"src": "5569:32:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														],
														"id": 2357,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "5561:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint256_$",
															"typeString": "type(uint256)"
														},
														"typeName": {
															"id": 2356,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5561:7:12",
															"typeDescriptions": {}
														}
													},
													"id": 2362,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5561:41:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2355,
												"id": 2363,
												"nodeType": "Return",
												"src": "5554:48:12"
											}
										]
									},
									"documentation": {
										"id": 2349,
										"nodeType": "StructuredDocumentation",
										"src": "5387:82:12",
										"text": " Returns the number of tokens burned by or on behalf of `owner`."
									},
									"id": 2365,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_numberBurned",
									"nameLocation": "5483:13:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2352,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2351,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5505:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2365,
												"src": "5497:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2350,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5497:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5496:15:12"
									},
									"returnParameters": {
										"id": 2355,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2354,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2365,
												"src": "5535:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2353,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5535:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5534:9:12"
									},
									"scope": 3441,
									"src": "5474:135:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2378,
										"nodeType": "Block",
										"src": "5785:47:12",
										"statements": [
											{
												"expression": {
													"expression": {
														"baseExpression": {
															"id": 2373,
															"name": "_addressData",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2204,
															"src": "5802:12:12",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$2186_storage_$",
																"typeString": "mapping(address => struct ERC721A.AddressData storage ref)"
															}
														},
														"id": 2375,
														"indexExpression": {
															"id": 2374,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2368,
															"src": "5815:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "5802:19:12",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_AddressData_$2186_storage",
															"typeString": "struct ERC721A.AddressData storage ref"
														}
													},
													"id": 2376,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "5822:3:12",
													"memberName": "aux",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 2185,
													"src": "5802:23:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"functionReturnParameters": 2372,
												"id": 2377,
												"nodeType": "Return",
												"src": "5795:30:12"
											}
										]
									},
									"documentation": {
										"id": 2366,
										"nodeType": "StructuredDocumentation",
										"src": "5615:102:12",
										"text": " Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used)."
									},
									"id": 2379,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getAux",
									"nameLocation": "5731:7:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2369,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2368,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5747:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2379,
												"src": "5739:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2367,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5739:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5738:15:12"
									},
									"returnParameters": {
										"id": 2372,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2371,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2379,
												"src": "5777:6:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 2370,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "5777:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5776:8:12"
									},
									"scope": 3441,
									"src": "5722:110:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2394,
										"nodeType": "Block",
										"src": "6067:46:12",
										"statements": [
											{
												"expression": {
													"id": 2392,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 2387,
																"name": "_addressData",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2204,
																"src": "6077:12:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$2186_storage_$",
																	"typeString": "mapping(address => struct ERC721A.AddressData storage ref)"
																}
															},
															"id": 2389,
															"indexExpression": {
																"id": 2388,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2382,
																"src": "6090:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "6077:19:12",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_AddressData_$2186_storage",
																"typeString": "struct ERC721A.AddressData storage ref"
															}
														},
														"id": 2390,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "6097:3:12",
														"memberName": "aux",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2185,
														"src": "6077:23:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2391,
														"name": "aux",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2384,
														"src": "6103:3:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"src": "6077:29:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"id": 2393,
												"nodeType": "ExpressionStatement",
												"src": "6077:29:12"
											}
										]
									},
									"documentation": {
										"id": 2380,
										"nodeType": "StructuredDocumentation",
										"src": "5838:171:12",
										"text": " Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\n If there are multiple variables, please pack them into a uint64."
									},
									"id": 2395,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setAux",
									"nameLocation": "6023:7:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2385,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2382,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "6039:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2395,
												"src": "6031:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2381,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6031:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2384,
												"mutability": "mutable",
												"name": "aux",
												"nameLocation": "6053:3:12",
												"nodeType": "VariableDeclaration",
												"scope": 2395,
												"src": "6046:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 2383,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "6046:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6030:27:12"
									},
									"returnParameters": {
										"id": 2386,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6067:0:12"
									},
									"scope": 3441,
									"src": "6014:99:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2468,
										"nodeType": "Block",
										"src": "6394:999:12",
										"statements": [
											{
												"assignments": [
													2405
												],
												"declarations": [
													{
														"constant": false,
														"id": 2405,
														"mutability": "mutable",
														"name": "curr",
														"nameLocation": "6412:4:12",
														"nodeType": "VariableDeclaration",
														"scope": 2468,
														"src": "6404:12:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2404,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6404:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2407,
												"initialValue": {
													"id": 2406,
													"name": "tokenId",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2398,
													"src": "6419:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6404:22:12"
											},
											{
												"id": 2464,
												"nodeType": "UncheckedBlock",
												"src": "6437:902:12",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2415,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2411,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 2408,
																		"name": "_startTokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2244,
																		"src": "6465:13:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																			"typeString": "function () view returns (uint256)"
																		}
																	},
																	"id": 2409,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6465:15:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"id": 2410,
																	"name": "curr",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2405,
																	"src": "6484:4:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6465:23:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2414,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2412,
																	"name": "curr",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2405,
																	"src": "6492:4:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 2413,
																	"name": "_currentIndex",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2188,
																	"src": "6499:13:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6492:20:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "6465:47:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2463,
														"nodeType": "IfStatement",
														"src": "6461:868:12",
														"trueBody": {
															"id": 2462,
															"nodeType": "Block",
															"src": "6514:815:12",
															"statements": [
																{
																	"assignments": [
																		2418
																	],
																	"declarations": [
																		{
																			"constant": false,
																			"id": 2418,
																			"mutability": "mutable",
																			"name": "ownership",
																			"nameLocation": "6554:9:12",
																			"nodeType": "VariableDeclaration",
																			"scope": 2462,
																			"src": "6532:31:12",
																			"stateVariable": false,
																			"storageLocation": "memory",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_TokenOwnership_$2177_memory_ptr",
																				"typeString": "struct ERC721A.TokenOwnership"
																			},
																			"typeName": {
																				"id": 2417,
																				"nodeType": "UserDefinedTypeName",
																				"pathNode": {
																					"id": 2416,
																					"name": "TokenOwnership",
																					"nameLocations": [
																						"6532:14:12"
																					],
																					"nodeType": "IdentifierPath",
																					"referencedDeclaration": 2177,
																					"src": "6532:14:12"
																				},
																				"referencedDeclaration": 2177,
																				"src": "6532:14:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_TokenOwnership_$2177_storage_ptr",
																					"typeString": "struct ERC721A.TokenOwnership"
																				}
																			},
																			"visibility": "internal"
																		}
																	],
																	"id": 2422,
																	"initialValue": {
																		"baseExpression": {
																			"id": 2419,
																			"name": "_ownerships",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2199,
																			"src": "6566:11:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$2177_storage_$",
																				"typeString": "mapping(uint256 => struct ERC721A.TokenOwnership storage ref)"
																			}
																		},
																		"id": 2421,
																		"indexExpression": {
																			"id": 2420,
																			"name": "curr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2405,
																			"src": "6578:4:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "6566:17:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_TokenOwnership_$2177_storage",
																			"typeString": "struct ERC721A.TokenOwnership storage ref"
																		}
																	},
																	"nodeType": "VariableDeclarationStatement",
																	"src": "6532:51:12"
																},
																{
																	"condition": {
																		"id": 2425,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "!",
																		"prefix": true,
																		"src": "6605:17:12",
																		"subExpression": {
																			"expression": {
																				"id": 2423,
																				"name": "ownership",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2418,
																				"src": "6606:9:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_TokenOwnership_$2177_memory_ptr",
																					"typeString": "struct ERC721A.TokenOwnership memory"
																				}
																			},
																			"id": 2424,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "6616:6:12",
																			"memberName": "burned",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 2176,
																			"src": "6606:16:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 2461,
																	"nodeType": "IfStatement",
																	"src": "6601:714:12",
																	"trueBody": {
																		"id": 2460,
																		"nodeType": "Block",
																		"src": "6624:691:12",
																		"statements": [
																			{
																				"condition": {
																					"commonType": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					"id": 2432,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"expression": {
																							"id": 2426,
																							"name": "ownership",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2418,
																							"src": "6650:9:12",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_TokenOwnership_$2177_memory_ptr",
																								"typeString": "struct ERC721A.TokenOwnership memory"
																							}
																						},
																						"id": 2427,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberLocation": "6660:4:12",
																						"memberName": "addr",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 2172,
																						"src": "6650:14:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "!=",
																					"rightExpression": {
																						"arguments": [
																							{
																								"hexValue": "30",
																								"id": 2430,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "number",
																								"lValueRequested": false,
																								"nodeType": "Literal",
																								"src": "6676:1:12",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_0_by_1",
																									"typeString": "int_const 0"
																								},
																								"value": "0"
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_rational_0_by_1",
																									"typeString": "int_const 0"
																								}
																							],
																							"id": 2429,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "6668:7:12",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_address_$",
																								"typeString": "type(address)"
																							},
																							"typeName": {
																								"id": 2428,
																								"name": "address",
																								"nodeType": "ElementaryTypeName",
																								"src": "6668:7:12",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 2431,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"nameLocations": [],
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "6668:10:12",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"src": "6650:28:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				"id": 2436,
																				"nodeType": "IfStatement",
																				"src": "6646:99:12",
																				"trueBody": {
																					"id": 2435,
																					"nodeType": "Block",
																					"src": "6680:65:12",
																					"statements": [
																						{
																							"expression": {
																								"id": 2433,
																								"name": "ownership",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 2418,
																								"src": "6713:9:12",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_TokenOwnership_$2177_memory_ptr",
																									"typeString": "struct ERC721A.TokenOwnership memory"
																								}
																							},
																							"functionReturnParameters": 2403,
																							"id": 2434,
																							"nodeType": "Return",
																							"src": "6706:16:12"
																						}
																					]
																				}
																			},
																			{
																				"body": {
																					"id": 2458,
																					"nodeType": "Block",
																					"src": "7055:242:12",
																					"statements": [
																						{
																							"expression": {
																								"id": 2439,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "UnaryOperation",
																								"operator": "--",
																								"prefix": false,
																								"src": "7081:6:12",
																								"subExpression": {
																									"id": 2438,
																									"name": "curr",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 2405,
																									"src": "7081:4:12",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"id": 2440,
																							"nodeType": "ExpressionStatement",
																							"src": "7081:6:12"
																						},
																						{
																							"expression": {
																								"id": 2445,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftHandSide": {
																									"id": 2441,
																									"name": "ownership",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 2418,
																									"src": "7113:9:12",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_TokenOwnership_$2177_memory_ptr",
																										"typeString": "struct ERC721A.TokenOwnership memory"
																									}
																								},
																								"nodeType": "Assignment",
																								"operator": "=",
																								"rightHandSide": {
																									"baseExpression": {
																										"id": 2442,
																										"name": "_ownerships",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 2199,
																										"src": "7125:11:12",
																										"typeDescriptions": {
																											"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$2177_storage_$",
																											"typeString": "mapping(uint256 => struct ERC721A.TokenOwnership storage ref)"
																										}
																									},
																									"id": 2444,
																									"indexExpression": {
																										"id": 2443,
																										"name": "curr",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 2405,
																										"src": "7137:4:12",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "IndexAccess",
																									"src": "7125:17:12",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_TokenOwnership_$2177_storage",
																										"typeString": "struct ERC721A.TokenOwnership storage ref"
																									}
																								},
																								"src": "7113:29:12",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_TokenOwnership_$2177_memory_ptr",
																									"typeString": "struct ERC721A.TokenOwnership memory"
																								}
																							},
																							"id": 2446,
																							"nodeType": "ExpressionStatement",
																							"src": "7113:29:12"
																						},
																						{
																							"condition": {
																								"commonType": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								},
																								"id": 2453,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"expression": {
																										"id": 2447,
																										"name": "ownership",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 2418,
																										"src": "7172:9:12",
																										"typeDescriptions": {
																											"typeIdentifier": "t_struct$_TokenOwnership_$2177_memory_ptr",
																											"typeString": "struct ERC721A.TokenOwnership memory"
																										}
																									},
																									"id": 2448,
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"memberLocation": "7182:4:12",
																									"memberName": "addr",
																									"nodeType": "MemberAccess",
																									"referencedDeclaration": 2172,
																									"src": "7172:14:12",
																									"typeDescriptions": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "!=",
																								"rightExpression": {
																									"arguments": [
																										{
																											"hexValue": "30",
																											"id": 2451,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": true,
																											"kind": "number",
																											"lValueRequested": false,
																											"nodeType": "Literal",
																											"src": "7198:1:12",
																											"typeDescriptions": {
																												"typeIdentifier": "t_rational_0_by_1",
																												"typeString": "int_const 0"
																											},
																											"value": "0"
																										}
																									],
																									"expression": {
																										"argumentTypes": [
																											{
																												"typeIdentifier": "t_rational_0_by_1",
																												"typeString": "int_const 0"
																											}
																										],
																										"id": 2450,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"lValueRequested": false,
																										"nodeType": "ElementaryTypeNameExpression",
																										"src": "7190:7:12",
																										"typeDescriptions": {
																											"typeIdentifier": "t_type$_t_address_$",
																											"typeString": "type(address)"
																										},
																										"typeName": {
																											"id": 2449,
																											"name": "address",
																											"nodeType": "ElementaryTypeName",
																											"src": "7190:7:12",
																											"typeDescriptions": {}
																										}
																									},
																									"id": 2452,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "typeConversion",
																									"lValueRequested": false,
																									"nameLocations": [],
																									"names": [],
																									"nodeType": "FunctionCall",
																									"src": "7190:10:12",
																									"tryCall": false,
																									"typeDescriptions": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								},
																								"src": "7172:28:12",
																								"typeDescriptions": {
																									"typeIdentifier": "t_bool",
																									"typeString": "bool"
																								}
																							},
																							"id": 2457,
																							"nodeType": "IfStatement",
																							"src": "7168:107:12",
																							"trueBody": {
																								"id": 2456,
																								"nodeType": "Block",
																								"src": "7202:73:12",
																								"statements": [
																									{
																										"expression": {
																											"id": 2454,
																											"name": "ownership",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 2418,
																											"src": "7239:9:12",
																											"typeDescriptions": {
																												"typeIdentifier": "t_struct$_TokenOwnership_$2177_memory_ptr",
																												"typeString": "struct ERC721A.TokenOwnership memory"
																											}
																										},
																										"functionReturnParameters": 2403,
																										"id": 2455,
																										"nodeType": "Return",
																										"src": "7232:16:12"
																									}
																								]
																							}
																						}
																					]
																				},
																				"condition": {
																					"hexValue": "74727565",
																					"id": 2437,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "bool",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "7049:4:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					"value": "true"
																				},
																				"id": 2459,
																				"nodeType": "WhileStatement",
																				"src": "7042:255:12"
																			}
																		]
																	}
																}
															]
														}
													}
												]
											},
											{
												"errorCall": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 2465,
														"name": "OwnerQueryForNonexistentToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2145,
														"src": "7355:29:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_error_pure$__$returns$__$",
															"typeString": "function () pure"
														}
													},
													"id": 2466,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7355:31:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2467,
												"nodeType": "RevertStatement",
												"src": "7348:38:12"
											}
										]
									},
									"documentation": {
										"id": 2396,
										"nodeType": "StructuredDocumentation",
										"src": "6119:185:12",
										"text": " Gas spent here starts off proportional to the maximum mint batch size.\n It gradually moves to O(1) as tokens get transferred around in the collection over time."
									},
									"id": 2469,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_ownershipOf",
									"nameLocation": "6318:12:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2399,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2398,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "6339:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 2469,
												"src": "6331:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2397,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6331:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6330:17:12"
									},
									"returnParameters": {
										"id": 2403,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2402,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2469,
												"src": "6371:21:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_TokenOwnership_$2177_memory_ptr",
													"typeString": "struct ERC721A.TokenOwnership"
												},
												"typeName": {
													"id": 2401,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2400,
														"name": "TokenOwnership",
														"nameLocations": [
															"6371:14:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2177,
														"src": "6371:14:12"
													},
													"referencedDeclaration": 2177,
													"src": "6371:14:12",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_TokenOwnership_$2177_storage_ptr",
														"typeString": "struct ERC721A.TokenOwnership"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6370:23:12"
									},
									"scope": 3441,
									"src": "6309:1084:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										161
									],
									"body": {
										"id": 2483,
										"nodeType": "Block",
										"src": "7523:50:12",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [
															{
																"id": 2479,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2472,
																"src": "7553:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 2478,
															"name": "_ownershipOf",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2469,
															"src": "7540:12:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_struct$_TokenOwnership_$2177_memory_ptr_$",
																"typeString": "function (uint256) view returns (struct ERC721A.TokenOwnership memory)"
															}
														},
														"id": 2480,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7540:21:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_TokenOwnership_$2177_memory_ptr",
															"typeString": "struct ERC721A.TokenOwnership memory"
														}
													},
													"id": 2481,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "7562:4:12",
													"memberName": "addr",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 2172,
													"src": "7540:26:12",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 2477,
												"id": 2482,
												"nodeType": "Return",
												"src": "7533:33:12"
											}
										]
									},
									"documentation": {
										"id": 2470,
										"nodeType": "StructuredDocumentation",
										"src": "7399:46:12",
										"text": " @dev See {IERC721-ownerOf}."
									},
									"functionSelector": "6352211e",
									"id": 2484,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "7459:7:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2474,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "7496:8:12"
									},
									"parameters": {
										"id": 2473,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2472,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "7475:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 2484,
												"src": "7467:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2471,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7467:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7466:17:12"
									},
									"returnParameters": {
										"id": 2477,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2476,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2484,
												"src": "7514:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2475,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7514:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7513:9:12"
									},
									"scope": 3441,
									"src": "7450:123:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										258
									],
									"body": {
										"id": 2493,
										"nodeType": "Block",
										"src": "7704:29:12",
										"statements": [
											{
												"expression": {
													"id": 2491,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2192,
													"src": "7721:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 2490,
												"id": 2492,
												"nodeType": "Return",
												"src": "7714:12:12"
											}
										]
									},
									"documentation": {
										"id": 2485,
										"nodeType": "StructuredDocumentation",
										"src": "7579:51:12",
										"text": " @dev See {IERC721Metadata-name}."
									},
									"functionSelector": "06fdde03",
									"id": 2494,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "7644:4:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2487,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "7671:8:12"
									},
									"parameters": {
										"id": 2486,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7648:2:12"
									},
									"returnParameters": {
										"id": 2490,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2489,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2494,
												"src": "7689:13:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2488,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7689:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7688:15:12"
									},
									"scope": 3441,
									"src": "7635:98:12",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										264
									],
									"body": {
										"id": 2503,
										"nodeType": "Block",
										"src": "7868:31:12",
										"statements": [
											{
												"expression": {
													"id": 2501,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2194,
													"src": "7885:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 2500,
												"id": 2502,
												"nodeType": "Return",
												"src": "7878:14:12"
											}
										]
									},
									"documentation": {
										"id": 2495,
										"nodeType": "StructuredDocumentation",
										"src": "7739:53:12",
										"text": " @dev See {IERC721Metadata-symbol}."
									},
									"functionSelector": "95d89b41",
									"id": 2504,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "7806:6:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2497,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "7835:8:12"
									},
									"parameters": {
										"id": 2496,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7812:2:12"
									},
									"returnParameters": {
										"id": 2500,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2499,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2504,
												"src": "7853:13:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2498,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7853:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7852:15:12"
									},
									"scope": 3441,
									"src": "7797:102:12",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										272
									],
									"body": {
										"id": 2546,
										"nodeType": "Block",
										"src": "8053:225:12",
										"statements": [
											{
												"condition": {
													"id": 2516,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "8067:17:12",
													"subExpression": {
														"arguments": [
															{
																"id": 2514,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2507,
																"src": "8076:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 2513,
															"name": "_exists",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2773,
															"src": "8068:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
																"typeString": "function (uint256) view returns (bool)"
															}
														},
														"id": 2515,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8068:16:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2520,
												"nodeType": "IfStatement",
												"src": "8063:59:12",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 2517,
															"name": "URIQueryForNonexistentToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2155,
															"src": "8093:27:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 2518,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8093:29:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 2519,
													"nodeType": "RevertStatement",
													"src": "8086:36:12"
												}
											},
											{
												"assignments": [
													2522
												],
												"declarations": [
													{
														"constant": false,
														"id": 2522,
														"mutability": "mutable",
														"name": "baseURI",
														"nameLocation": "8147:7:12",
														"nodeType": "VariableDeclaration",
														"scope": 2546,
														"src": "8133:21:12",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string"
														},
														"typeName": {
															"id": 2521,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "8133:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2525,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 2523,
														"name": "_baseURI",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2556,
														"src": "8157:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$",
															"typeString": "function () view returns (string memory)"
														}
													},
													"id": 2524,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8157:10:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8133:34:12"
											},
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2532,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 2528,
																		"name": "baseURI",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2522,
																		"src": "8190:7:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 2527,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8184:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 2526,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "8184:5:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 2529,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8184:14:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 2530,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "8199:6:12",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "8184:21:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "30",
															"id": 2531,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8209:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "8184:26:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"hexValue": "",
														"id": 2543,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8269:2:12",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
															"typeString": "literal_string \"\""
														},
														"value": ""
													},
													"id": 2544,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "8184:87:12",
													"trueExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 2537,
																		"name": "baseURI",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2522,
																		"src": "8237:7:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	},
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"expression": {
																				"id": 2538,
																				"name": "tokenId",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2507,
																				"src": "8246:7:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"id": 2539,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "8254:8:12",
																			"memberName": "toString",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 684,
																			"src": "8246:16:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$attached_to$_t_uint256_$",
																				"typeString": "function (uint256) pure returns (string memory)"
																			}
																		},
																		"id": 2540,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8246:18:12",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"expression": {
																		"id": 2535,
																		"name": "abi",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967295,
																		"src": "8220:3:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_abi",
																			"typeString": "abi"
																		}
																	},
																	"id": 2536,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "8224:12:12",
																	"memberName": "encodePacked",
																	"nodeType": "MemberAccess",
																	"src": "8220:16:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																		"typeString": "function () pure returns (bytes memory)"
																	}
																},
																"id": 2541,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8220:45:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 2534,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "8213:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																"typeString": "type(string storage pointer)"
															},
															"typeName": {
																"id": 2533,
																"name": "string",
																"nodeType": "ElementaryTypeName",
																"src": "8213:6:12",
																"typeDescriptions": {}
															}
														},
														"id": 2542,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8213:53:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 2512,
												"id": 2545,
												"nodeType": "Return",
												"src": "8177:94:12"
											}
										]
									},
									"documentation": {
										"id": 2505,
										"nodeType": "StructuredDocumentation",
										"src": "7905:55:12",
										"text": " @dev See {IERC721Metadata-tokenURI}."
									},
									"functionSelector": "c87b56dd",
									"id": 2547,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tokenURI",
									"nameLocation": "7974:8:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2509,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "8020:8:12"
									},
									"parameters": {
										"id": 2508,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2507,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "7991:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 2547,
												"src": "7983:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2506,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7983:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7982:17:12"
									},
									"returnParameters": {
										"id": 2512,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2511,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2547,
												"src": "8038:13:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2510,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8038:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8037:15:12"
									},
									"scope": 3441,
									"src": "7965:313:12",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2555,
										"nodeType": "Block",
										"src": "8585:26:12",
										"statements": [
											{
												"expression": {
													"hexValue": "",
													"id": 2553,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "8602:2:12",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
														"typeString": "literal_string \"\""
													},
													"value": ""
												},
												"functionReturnParameters": 2552,
												"id": 2554,
												"nodeType": "Return",
												"src": "8595:9:12"
											}
										]
									},
									"documentation": {
										"id": 2548,
										"nodeType": "StructuredDocumentation",
										"src": "8284:230:12",
										"text": " @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overriden in child contracts."
									},
									"id": 2556,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_baseURI",
									"nameLocation": "8528:8:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2549,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8536:2:12"
									},
									"returnParameters": {
										"id": 2552,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2551,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2556,
												"src": "8570:13:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2550,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8570:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8569:15:12"
									},
									"scope": 3441,
									"src": "8519:92:12",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										201
									],
									"body": {
										"id": 2601,
										"nodeType": "Block",
										"src": "8730:300:12",
										"statements": [
											{
												"assignments": [
													2566
												],
												"declarations": [
													{
														"constant": false,
														"id": 2566,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "8748:5:12",
														"nodeType": "VariableDeclaration",
														"scope": 2601,
														"src": "8740:13:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 2565,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "8740:7:12",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2571,
												"initialValue": {
													"arguments": [
														{
															"id": 2569,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2561,
															"src": "8772:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 2567,
															"name": "ERC721A",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3441,
															"src": "8756:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ERC721A_$3441_$",
																"typeString": "type(contract ERC721A)"
															}
														},
														"id": 2568,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "8764:7:12",
														"memberName": "ownerOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2484,
														"src": "8756:15:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
															"typeString": "function (uint256) view returns (address)"
														}
													},
													"id": 2570,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8756:24:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8740:40:12"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 2574,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2572,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2559,
														"src": "8794:2:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 2573,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2566,
														"src": "8800:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "8794:11:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2578,
												"nodeType": "IfStatement",
												"src": "8790:48:12",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 2575,
															"name": "ApprovalToCurrentOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2137,
															"src": "8814:22:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 2576,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8814:24:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 2577,
													"nodeType": "RevertStatement",
													"src": "8807:31:12"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2589,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 2582,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2579,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 615,
																"src": "8853:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 2580,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8853:12:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"id": 2581,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2566,
															"src": "8869:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "8853:21:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"id": 2588,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "8878:38:12",
														"subExpression": {
															"arguments": [
																{
																	"id": 2584,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2566,
																	"src": "8896:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 2585,
																		"name": "_msgSender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 615,
																		"src": "8903:10:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																			"typeString": "function () view returns (address)"
																		}
																	},
																	"id": 2586,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8903:12:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 2583,
																"name": "isApprovedForAll",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2676,
																"src": "8879:16:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address,address) view returns (bool)"
																}
															},
															"id": 2587,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8879:37:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "8853:63:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2594,
												"nodeType": "IfStatement",
												"src": "8849:136:12",
												"trueBody": {
													"id": 2593,
													"nodeType": "Block",
													"src": "8918:67:12",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 2590,
																	"name": "ApprovalCallerNotOwnerNorApproved",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2131,
																	"src": "8939:33:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 2591,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8939:35:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2592,
															"nodeType": "RevertStatement",
															"src": "8932:42:12"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2596,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2559,
															"src": "9004:2:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2597,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2561,
															"src": "9008:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2598,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2566,
															"src": "9017:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 2595,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3359,
														"src": "8995:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$__$",
															"typeString": "function (address,uint256,address)"
														}
													},
													"id": 2599,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8995:28:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2600,
												"nodeType": "ExpressionStatement",
												"src": "8995:28:12"
											}
										]
									},
									"documentation": {
										"id": 2557,
										"nodeType": "StructuredDocumentation",
										"src": "8617:46:12",
										"text": " @dev See {IERC721-approve}."
									},
									"functionSelector": "095ea7b3",
									"id": 2602,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "8677:7:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2563,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "8721:8:12"
									},
									"parameters": {
										"id": 2562,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2559,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "8693:2:12",
												"nodeType": "VariableDeclaration",
												"scope": 2602,
												"src": "8685:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2558,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8685:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2561,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "8705:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 2602,
												"src": "8697:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2560,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8697:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8684:29:12"
									},
									"returnParameters": {
										"id": 2564,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8730:0:12"
									},
									"scope": 3441,
									"src": "8668:362:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										217
									],
									"body": {
										"id": 2623,
										"nodeType": "Block",
										"src": "9168:123:12",
										"statements": [
											{
												"condition": {
													"id": 2614,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "9182:17:12",
													"subExpression": {
														"arguments": [
															{
																"id": 2612,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2605,
																"src": "9191:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 2611,
															"name": "_exists",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2773,
															"src": "9183:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
																"typeString": "function (uint256) view returns (bool)"
															}
														},
														"id": 2613,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9183:16:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2618,
												"nodeType": "IfStatement",
												"src": "9178:64:12",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 2615,
															"name": "ApprovalQueryForNonexistentToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2133,
															"src": "9208:32:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 2616,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9208:34:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 2617,
													"nodeType": "RevertStatement",
													"src": "9201:41:12"
												}
											},
											{
												"expression": {
													"baseExpression": {
														"id": 2619,
														"name": "_tokenApprovals",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2208,
														"src": "9260:15:12",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
															"typeString": "mapping(uint256 => address)"
														}
													},
													"id": 2621,
													"indexExpression": {
														"id": 2620,
														"name": "tokenId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2605,
														"src": "9276:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "9260:24:12",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 2610,
												"id": 2622,
												"nodeType": "Return",
												"src": "9253:31:12"
											}
										]
									},
									"documentation": {
										"id": 2603,
										"nodeType": "StructuredDocumentation",
										"src": "9036:50:12",
										"text": " @dev See {IERC721-getApproved}."
									},
									"functionSelector": "081812fc",
									"id": 2624,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "9100:11:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2607,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "9141:8:12"
									},
									"parameters": {
										"id": 2606,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2605,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "9120:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 2624,
												"src": "9112:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2604,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9112:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9111:17:12"
									},
									"returnParameters": {
										"id": 2610,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2609,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2624,
												"src": "9159:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2608,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9159:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9158:9:12"
									},
									"scope": 3441,
									"src": "9091:200:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										209
									],
									"body": {
										"id": 2657,
										"nodeType": "Block",
										"src": "9442:198:12",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 2636,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2633,
														"name": "operator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2627,
														"src": "9456:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 2634,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 615,
															"src": "9468:10:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 2635,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9468:12:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "9456:24:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2640,
												"nodeType": "IfStatement",
												"src": "9452:54:12",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 2637,
															"name": "ApproveToCaller",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2135,
															"src": "9489:15:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 2638,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9489:17:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 2639,
													"nodeType": "RevertStatement",
													"src": "9482:24:12"
												}
											},
											{
												"expression": {
													"id": 2648,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 2641,
																"name": "_operatorApprovals",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2214,
																"src": "9517:18:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
																	"typeString": "mapping(address => mapping(address => bool))"
																}
															},
															"id": 2645,
															"indexExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 2642,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 615,
																	"src": "9536:10:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 2643,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9536:12:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "9517:32:12",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 2646,
														"indexExpression": {
															"id": 2644,
															"name": "operator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2627,
															"src": "9550:8:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "9517:42:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2647,
														"name": "approved",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2629,
														"src": "9562:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "9517:53:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2649,
												"nodeType": "ExpressionStatement",
												"src": "9517:53:12"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2651,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 615,
																"src": "9600:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 2652,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9600:12:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2653,
															"name": "operator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2627,
															"src": "9614:8:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2654,
															"name": "approved",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2629,
															"src": "9624:8:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 2650,
														"name": "ApprovalForAll",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 145,
														"src": "9585:14:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$",
															"typeString": "function (address,address,bool)"
														}
													},
													"id": 2655,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9585:48:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2656,
												"nodeType": "EmitStatement",
												"src": "9580:53:12"
											}
										]
									},
									"documentation": {
										"id": 2625,
										"nodeType": "StructuredDocumentation",
										"src": "9297:56:12",
										"text": " @dev See {IERC721-setApprovalForAll}."
									},
									"functionSelector": "a22cb465",
									"id": 2658,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "9367:17:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2631,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "9433:8:12"
									},
									"parameters": {
										"id": 2630,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2627,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "9393:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 2658,
												"src": "9385:16:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2626,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9385:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2629,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "9408:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 2658,
												"src": "9403:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2628,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "9403:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9384:33:12"
									},
									"returnParameters": {
										"id": 2632,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9442:0:12"
									},
									"scope": 3441,
									"src": "9358:282:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										227
									],
									"body": {
										"id": 2675,
										"nodeType": "Block",
										"src": "9809:59:12",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 2669,
															"name": "_operatorApprovals",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2214,
															"src": "9826:18:12",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
																"typeString": "mapping(address => mapping(address => bool))"
															}
														},
														"id": 2671,
														"indexExpression": {
															"id": 2670,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2661,
															"src": "9845:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "9826:25:12",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
															"typeString": "mapping(address => bool)"
														}
													},
													"id": 2673,
													"indexExpression": {
														"id": 2672,
														"name": "operator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2663,
														"src": "9852:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "9826:35:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2668,
												"id": 2674,
												"nodeType": "Return",
												"src": "9819:42:12"
											}
										]
									},
									"documentation": {
										"id": 2659,
										"nodeType": "StructuredDocumentation",
										"src": "9646:55:12",
										"text": " @dev See {IERC721-isApprovedForAll}."
									},
									"functionSelector": "e985e9c5",
									"id": 2676,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "9715:16:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2665,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "9785:8:12"
									},
									"parameters": {
										"id": 2664,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2661,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9740:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2676,
												"src": "9732:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2660,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9732:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2663,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "9755:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 2676,
												"src": "9747:16:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2662,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9747:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9731:33:12"
									},
									"returnParameters": {
										"id": 2668,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2667,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2676,
												"src": "9803:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2666,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "9803:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9802:6:12"
									},
									"scope": 3441,
									"src": "9706:162:12",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										193
									],
									"body": {
										"id": 2693,
										"nodeType": "Block",
										"src": "10049:45:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2688,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2679,
															"src": "10069:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2689,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2681,
															"src": "10075:2:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2690,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2683,
															"src": "10079:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2687,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3142,
														"src": "10059:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 2691,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10059:28:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2692,
												"nodeType": "ExpressionStatement",
												"src": "10059:28:12"
											}
										]
									},
									"documentation": {
										"id": 2677,
										"nodeType": "StructuredDocumentation",
										"src": "9874:51:12",
										"text": " @dev See {IERC721-transferFrom}."
									},
									"functionSelector": "23b872dd",
									"id": 2694,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "9939:12:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2685,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "10040:8:12"
									},
									"parameters": {
										"id": 2684,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2679,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "9969:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 2694,
												"src": "9961:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2678,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9961:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2681,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "9991:2:12",
												"nodeType": "VariableDeclaration",
												"scope": 2694,
												"src": "9983:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2680,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9983:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2683,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "10011:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 2694,
												"src": "10003:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2682,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10003:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9951:73:12"
									},
									"returnParameters": {
										"id": 2686,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10049:0:12"
									},
									"scope": 3441,
									"src": "9930:164:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										183
									],
									"body": {
										"id": 2712,
										"nodeType": "Block",
										"src": "10283:56:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2706,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2697,
															"src": "10310:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2707,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2699,
															"src": "10316:2:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2708,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2701,
															"src": "10320:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "",
															"id": 2709,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10329:2:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"id": 2705,
														"name": "safeTransferFrom",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2713,
															2749
														],
														"referencedDeclaration": 2749,
														"src": "10293:16:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,address,uint256,bytes memory)"
														}
													},
													"id": 2710,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10293:39:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2711,
												"nodeType": "ExpressionStatement",
												"src": "10293:39:12"
											}
										]
									},
									"documentation": {
										"id": 2695,
										"nodeType": "StructuredDocumentation",
										"src": "10100:55:12",
										"text": " @dev See {IERC721-safeTransferFrom}."
									},
									"functionSelector": "42842e0e",
									"id": 2713,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "10169:16:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2703,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "10274:8:12"
									},
									"parameters": {
										"id": 2702,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2697,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "10203:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 2713,
												"src": "10195:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2696,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10195:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2699,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "10225:2:12",
												"nodeType": "VariableDeclaration",
												"scope": 2713,
												"src": "10217:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2698,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10217:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2701,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "10245:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 2713,
												"src": "10237:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2700,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10237:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10185:73:12"
									},
									"returnParameters": {
										"id": 2704,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10283:0:12"
									},
									"scope": 3441,
									"src": "10160:179:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										173
									],
									"body": {
										"id": 2748,
										"nodeType": "Block",
										"src": "10556:208:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2727,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2716,
															"src": "10576:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2728,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2718,
															"src": "10582:2:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2729,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2720,
															"src": "10586:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2726,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3142,
														"src": "10566:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 2730,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10566:28:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2731,
												"nodeType": "ExpressionStatement",
												"src": "10566:28:12"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2742,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"expression": {
																"id": 2732,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2718,
																"src": "10608:2:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 2733,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "10611:10:12",
															"memberName": "isContract",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 291,
															"src": "10608:13:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$",
																"typeString": "function (address) view returns (bool)"
															}
														},
														"id": 2734,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10608:15:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"id": 2741,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "10627:57:12",
														"subExpression": {
															"arguments": [
																{
																	"id": 2736,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2716,
																	"src": "10659:4:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2737,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2718,
																	"src": "10665:2:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2738,
																	"name": "tokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2720,
																	"src": "10669:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 2739,
																	"name": "_data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2722,
																	"src": "10678:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 2735,
																"name": "_checkContractOnERC721Received",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3414,
																"src": "10628:30:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																	"typeString": "function (address,address,uint256,bytes memory) returns (bool)"
																}
															},
															"id": 2740,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10628:56:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "10608:76:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2747,
												"nodeType": "IfStatement",
												"src": "10604:154:12",
												"trueBody": {
													"id": 2746,
													"nodeType": "Block",
													"src": "10686:72:12",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 2743,
																	"name": "TransferToNonERC721ReceiverImplementer",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2151,
																	"src": "10707:38:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 2744,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10707:40:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2745,
															"nodeType": "RevertStatement",
															"src": "10700:47:12"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2714,
										"nodeType": "StructuredDocumentation",
										"src": "10345:55:12",
										"text": " @dev See {IERC721-safeTransferFrom}."
									},
									"functionSelector": "b88d4fde",
									"id": 2749,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "10414:16:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2724,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "10547:8:12"
									},
									"parameters": {
										"id": 2723,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2716,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "10448:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 2749,
												"src": "10440:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2715,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10440:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2718,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "10470:2:12",
												"nodeType": "VariableDeclaration",
												"scope": 2749,
												"src": "10462:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2717,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10462:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2720,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "10490:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 2749,
												"src": "10482:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2719,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10482:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2722,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "10520:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2749,
												"src": "10507:18:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2721,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "10507:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10430:101:12"
									},
									"returnParameters": {
										"id": 2725,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10556:0:12"
									},
									"scope": 3441,
									"src": "10405:359:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2772,
										"nodeType": "Block",
										"src": "11073:121:12",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2770,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 2764,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2760,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 2757,
																	"name": "_startTokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2244,
																	"src": "11090:13:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 2758,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11090:15:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 2759,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2752,
																"src": "11109:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "11090:26:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&&",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2763,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2761,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2752,
																"src": "11120:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 2762,
																"name": "_currentIndex",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2188,
																"src": "11130:13:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "11120:23:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "11090:53:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"id": 2769,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "11159:28:12",
														"subExpression": {
															"expression": {
																"baseExpression": {
																	"id": 2765,
																	"name": "_ownerships",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2199,
																	"src": "11160:11:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$2177_storage_$",
																		"typeString": "mapping(uint256 => struct ERC721A.TokenOwnership storage ref)"
																	}
																},
																"id": 2767,
																"indexExpression": {
																	"id": 2766,
																	"name": "tokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2752,
																	"src": "11172:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "11160:20:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_TokenOwnership_$2177_storage",
																	"typeString": "struct ERC721A.TokenOwnership storage ref"
																}
															},
															"id": 2768,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "11181:6:12",
															"memberName": "burned",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2176,
															"src": "11160:27:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "11090:97:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2756,
												"id": 2771,
												"nodeType": "Return",
												"src": "11083:104:12"
											}
										]
									},
									"documentation": {
										"id": 2750,
										"nodeType": "StructuredDocumentation",
										"src": "10770:235:12",
										"text": " @dev Returns whether `tokenId` exists.\n Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n Tokens start existing when they are minted (`_mint`),"
									},
									"id": 2773,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_exists",
									"nameLocation": "11019:7:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2753,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2752,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "11035:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 2773,
												"src": "11027:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2751,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11027:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11026:17:12"
									},
									"returnParameters": {
										"id": 2756,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2755,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2773,
												"src": "11067:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2754,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "11067:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11066:6:12"
									},
									"scope": 3441,
									"src": "11010:184:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2786,
										"nodeType": "Block",
										"src": "11258:44:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2781,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2775,
															"src": "11278:2:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2782,
															"name": "quantity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2777,
															"src": "11282:8:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "",
															"id": 2783,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11292:2:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"id": 2780,
														"name": "_safeMint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2787,
															2805
														],
														"referencedDeclaration": 2805,
														"src": "11268:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,uint256,bytes memory)"
														}
													},
													"id": 2784,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11268:27:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2785,
												"nodeType": "ExpressionStatement",
												"src": "11268:27:12"
											}
										]
									},
									"id": 2787,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_safeMint",
									"nameLocation": "11209:9:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2778,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2775,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "11227:2:12",
												"nodeType": "VariableDeclaration",
												"scope": 2787,
												"src": "11219:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2774,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11219:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2777,
												"mutability": "mutable",
												"name": "quantity",
												"nameLocation": "11239:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 2787,
												"src": "11231:16:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2776,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11231:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11218:30:12"
									},
									"returnParameters": {
										"id": 2779,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11258:0:12"
									},
									"scope": 3441,
									"src": "11200:102:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2804,
										"nodeType": "Block",
										"src": "11761:49:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2798,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2790,
															"src": "11777:2:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2799,
															"name": "quantity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2792,
															"src": "11781:8:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2800,
															"name": "_data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2794,
															"src": "11791:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "74727565",
															"id": 2801,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11798:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 2797,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2972,
														"src": "11771:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$_t_bool_$returns$__$",
															"typeString": "function (address,uint256,bytes memory,bool)"
														}
													},
													"id": 2802,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11771:32:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2803,
												"nodeType": "ExpressionStatement",
												"src": "11771:32:12"
											}
										]
									},
									"documentation": {
										"id": 2788,
										"nodeType": "StructuredDocumentation",
										"src": "11308:340:12",
										"text": " @dev Safely mints `quantity` tokens and transfers them to `to`.\n Requirements:\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n - `quantity` must be greater than 0.\n Emits a {Transfer} event."
									},
									"id": 2805,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_safeMint",
									"nameLocation": "11662:9:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2795,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2790,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "11689:2:12",
												"nodeType": "VariableDeclaration",
												"scope": 2805,
												"src": "11681:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2789,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11681:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2792,
												"mutability": "mutable",
												"name": "quantity",
												"nameLocation": "11709:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 2805,
												"src": "11701:16:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2791,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11701:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2794,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "11740:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2805,
												"src": "11727:18:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2793,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "11727:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11671:80:12"
									},
									"returnParameters": {
										"id": 2796,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11761:0:12"
									},
									"scope": 3441,
									"src": "11653:157:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2971,
										"nodeType": "Block",
										"src": "12180:1610:12",
										"statements": [
											{
												"assignments": [
													2818
												],
												"declarations": [
													{
														"constant": false,
														"id": 2818,
														"mutability": "mutable",
														"name": "startTokenId",
														"nameLocation": "12198:12:12",
														"nodeType": "VariableDeclaration",
														"scope": 2971,
														"src": "12190:20:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2817,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12190:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2820,
												"initialValue": {
													"id": 2819,
													"name": "_currentIndex",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2188,
													"src": "12213:13:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12190:36:12"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 2826,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2821,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2808,
														"src": "12240:2:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 2824,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12254:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 2823,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "12246:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 2822,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "12246:7:12",
																"typeDescriptions": {}
															}
														},
														"id": 2825,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "12246:10:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "12240:16:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2830,
												"nodeType": "IfStatement",
												"src": "12236:48:12",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 2827,
															"name": "MintToZeroAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2141,
															"src": "12265:17:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 2828,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "12265:19:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 2829,
													"nodeType": "RevertStatement",
													"src": "12258:26:12"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2833,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2831,
														"name": "quantity",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2810,
														"src": "12298:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2832,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "12310:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "12298:13:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2837,
												"nodeType": "IfStatement",
												"src": "12294:44:12",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 2834,
															"name": "MintZeroQuantity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2143,
															"src": "12320:16:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 2835,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "12320:18:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 2836,
													"nodeType": "RevertStatement",
													"src": "12313:25:12"
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2841,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12379:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2840,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "12371:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2839,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "12371:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 2842,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12371:10:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2843,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2808,
															"src": "12383:2:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2844,
															"name": "startTokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2818,
															"src": "12387:12:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2845,
															"name": "quantity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2810,
															"src": "12401:8:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2838,
														"name": "_beforeTokenTransfers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3427,
														"src": "12349:21:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 2846,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12349:61:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2847,
												"nodeType": "ExpressionStatement",
												"src": "12349:61:12"
											},
											{
												"id": 2960,
												"nodeType": "UncheckedBlock",
												"src": "12657:1057:12",
												"statements": [
													{
														"expression": {
															"id": 2856,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 2848,
																		"name": "_addressData",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2204,
																		"src": "12681:12:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$2186_storage_$",
																			"typeString": "mapping(address => struct ERC721A.AddressData storage ref)"
																		}
																	},
																	"id": 2850,
																	"indexExpression": {
																		"id": 2849,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2808,
																		"src": "12694:2:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "12681:16:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_AddressData_$2186_storage",
																		"typeString": "struct ERC721A.AddressData storage ref"
																	}
																},
																"id": 2851,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberLocation": "12698:7:12",
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2179,
																"src": "12681:24:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"arguments": [
																	{
																		"id": 2854,
																		"name": "quantity",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2810,
																		"src": "12716:8:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 2853,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "12709:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 2852,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "12709:6:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 2855,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "12709:16:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"src": "12681:44:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 2857,
														"nodeType": "ExpressionStatement",
														"src": "12681:44:12"
													},
													{
														"expression": {
															"id": 2866,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 2858,
																		"name": "_addressData",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2204,
																		"src": "12739:12:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$2186_storage_$",
																			"typeString": "mapping(address => struct ERC721A.AddressData storage ref)"
																		}
																	},
																	"id": 2860,
																	"indexExpression": {
																		"id": 2859,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2808,
																		"src": "12752:2:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "12739:16:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_AddressData_$2186_storage",
																		"typeString": "struct ERC721A.AddressData storage ref"
																	}
																},
																"id": 2861,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberLocation": "12756:12:12",
																"memberName": "numberMinted",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2181,
																"src": "12739:29:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"arguments": [
																	{
																		"id": 2864,
																		"name": "quantity",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2810,
																		"src": "12779:8:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 2863,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "12772:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 2862,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "12772:6:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 2865,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "12772:16:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"src": "12739:49:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 2867,
														"nodeType": "ExpressionStatement",
														"src": "12739:49:12"
													},
													{
														"expression": {
															"id": 2873,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 2868,
																		"name": "_ownerships",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2199,
																		"src": "12803:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$2177_storage_$",
																			"typeString": "mapping(uint256 => struct ERC721A.TokenOwnership storage ref)"
																		}
																	},
																	"id": 2870,
																	"indexExpression": {
																		"id": 2869,
																		"name": "startTokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2818,
																		"src": "12815:12:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "12803:25:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2177_storage",
																		"typeString": "struct ERC721A.TokenOwnership storage ref"
																	}
																},
																"id": 2871,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberLocation": "12829:4:12",
																"memberName": "addr",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2172,
																"src": "12803:30:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"id": 2872,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2808,
																"src": "12836:2:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "12803:35:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2874,
														"nodeType": "ExpressionStatement",
														"src": "12803:35:12"
													},
													{
														"expression": {
															"id": 2884,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 2875,
																		"name": "_ownerships",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2199,
																		"src": "12852:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$2177_storage_$",
																			"typeString": "mapping(uint256 => struct ERC721A.TokenOwnership storage ref)"
																		}
																	},
																	"id": 2877,
																	"indexExpression": {
																		"id": 2876,
																		"name": "startTokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2818,
																		"src": "12864:12:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "12852:25:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2177_storage",
																		"typeString": "struct ERC721A.TokenOwnership storage ref"
																	}
																},
																"id": 2878,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberLocation": "12878:14:12",
																"memberName": "startTimestamp",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2174,
																"src": "12852:40:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"arguments": [
																	{
																		"expression": {
																			"id": 2881,
																			"name": "block",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967292,
																			"src": "12902:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_block",
																				"typeString": "block"
																			}
																		},
																		"id": 2882,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "12908:9:12",
																		"memberName": "timestamp",
																		"nodeType": "MemberAccess",
																		"src": "12902:15:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 2880,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "12895:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 2879,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "12895:6:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 2883,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "12895:23:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"src": "12852:66:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 2885,
														"nodeType": "ExpressionStatement",
														"src": "12852:66:12"
													},
													{
														"assignments": [
															2887
														],
														"declarations": [
															{
																"constant": false,
																"id": 2887,
																"mutability": "mutable",
																"name": "updatedIndex",
																"nameLocation": "12941:12:12",
																"nodeType": "VariableDeclaration",
																"scope": 2960,
																"src": "12933:20:12",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2886,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "12933:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2889,
														"initialValue": {
															"id": 2888,
															"name": "startTokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2818,
															"src": "12956:12:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "12933:35:12"
													},
													{
														"assignments": [
															2891
														],
														"declarations": [
															{
																"constant": false,
																"id": 2891,
																"mutability": "mutable",
																"name": "end",
																"nameLocation": "12990:3:12",
																"nodeType": "VariableDeclaration",
																"scope": 2960,
																"src": "12982:11:12",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2890,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "12982:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2895,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2894,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2892,
																"name": "updatedIndex",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2887,
																"src": "12996:12:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 2893,
																"name": "quantity",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2810,
																"src": "13011:8:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "12996:23:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "12982:37:12"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2900,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2896,
																"name": "safe",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2814,
																"src": "13038:4:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 2897,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2808,
																		"src": "13046:2:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"id": 2898,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "13049:10:12",
																	"memberName": "isContract",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 291,
																	"src": "13046:13:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$",
																		"typeString": "function (address) view returns (bool)"
																	}
																},
																"id": 2899,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "13046:15:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "13038:23:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseBody": {
															"id": 2954,
															"nodeType": "Block",
															"src": "13512:150:12",
															"statements": [
																{
																	"body": {
																		"id": 2949,
																		"nodeType": "Block",
																		"src": "13533:86:12",
																		"statements": [
																			{
																				"eventCall": {
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"hexValue": "30",
																									"id": 2942,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "13577:1:12",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_0_by_1",
																										"typeString": "int_const 0"
																									},
																									"value": "0"
																								}
																							],
																							"expression": {
																								"argumentTypes": [
																									{
																										"typeIdentifier": "t_rational_0_by_1",
																										"typeString": "int_const 0"
																									}
																								],
																								"id": 2941,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"lValueRequested": false,
																								"nodeType": "ElementaryTypeNameExpression",
																								"src": "13569:7:12",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_address_$",
																									"typeString": "type(address)"
																								},
																								"typeName": {
																									"id": 2940,
																									"name": "address",
																									"nodeType": "ElementaryTypeName",
																									"src": "13569:7:12",
																									"typeDescriptions": {}
																								}
																							},
																							"id": 2943,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "typeConversion",
																							"lValueRequested": false,
																							"nameLocations": [],
																							"names": [],
																							"nodeType": "FunctionCall",
																							"src": "13569:10:12",
																							"tryCall": false,
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						{
																							"id": 2944,
																							"name": "to",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2808,
																							"src": "13581:2:12",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						{
																							"id": 2946,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "UnaryOperation",
																							"operator": "++",
																							"prefix": false,
																							"src": "13585:14:12",
																							"subExpression": {
																								"id": 2945,
																								"name": "updatedIndex",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 2887,
																								"src": "13585:12:12",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							},
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							},
																							{
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						],
																						"id": 2939,
																						"name": "Transfer",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 127,
																						"src": "13560:8:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																							"typeString": "function (address,address,uint256)"
																						}
																					},
																					"id": 2947,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "13560:40:12",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_tuple$__$",
																						"typeString": "tuple()"
																					}
																				},
																				"id": 2948,
																				"nodeType": "EmitStatement",
																				"src": "13555:45:12"
																			}
																		]
																	},
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2952,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2950,
																			"name": "updatedIndex",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2887,
																			"src": "13627:12:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "!=",
																		"rightExpression": {
																			"id": 2951,
																			"name": "end",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2891,
																			"src": "13643:3:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "13627:19:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 2953,
																	"nodeType": "DoWhileStatement",
																	"src": "13530:118:12"
																}
															]
														},
														"id": 2955,
														"nodeType": "IfStatement",
														"src": "13034:628:12",
														"trueBody": {
															"id": 2938,
															"nodeType": "Block",
															"src": "13063:443:12",
															"statements": [
																{
																	"body": {
																		"id": 2926,
																		"nodeType": "Block",
																		"src": "13084:277:12",
																		"statements": [
																			{
																				"eventCall": {
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"hexValue": "30",
																									"id": 2904,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "13128:1:12",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_0_by_1",
																										"typeString": "int_const 0"
																									},
																									"value": "0"
																								}
																							],
																							"expression": {
																								"argumentTypes": [
																									{
																										"typeIdentifier": "t_rational_0_by_1",
																										"typeString": "int_const 0"
																									}
																								],
																								"id": 2903,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"lValueRequested": false,
																								"nodeType": "ElementaryTypeNameExpression",
																								"src": "13120:7:12",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_address_$",
																									"typeString": "type(address)"
																								},
																								"typeName": {
																									"id": 2902,
																									"name": "address",
																									"nodeType": "ElementaryTypeName",
																									"src": "13120:7:12",
																									"typeDescriptions": {}
																								}
																							},
																							"id": 2905,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "typeConversion",
																							"lValueRequested": false,
																							"nameLocations": [],
																							"names": [],
																							"nodeType": "FunctionCall",
																							"src": "13120:10:12",
																							"tryCall": false,
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						{
																							"id": 2906,
																							"name": "to",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2808,
																							"src": "13132:2:12",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						{
																							"id": 2907,
																							"name": "updatedIndex",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2887,
																							"src": "13136:12:12",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							},
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							},
																							{
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						],
																						"id": 2901,
																						"name": "Transfer",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 127,
																						"src": "13111:8:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																							"typeString": "function (address,address,uint256)"
																						}
																					},
																					"id": 2908,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "13111:38:12",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_tuple$__$",
																						"typeString": "tuple()"
																					}
																				},
																				"id": 2909,
																				"nodeType": "EmitStatement",
																				"src": "13106:43:12"
																			},
																			{
																				"condition": {
																					"id": 2920,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "!",
																					"prefix": true,
																					"src": "13175:70:12",
																					"subExpression": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"hexValue": "30",
																										"id": 2913,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "13215:1:12",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_0_by_1",
																											"typeString": "int_const 0"
																										},
																										"value": "0"
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_rational_0_by_1",
																											"typeString": "int_const 0"
																										}
																									],
																									"id": 2912,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"lValueRequested": false,
																									"nodeType": "ElementaryTypeNameExpression",
																									"src": "13207:7:12",
																									"typeDescriptions": {
																										"typeIdentifier": "t_type$_t_address_$",
																										"typeString": "type(address)"
																									},
																									"typeName": {
																										"id": 2911,
																										"name": "address",
																										"nodeType": "ElementaryTypeName",
																										"src": "13207:7:12",
																										"typeDescriptions": {}
																									}
																								},
																								"id": 2914,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "typeConversion",
																								"lValueRequested": false,
																								"nameLocations": [],
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "13207:10:12",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							},
																							{
																								"id": 2915,
																								"name": "to",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 2808,
																								"src": "13219:2:12",
																								"typeDescriptions": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							},
																							{
																								"id": 2917,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "UnaryOperation",
																								"operator": "++",
																								"prefix": false,
																								"src": "13223:14:12",
																								"subExpression": {
																									"id": 2916,
																									"name": "updatedIndex",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 2887,
																									"src": "13223:12:12",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							{
																								"id": 2918,
																								"name": "_data",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 2812,
																								"src": "13239:5:12",
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes_memory_ptr",
																									"typeString": "bytes memory"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								},
																								{
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								},
																								{
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								{
																									"typeIdentifier": "t_bytes_memory_ptr",
																									"typeString": "bytes memory"
																								}
																							],
																							"id": 2910,
																							"name": "_checkContractOnERC721Received",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 3414,
																							"src": "13176:30:12",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																								"typeString": "function (address,address,uint256,bytes memory) returns (bool)"
																							}
																						},
																						"id": 2919,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"nameLocations": [],
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "13176:69:12",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_bool",
																							"typeString": "bool"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				"id": 2925,
																				"nodeType": "IfStatement",
																				"src": "13171:172:12",
																				"trueBody": {
																					"id": 2924,
																					"nodeType": "Block",
																					"src": "13247:96:12",
																					"statements": [
																						{
																							"errorCall": {
																								"arguments": [],
																								"expression": {
																									"argumentTypes": [],
																									"id": 2921,
																									"name": "TransferToNonERC721ReceiverImplementer",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 2151,
																									"src": "13280:38:12",
																									"typeDescriptions": {
																										"typeIdentifier": "t_function_error_pure$__$returns$__$",
																										"typeString": "function () pure"
																									}
																								},
																								"id": 2922,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"kind": "functionCall",
																								"lValueRequested": false,
																								"nameLocations": [],
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "13280:40:12",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_tuple$__$",
																									"typeString": "tuple()"
																								}
																							},
																							"id": 2923,
																							"nodeType": "RevertStatement",
																							"src": "13273:47:12"
																						}
																					]
																				}
																			}
																		]
																	},
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2929,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2927,
																			"name": "updatedIndex",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2887,
																			"src": "13369:12:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "!=",
																		"rightExpression": {
																			"id": 2928,
																			"name": "end",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2891,
																			"src": "13385:3:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "13369:19:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 2930,
																	"nodeType": "DoWhileStatement",
																	"src": "13081:309:12"
																},
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2933,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2931,
																			"name": "_currentIndex",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2188,
																			"src": "13452:13:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "!=",
																		"rightExpression": {
																			"id": 2932,
																			"name": "startTokenId",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2818,
																			"src": "13469:12:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "13452:29:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 2937,
																	"nodeType": "IfStatement",
																	"src": "13448:43:12",
																	"trueBody": {
																		"expression": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 2934,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967277,
																					4294967277
																				],
																				"referencedDeclaration": 4294967277,
																				"src": "13483:6:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 2935,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "13483:8:12",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 2936,
																		"nodeType": "ExpressionStatement",
																		"src": "13483:8:12"
																	}
																}
															]
														}
													},
													{
														"expression": {
															"id": 2958,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2956,
																"name": "_currentIndex",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2188,
																"src": "13675:13:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"id": 2957,
																"name": "updatedIndex",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2887,
																"src": "13691:12:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "13675:28:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2959,
														"nodeType": "ExpressionStatement",
														"src": "13675:28:12"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2964,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13752:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2963,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "13744:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2962,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "13744:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 2965,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "13744:10:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2966,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2808,
															"src": "13756:2:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2967,
															"name": "startTokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2818,
															"src": "13760:12:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2968,
															"name": "quantity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2810,
															"src": "13774:8:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2961,
														"name": "_afterTokenTransfers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3440,
														"src": "13723:20:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 2969,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13723:60:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2970,
												"nodeType": "ExpressionStatement",
												"src": "13723:60:12"
											}
										]
									},
									"documentation": {
										"id": 2806,
										"nodeType": "StructuredDocumentation",
										"src": "11816:236:12",
										"text": " @dev Mints `quantity` tokens and transfers them to `to`.\n Requirements:\n - `to` cannot be the zero address.\n - `quantity` must be greater than 0.\n Emits a {Transfer} event."
									},
									"id": 2972,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "12066:5:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2815,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2808,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12089:2:12",
												"nodeType": "VariableDeclaration",
												"scope": 2972,
												"src": "12081:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2807,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12081:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2810,
												"mutability": "mutable",
												"name": "quantity",
												"nameLocation": "12109:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 2972,
												"src": "12101:16:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2809,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12101:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2812,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "12140:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2972,
												"src": "12127:18:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2811,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "12127:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2814,
												"mutability": "mutable",
												"name": "safe",
												"nameLocation": "12160:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 2972,
												"src": "12155:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2813,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "12155:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12071:99:12"
									},
									"returnParameters": {
										"id": 2816,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12180:0:12"
									},
									"scope": 3441,
									"src": "12057:1733:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3141,
										"nodeType": "Block",
										"src": "14133:1982:12",
										"statements": [
											{
												"assignments": [
													2984
												],
												"declarations": [
													{
														"constant": false,
														"id": 2984,
														"mutability": "mutable",
														"name": "prevOwnership",
														"nameLocation": "14165:13:12",
														"nodeType": "VariableDeclaration",
														"scope": 3141,
														"src": "14143:35:12",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_TokenOwnership_$2177_memory_ptr",
															"typeString": "struct ERC721A.TokenOwnership"
														},
														"typeName": {
															"id": 2983,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 2982,
																"name": "TokenOwnership",
																"nameLocations": [
																	"14143:14:12"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 2177,
																"src": "14143:14:12"
															},
															"referencedDeclaration": 2177,
															"src": "14143:14:12",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_TokenOwnership_$2177_storage_ptr",
																"typeString": "struct ERC721A.TokenOwnership"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2988,
												"initialValue": {
													"arguments": [
														{
															"id": 2986,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2979,
															"src": "14194:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2985,
														"name": "_ownershipOf",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2469,
														"src": "14181:12:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_struct$_TokenOwnership_$2177_memory_ptr_$",
															"typeString": "function (uint256) view returns (struct ERC721A.TokenOwnership memory)"
														}
													},
													"id": 2987,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14181:21:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_TokenOwnership_$2177_memory_ptr",
														"typeString": "struct ERC721A.TokenOwnership memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "14143:59:12"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 2992,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 2989,
															"name": "prevOwnership",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2984,
															"src": "14217:13:12",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_TokenOwnership_$2177_memory_ptr",
																"typeString": "struct ERC721A.TokenOwnership memory"
															}
														},
														"id": 2990,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "14231:4:12",
														"memberName": "addr",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2172,
														"src": "14217:18:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 2991,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2975,
														"src": "14239:4:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "14217:26:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2996,
												"nodeType": "IfStatement",
												"src": "14213:67:12",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 2993,
															"name": "TransferFromIncorrectOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2149,
															"src": "14252:26:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 2994,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "14252:28:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 2995,
													"nodeType": "RevertStatement",
													"src": "14245:35:12"
												}
											},
											{
												"assignments": [
													2998
												],
												"declarations": [
													{
														"constant": false,
														"id": 2998,
														"mutability": "mutable",
														"name": "isApprovedOrOwner",
														"nameLocation": "14296:17:12",
														"nodeType": "VariableDeclaration",
														"scope": 3141,
														"src": "14291:22:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2997,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "14291:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3017,
												"initialValue": {
													"components": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 3015,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 3008,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"id": 3002,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 2999,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 615,
																			"src": "14317:10:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 3000,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "14317:12:12",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"id": 3001,
																		"name": "from",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2975,
																		"src": "14333:4:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"src": "14317:20:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "||",
																"rightExpression": {
																	"arguments": [
																		{
																			"id": 3004,
																			"name": "from",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2975,
																			"src": "14370:4:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 3005,
																				"name": "_msgSender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 615,
																				"src": "14376:10:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																					"typeString": "function () view returns (address)"
																				}
																			},
																			"id": 3006,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "14376:12:12",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 3003,
																		"name": "isApprovedForAll",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2676,
																		"src": "14353:16:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$",
																			"typeString": "function (address,address) view returns (bool)"
																		}
																	},
																	"id": 3007,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "14353:36:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "14317:72:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 3014,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 3010,
																			"name": "tokenId",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2979,
																			"src": "14417:7:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 3009,
																		"name": "getApproved",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2624,
																		"src": "14405:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																			"typeString": "function (uint256) view returns (address)"
																		}
																	},
																	"id": 3011,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "14405:20:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 3012,
																		"name": "_msgSender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 615,
																		"src": "14429:10:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																			"typeString": "function () view returns (address)"
																		}
																	},
																	"id": 3013,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "14429:12:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "14405:36:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "14317:124:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"id": 3016,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "14316:126:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "14291:151:12"
											},
											{
												"condition": {
													"id": 3019,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "14457:18:12",
													"subExpression": {
														"id": 3018,
														"name": "isApprovedOrOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2998,
														"src": "14458:17:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3023,
												"nodeType": "IfStatement",
												"src": "14453:66:12",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 3020,
															"name": "TransferCallerNotOwnerNorApproved",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2147,
															"src": "14484:33:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 3021,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "14484:35:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 3022,
													"nodeType": "RevertStatement",
													"src": "14477:42:12"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 3029,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3024,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2977,
														"src": "14533:2:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 3027,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14547:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 3026,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "14539:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 3025,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "14539:7:12",
																"typeDescriptions": {}
															}
														},
														"id": 3028,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "14539:10:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "14533:16:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3033,
												"nodeType": "IfStatement",
												"src": "14529:52:12",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 3030,
															"name": "TransferToZeroAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2153,
															"src": "14558:21:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 3031,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "14558:23:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 3032,
													"nodeType": "RevertStatement",
													"src": "14551:30:12"
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 3035,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2975,
															"src": "14614:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3036,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2977,
															"src": "14620:2:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3037,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2979,
															"src": "14624:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 3038,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "14633:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 3034,
														"name": "_beforeTokenTransfers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3427,
														"src": "14592:21:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 3039,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14592:43:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3040,
												"nodeType": "ExpressionStatement",
												"src": "14592:43:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 3044,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14714:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 3043,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "14706:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 3042,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "14706:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 3045,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "14706:10:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3046,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2979,
															"src": "14718:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 3047,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2975,
															"src": "14727:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 3041,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3359,
														"src": "14697:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$__$",
															"typeString": "function (address,uint256,address)"
														}
													},
													"id": 3048,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14697:35:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3049,
												"nodeType": "ExpressionStatement",
												"src": "14697:35:12"
											},
											{
												"id": 3127,
												"nodeType": "UncheckedBlock",
												"src": "14998:1016:12",
												"statements": [
													{
														"expression": {
															"id": 3055,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 3050,
																		"name": "_addressData",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2204,
																		"src": "15022:12:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$2186_storage_$",
																			"typeString": "mapping(address => struct ERC721A.AddressData storage ref)"
																		}
																	},
																	"id": 3052,
																	"indexExpression": {
																		"id": 3051,
																		"name": "from",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2975,
																		"src": "15035:4:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "15022:18:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_AddressData_$2186_storage",
																		"typeString": "struct ERC721A.AddressData storage ref"
																	}
																},
																"id": 3053,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberLocation": "15041:7:12",
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2179,
																"src": "15022:26:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "-=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 3054,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "15052:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "15022:31:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 3056,
														"nodeType": "ExpressionStatement",
														"src": "15022:31:12"
													},
													{
														"expression": {
															"id": 3062,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 3057,
																		"name": "_addressData",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2204,
																		"src": "15067:12:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$2186_storage_$",
																			"typeString": "mapping(address => struct ERC721A.AddressData storage ref)"
																		}
																	},
																	"id": 3059,
																	"indexExpression": {
																		"id": 3058,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2977,
																		"src": "15080:2:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "15067:16:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_AddressData_$2186_storage",
																		"typeString": "struct ERC721A.AddressData storage ref"
																	}
																},
																"id": 3060,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberLocation": "15084:7:12",
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2179,
																"src": "15067:24:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 3061,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "15095:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "15067:29:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 3063,
														"nodeType": "ExpressionStatement",
														"src": "15067:29:12"
													},
													{
														"assignments": [
															3066
														],
														"declarations": [
															{
																"constant": false,
																"id": 3066,
																"mutability": "mutable",
																"name": "currSlot",
																"nameLocation": "15134:8:12",
																"nodeType": "VariableDeclaration",
																"scope": 3127,
																"src": "15111:31:12",
																"stateVariable": false,
																"storageLocation": "storage",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_TokenOwnership_$2177_storage_ptr",
																	"typeString": "struct ERC721A.TokenOwnership"
																},
																"typeName": {
																	"id": 3065,
																	"nodeType": "UserDefinedTypeName",
																	"pathNode": {
																		"id": 3064,
																		"name": "TokenOwnership",
																		"nameLocations": [
																			"15111:14:12"
																		],
																		"nodeType": "IdentifierPath",
																		"referencedDeclaration": 2177,
																		"src": "15111:14:12"
																	},
																	"referencedDeclaration": 2177,
																	"src": "15111:14:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2177_storage_ptr",
																		"typeString": "struct ERC721A.TokenOwnership"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3070,
														"initialValue": {
															"baseExpression": {
																"id": 3067,
																"name": "_ownerships",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2199,
																"src": "15145:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$2177_storage_$",
																	"typeString": "mapping(uint256 => struct ERC721A.TokenOwnership storage ref)"
																}
															},
															"id": 3069,
															"indexExpression": {
																"id": 3068,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2979,
																"src": "15157:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "15145:20:12",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_TokenOwnership_$2177_storage",
																"typeString": "struct ERC721A.TokenOwnership storage ref"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "15111:54:12"
													},
													{
														"expression": {
															"id": 3075,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 3071,
																	"name": "currSlot",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3066,
																	"src": "15179:8:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2177_storage_ptr",
																		"typeString": "struct ERC721A.TokenOwnership storage pointer"
																	}
																},
																"id": 3073,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberLocation": "15188:4:12",
																"memberName": "addr",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2172,
																"src": "15179:13:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"id": 3074,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2977,
																"src": "15195:2:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "15179:18:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 3076,
														"nodeType": "ExpressionStatement",
														"src": "15179:18:12"
													},
													{
														"expression": {
															"id": 3085,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 3077,
																	"name": "currSlot",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3066,
																	"src": "15211:8:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2177_storage_ptr",
																		"typeString": "struct ERC721A.TokenOwnership storage pointer"
																	}
																},
																"id": 3079,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberLocation": "15220:14:12",
																"memberName": "startTimestamp",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2174,
																"src": "15211:23:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"arguments": [
																	{
																		"expression": {
																			"id": 3082,
																			"name": "block",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967292,
																			"src": "15244:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_block",
																				"typeString": "block"
																			}
																		},
																		"id": 3083,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "15250:9:12",
																		"memberName": "timestamp",
																		"nodeType": "MemberAccess",
																		"src": "15244:15:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 3081,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "15237:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 3080,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "15237:6:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 3084,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "15237:23:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"src": "15211:49:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 3086,
														"nodeType": "ExpressionStatement",
														"src": "15211:49:12"
													},
													{
														"assignments": [
															3088
														],
														"declarations": [
															{
																"constant": false,
																"id": 3088,
																"mutability": "mutable",
																"name": "nextTokenId",
																"nameLocation": "15516:11:12",
																"nodeType": "VariableDeclaration",
																"scope": 3127,
																"src": "15508:19:12",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3087,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "15508:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3092,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3091,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3089,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2979,
																"src": "15530:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "31",
																"id": 3090,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "15540:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "15530:11:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "15508:33:12"
													},
													{
														"assignments": [
															3095
														],
														"declarations": [
															{
																"constant": false,
																"id": 3095,
																"mutability": "mutable",
																"name": "nextSlot",
																"nameLocation": "15578:8:12",
																"nodeType": "VariableDeclaration",
																"scope": 3127,
																"src": "15555:31:12",
																"stateVariable": false,
																"storageLocation": "storage",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_TokenOwnership_$2177_storage_ptr",
																	"typeString": "struct ERC721A.TokenOwnership"
																},
																"typeName": {
																	"id": 3094,
																	"nodeType": "UserDefinedTypeName",
																	"pathNode": {
																		"id": 3093,
																		"name": "TokenOwnership",
																		"nameLocations": [
																			"15555:14:12"
																		],
																		"nodeType": "IdentifierPath",
																		"referencedDeclaration": 2177,
																		"src": "15555:14:12"
																	},
																	"referencedDeclaration": 2177,
																	"src": "15555:14:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2177_storage_ptr",
																		"typeString": "struct ERC721A.TokenOwnership"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3099,
														"initialValue": {
															"baseExpression": {
																"id": 3096,
																"name": "_ownerships",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2199,
																"src": "15589:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$2177_storage_$",
																	"typeString": "mapping(uint256 => struct ERC721A.TokenOwnership storage ref)"
																}
															},
															"id": 3098,
															"indexExpression": {
																"id": 3097,
																"name": "nextTokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3088,
																"src": "15601:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "15589:24:12",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_TokenOwnership_$2177_storage",
																"typeString": "struct ERC721A.TokenOwnership storage ref"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "15555:58:12"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 3106,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 3100,
																	"name": "nextSlot",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3095,
																	"src": "15631:8:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2177_storage_ptr",
																		"typeString": "struct ERC721A.TokenOwnership storage pointer"
																	}
																},
																"id": 3101,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "15640:4:12",
																"memberName": "addr",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2172,
																"src": "15631:13:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 3104,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "15656:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 3103,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "15648:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 3102,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "15648:7:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 3105,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "15648:10:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "15631:27:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3126,
														"nodeType": "IfStatement",
														"src": "15627:377:12",
														"trueBody": {
															"id": 3125,
															"nodeType": "Block",
															"src": "15660:344:12",
															"statements": [
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 3109,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 3107,
																			"name": "nextTokenId",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3088,
																			"src": "15823:11:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "!=",
																		"rightExpression": {
																			"id": 3108,
																			"name": "_currentIndex",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2188,
																			"src": "15838:13:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "15823:28:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 3124,
																	"nodeType": "IfStatement",
																	"src": "15819:171:12",
																	"trueBody": {
																		"id": 3123,
																		"nodeType": "Block",
																		"src": "15853:137:12",
																		"statements": [
																			{
																				"expression": {
																					"id": 3114,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"expression": {
																							"id": 3110,
																							"name": "nextSlot",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 3095,
																							"src": "15875:8:12",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_TokenOwnership_$2177_storage_ptr",
																								"typeString": "struct ERC721A.TokenOwnership storage pointer"
																							}
																						},
																						"id": 3112,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": true,
																						"memberLocation": "15884:4:12",
																						"memberName": "addr",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 2172,
																						"src": "15875:13:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "=",
																					"rightHandSide": {
																						"id": 3113,
																						"name": "from",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2975,
																						"src": "15891:4:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"src": "15875:20:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"id": 3115,
																				"nodeType": "ExpressionStatement",
																				"src": "15875:20:12"
																			},
																			{
																				"expression": {
																					"id": 3121,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"expression": {
																							"id": 3116,
																							"name": "nextSlot",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 3095,
																							"src": "15917:8:12",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_TokenOwnership_$2177_storage_ptr",
																								"typeString": "struct ERC721A.TokenOwnership storage pointer"
																							}
																						},
																						"id": 3118,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": true,
																						"memberLocation": "15926:14:12",
																						"memberName": "startTimestamp",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 2174,
																						"src": "15917:23:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint64",
																							"typeString": "uint64"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "=",
																					"rightHandSide": {
																						"expression": {
																							"id": 3119,
																							"name": "prevOwnership",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2984,
																							"src": "15943:13:12",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_TokenOwnership_$2177_memory_ptr",
																								"typeString": "struct ERC721A.TokenOwnership memory"
																							}
																						},
																						"id": 3120,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberLocation": "15957:14:12",
																						"memberName": "startTimestamp",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 2174,
																						"src": "15943:28:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint64",
																							"typeString": "uint64"
																						}
																					},
																					"src": "15917:54:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint64",
																						"typeString": "uint64"
																					}
																				},
																				"id": 3122,
																				"nodeType": "ExpressionStatement",
																				"src": "15917:54:12"
																			}
																		]
																	}
																}
															]
														}
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 3129,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2975,
															"src": "16038:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3130,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2977,
															"src": "16044:2:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3131,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2979,
															"src": "16048:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3128,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 127,
														"src": "16029:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 3132,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16029:27:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3133,
												"nodeType": "EmitStatement",
												"src": "16024:32:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 3135,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2975,
															"src": "16087:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3136,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2977,
															"src": "16093:2:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3137,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2979,
															"src": "16097:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 3138,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "16106:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 3134,
														"name": "_afterTokenTransfers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3440,
														"src": "16066:20:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 3139,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16066:42:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3140,
												"nodeType": "ExpressionStatement",
												"src": "16066:42:12"
											}
										]
									},
									"documentation": {
										"id": 2973,
										"nodeType": "StructuredDocumentation",
										"src": "13796:231:12",
										"text": " @dev Transfers `tokenId` from `from` to `to`.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."
									},
									"id": 3142,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "14041:9:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2980,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2975,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "14068:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 3142,
												"src": "14060:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2974,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14060:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2977,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "14090:2:12",
												"nodeType": "VariableDeclaration",
												"scope": 3142,
												"src": "14082:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2976,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14082:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2979,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "14110:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 3142,
												"src": "14102:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2978,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14102:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14050:73:12"
									},
									"returnParameters": {
										"id": 2981,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14133:0:12"
									},
									"scope": 3441,
									"src": "14032:2083:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3153,
										"nodeType": "Block",
										"src": "16242:38:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 3149,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3145,
															"src": "16258:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "66616c7365",
															"id": 3150,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "16267:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "false"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 3148,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															3154,
															3336
														],
														"referencedDeclaration": 3336,
														"src": "16252:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_bool_$returns$__$",
															"typeString": "function (uint256,bool)"
														}
													},
													"id": 3151,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16252:21:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3152,
												"nodeType": "ExpressionStatement",
												"src": "16252:21:12"
											}
										]
									},
									"documentation": {
										"id": 3143,
										"nodeType": "StructuredDocumentation",
										"src": "16121:67:12",
										"text": " @dev This is equivalent to _burn(tokenId, false)"
									},
									"id": 3154,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "16202:5:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3146,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3145,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "16216:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 3154,
												"src": "16208:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3144,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16208:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16207:17:12"
									},
									"returnParameters": {
										"id": 3147,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16242:0:12"
									},
									"scope": 3441,
									"src": "16193:87:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3335,
										"nodeType": "Block",
										"src": "16566:2286:12",
										"statements": [
											{
												"assignments": [
													3164
												],
												"declarations": [
													{
														"constant": false,
														"id": 3164,
														"mutability": "mutable",
														"name": "prevOwnership",
														"nameLocation": "16598:13:12",
														"nodeType": "VariableDeclaration",
														"scope": 3335,
														"src": "16576:35:12",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_TokenOwnership_$2177_memory_ptr",
															"typeString": "struct ERC721A.TokenOwnership"
														},
														"typeName": {
															"id": 3163,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 3162,
																"name": "TokenOwnership",
																"nameLocations": [
																	"16576:14:12"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 2177,
																"src": "16576:14:12"
															},
															"referencedDeclaration": 2177,
															"src": "16576:14:12",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_TokenOwnership_$2177_storage_ptr",
																"typeString": "struct ERC721A.TokenOwnership"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3168,
												"initialValue": {
													"arguments": [
														{
															"id": 3166,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3157,
															"src": "16627:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3165,
														"name": "_ownershipOf",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2469,
														"src": "16614:12:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_struct$_TokenOwnership_$2177_memory_ptr_$",
															"typeString": "function (uint256) view returns (struct ERC721A.TokenOwnership memory)"
														}
													},
													"id": 3167,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16614:21:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_TokenOwnership_$2177_memory_ptr",
														"typeString": "struct ERC721A.TokenOwnership memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "16576:59:12"
											},
											{
												"assignments": [
													3170
												],
												"declarations": [
													{
														"constant": false,
														"id": 3170,
														"mutability": "mutable",
														"name": "from",
														"nameLocation": "16654:4:12",
														"nodeType": "VariableDeclaration",
														"scope": 3335,
														"src": "16646:12:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 3169,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "16646:7:12",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3173,
												"initialValue": {
													"expression": {
														"id": 3171,
														"name": "prevOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3164,
														"src": "16661:13:12",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_TokenOwnership_$2177_memory_ptr",
															"typeString": "struct ERC721A.TokenOwnership memory"
														}
													},
													"id": 3172,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "16675:4:12",
													"memberName": "addr",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 2172,
													"src": "16661:18:12",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "16646:33:12"
											},
											{
												"condition": {
													"id": 3174,
													"name": "approvalCheck",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3159,
													"src": "16694:13:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3203,
												"nodeType": "IfStatement",
												"src": "16690:284:12",
												"trueBody": {
													"id": 3202,
													"nodeType": "Block",
													"src": "16709:265:12",
													"statements": [
														{
															"assignments": [
																3176
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 3176,
																	"mutability": "mutable",
																	"name": "isApprovedOrOwner",
																	"nameLocation": "16728:17:12",
																	"nodeType": "VariableDeclaration",
																	"scope": 3202,
																	"src": "16723:22:12",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"typeName": {
																		"id": 3175,
																		"name": "bool",
																		"nodeType": "ElementaryTypeName",
																		"src": "16723:4:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 3195,
															"initialValue": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 3193,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3186,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				"id": 3180,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"arguments": [],
																					"expression": {
																						"argumentTypes": [],
																						"id": 3177,
																						"name": "_msgSender",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 615,
																						"src": "16749:10:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																							"typeString": "function () view returns (address)"
																						}
																					},
																					"id": 3178,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "16749:12:12",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"id": 3179,
																					"name": "from",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3170,
																					"src": "16765:4:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"src": "16749:20:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "||",
																			"rightExpression": {
																				"arguments": [
																					{
																						"id": 3182,
																						"name": "from",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3170,
																						"src": "16806:4:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					{
																						"arguments": [],
																						"expression": {
																							"argumentTypes": [],
																							"id": 3183,
																							"name": "_msgSender",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 615,
																							"src": "16812:10:12",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																								"typeString": "function () view returns (address)"
																							}
																						},
																						"id": 3184,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"nameLocations": [],
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "16812:12:12",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						},
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					],
																					"id": 3181,
																					"name": "isApprovedForAll",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2676,
																					"src": "16789:16:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$",
																						"typeString": "function (address,address) view returns (bool)"
																					}
																				},
																				"id": 3185,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "16789:36:12",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "16749:76:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "||",
																		"rightExpression": {
																			"commonType": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			"id": 3192,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3188,
																						"name": "tokenId",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3157,
																						"src": "16857:7:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					],
																					"id": 3187,
																					"name": "getApproved",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2624,
																					"src": "16845:11:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																						"typeString": "function (uint256) view returns (address)"
																					}
																				},
																				"id": 3189,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "16845:20:12",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"arguments": [],
																				"expression": {
																					"argumentTypes": [],
																					"id": 3190,
																					"name": "_msgSender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 615,
																					"src": "16869:10:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																						"typeString": "function () view returns (address)"
																					}
																				},
																				"id": 3191,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "16869:12:12",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"src": "16845:36:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "16749:132:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 3194,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "16748:134:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "16723:159:12"
														},
														{
															"condition": {
																"id": 3197,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "!",
																"prefix": true,
																"src": "16901:18:12",
																"subExpression": {
																	"id": 3196,
																	"name": "isApprovedOrOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3176,
																	"src": "16902:17:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 3201,
															"nodeType": "IfStatement",
															"src": "16897:66:12",
															"trueBody": {
																"errorCall": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 3198,
																		"name": "TransferCallerNotOwnerNorApproved",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2147,
																		"src": "16928:33:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 3199,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "16928:35:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 3200,
																"nodeType": "RevertStatement",
																"src": "16921:42:12"
															}
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 3205,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3170,
															"src": "17006:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 3208,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "17020:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 3207,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "17012:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 3206,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "17012:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 3209,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "17012:10:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3210,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3157,
															"src": "17024:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 3211,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "17033:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 3204,
														"name": "_beforeTokenTransfers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3427,
														"src": "16984:21:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 3212,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16984:51:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3213,
												"nodeType": "ExpressionStatement",
												"src": "16984:51:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 3217,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "17114:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 3216,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "17106:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 3215,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "17106:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 3218,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "17106:10:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3219,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3157,
															"src": "17118:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 3220,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3170,
															"src": "17127:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 3214,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3359,
														"src": "17097:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$__$",
															"typeString": "function (address,uint256,address)"
														}
													},
													"id": 3221,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "17097:35:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3222,
												"nodeType": "ExpressionStatement",
												"src": "17097:35:12"
											},
											{
												"id": 3311,
												"nodeType": "UncheckedBlock",
												"src": "17398:1190:12",
												"statements": [
													{
														"assignments": [
															3225
														],
														"declarations": [
															{
																"constant": false,
																"id": 3225,
																"mutability": "mutable",
																"name": "addressData",
																"nameLocation": "17442:11:12",
																"nodeType": "VariableDeclaration",
																"scope": 3311,
																"src": "17422:31:12",
																"stateVariable": false,
																"storageLocation": "storage",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressData_$2186_storage_ptr",
																	"typeString": "struct ERC721A.AddressData"
																},
																"typeName": {
																	"id": 3224,
																	"nodeType": "UserDefinedTypeName",
																	"pathNode": {
																		"id": 3223,
																		"name": "AddressData",
																		"nameLocations": [
																			"17422:11:12"
																		],
																		"nodeType": "IdentifierPath",
																		"referencedDeclaration": 2186,
																		"src": "17422:11:12"
																	},
																	"referencedDeclaration": 2186,
																	"src": "17422:11:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_AddressData_$2186_storage_ptr",
																		"typeString": "struct ERC721A.AddressData"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3229,
														"initialValue": {
															"baseExpression": {
																"id": 3226,
																"name": "_addressData",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2204,
																"src": "17456:12:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$2186_storage_$",
																	"typeString": "mapping(address => struct ERC721A.AddressData storage ref)"
																}
															},
															"id": 3228,
															"indexExpression": {
																"id": 3227,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3170,
																"src": "17469:4:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "17456:18:12",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_AddressData_$2186_storage",
																"typeString": "struct ERC721A.AddressData storage ref"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "17422:52:12"
													},
													{
														"expression": {
															"id": 3234,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 3230,
																	"name": "addressData",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3225,
																	"src": "17488:11:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_AddressData_$2186_storage_ptr",
																		"typeString": "struct ERC721A.AddressData storage pointer"
																	}
																},
																"id": 3232,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberLocation": "17500:7:12",
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2179,
																"src": "17488:19:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "-=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 3233,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "17511:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "17488:24:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 3235,
														"nodeType": "ExpressionStatement",
														"src": "17488:24:12"
													},
													{
														"expression": {
															"id": 3240,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 3236,
																	"name": "addressData",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3225,
																	"src": "17526:11:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_AddressData_$2186_storage_ptr",
																		"typeString": "struct ERC721A.AddressData storage pointer"
																	}
																},
																"id": 3238,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberLocation": "17538:12:12",
																"memberName": "numberBurned",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2183,
																"src": "17526:24:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 3239,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "17554:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "17526:29:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 3241,
														"nodeType": "ExpressionStatement",
														"src": "17526:29:12"
													},
													{
														"assignments": [
															3244
														],
														"declarations": [
															{
																"constant": false,
																"id": 3244,
																"mutability": "mutable",
																"name": "currSlot",
																"nameLocation": "17674:8:12",
																"nodeType": "VariableDeclaration",
																"scope": 3311,
																"src": "17651:31:12",
																"stateVariable": false,
																"storageLocation": "storage",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_TokenOwnership_$2177_storage_ptr",
																	"typeString": "struct ERC721A.TokenOwnership"
																},
																"typeName": {
																	"id": 3243,
																	"nodeType": "UserDefinedTypeName",
																	"pathNode": {
																		"id": 3242,
																		"name": "TokenOwnership",
																		"nameLocations": [
																			"17651:14:12"
																		],
																		"nodeType": "IdentifierPath",
																		"referencedDeclaration": 2177,
																		"src": "17651:14:12"
																	},
																	"referencedDeclaration": 2177,
																	"src": "17651:14:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2177_storage_ptr",
																		"typeString": "struct ERC721A.TokenOwnership"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3248,
														"initialValue": {
															"baseExpression": {
																"id": 3245,
																"name": "_ownerships",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2199,
																"src": "17685:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$2177_storage_$",
																	"typeString": "mapping(uint256 => struct ERC721A.TokenOwnership storage ref)"
																}
															},
															"id": 3247,
															"indexExpression": {
																"id": 3246,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3157,
																"src": "17697:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "17685:20:12",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_TokenOwnership_$2177_storage",
																"typeString": "struct ERC721A.TokenOwnership storage ref"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "17651:54:12"
													},
													{
														"expression": {
															"id": 3253,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 3249,
																	"name": "currSlot",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3244,
																	"src": "17719:8:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2177_storage_ptr",
																		"typeString": "struct ERC721A.TokenOwnership storage pointer"
																	}
																},
																"id": 3251,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberLocation": "17728:4:12",
																"memberName": "addr",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2172,
																"src": "17719:13:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"id": 3252,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3170,
																"src": "17735:4:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "17719:20:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 3254,
														"nodeType": "ExpressionStatement",
														"src": "17719:20:12"
													},
													{
														"expression": {
															"id": 3263,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 3255,
																	"name": "currSlot",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3244,
																	"src": "17753:8:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2177_storage_ptr",
																		"typeString": "struct ERC721A.TokenOwnership storage pointer"
																	}
																},
																"id": 3257,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberLocation": "17762:14:12",
																"memberName": "startTimestamp",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2174,
																"src": "17753:23:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"arguments": [
																	{
																		"expression": {
																			"id": 3260,
																			"name": "block",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967292,
																			"src": "17786:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_block",
																				"typeString": "block"
																			}
																		},
																		"id": 3261,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "17792:9:12",
																		"memberName": "timestamp",
																		"nodeType": "MemberAccess",
																		"src": "17786:15:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 3259,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "17779:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 3258,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "17779:6:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 3262,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "17779:23:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"src": "17753:49:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 3264,
														"nodeType": "ExpressionStatement",
														"src": "17753:49:12"
													},
													{
														"expression": {
															"id": 3269,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 3265,
																	"name": "currSlot",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3244,
																	"src": "17816:8:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2177_storage_ptr",
																		"typeString": "struct ERC721A.TokenOwnership storage pointer"
																	}
																},
																"id": 3267,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberLocation": "17825:6:12",
																"memberName": "burned",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2176,
																"src": "17816:15:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"hexValue": "74727565",
																"id": 3268,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "17834:4:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"src": "17816:22:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3270,
														"nodeType": "ExpressionStatement",
														"src": "17816:22:12"
													},
													{
														"assignments": [
															3272
														],
														"declarations": [
															{
																"constant": false,
																"id": 3272,
																"mutability": "mutable",
																"name": "nextTokenId",
																"nameLocation": "18090:11:12",
																"nodeType": "VariableDeclaration",
																"scope": 3311,
																"src": "18082:19:12",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3271,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "18082:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3276,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3275,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3273,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3157,
																"src": "18104:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "31",
																"id": 3274,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "18114:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "18104:11:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "18082:33:12"
													},
													{
														"assignments": [
															3279
														],
														"declarations": [
															{
																"constant": false,
																"id": 3279,
																"mutability": "mutable",
																"name": "nextSlot",
																"nameLocation": "18152:8:12",
																"nodeType": "VariableDeclaration",
																"scope": 3311,
																"src": "18129:31:12",
																"stateVariable": false,
																"storageLocation": "storage",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_TokenOwnership_$2177_storage_ptr",
																	"typeString": "struct ERC721A.TokenOwnership"
																},
																"typeName": {
																	"id": 3278,
																	"nodeType": "UserDefinedTypeName",
																	"pathNode": {
																		"id": 3277,
																		"name": "TokenOwnership",
																		"nameLocations": [
																			"18129:14:12"
																		],
																		"nodeType": "IdentifierPath",
																		"referencedDeclaration": 2177,
																		"src": "18129:14:12"
																	},
																	"referencedDeclaration": 2177,
																	"src": "18129:14:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2177_storage_ptr",
																		"typeString": "struct ERC721A.TokenOwnership"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3283,
														"initialValue": {
															"baseExpression": {
																"id": 3280,
																"name": "_ownerships",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2199,
																"src": "18163:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$2177_storage_$",
																	"typeString": "mapping(uint256 => struct ERC721A.TokenOwnership storage ref)"
																}
															},
															"id": 3282,
															"indexExpression": {
																"id": 3281,
																"name": "nextTokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3272,
																"src": "18175:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "18163:24:12",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_TokenOwnership_$2177_storage",
																"typeString": "struct ERC721A.TokenOwnership storage ref"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "18129:58:12"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 3290,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 3284,
																	"name": "nextSlot",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3279,
																	"src": "18205:8:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2177_storage_ptr",
																		"typeString": "struct ERC721A.TokenOwnership storage pointer"
																	}
																},
																"id": 3285,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "18214:4:12",
																"memberName": "addr",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2172,
																"src": "18205:13:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 3288,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "18230:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 3287,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "18222:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 3286,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "18222:7:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 3289,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "18222:10:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "18205:27:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3310,
														"nodeType": "IfStatement",
														"src": "18201:377:12",
														"trueBody": {
															"id": 3309,
															"nodeType": "Block",
															"src": "18234:344:12",
															"statements": [
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 3293,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 3291,
																			"name": "nextTokenId",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3272,
																			"src": "18397:11:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "!=",
																		"rightExpression": {
																			"id": 3292,
																			"name": "_currentIndex",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2188,
																			"src": "18412:13:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "18397:28:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 3308,
																	"nodeType": "IfStatement",
																	"src": "18393:171:12",
																	"trueBody": {
																		"id": 3307,
																		"nodeType": "Block",
																		"src": "18427:137:12",
																		"statements": [
																			{
																				"expression": {
																					"id": 3298,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"expression": {
																							"id": 3294,
																							"name": "nextSlot",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 3279,
																							"src": "18449:8:12",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_TokenOwnership_$2177_storage_ptr",
																								"typeString": "struct ERC721A.TokenOwnership storage pointer"
																							}
																						},
																						"id": 3296,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": true,
																						"memberLocation": "18458:4:12",
																						"memberName": "addr",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 2172,
																						"src": "18449:13:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "=",
																					"rightHandSide": {
																						"id": 3297,
																						"name": "from",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3170,
																						"src": "18465:4:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"src": "18449:20:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"id": 3299,
																				"nodeType": "ExpressionStatement",
																				"src": "18449:20:12"
																			},
																			{
																				"expression": {
																					"id": 3305,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"expression": {
																							"id": 3300,
																							"name": "nextSlot",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 3279,
																							"src": "18491:8:12",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_TokenOwnership_$2177_storage_ptr",
																								"typeString": "struct ERC721A.TokenOwnership storage pointer"
																							}
																						},
																						"id": 3302,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": true,
																						"memberLocation": "18500:14:12",
																						"memberName": "startTimestamp",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 2174,
																						"src": "18491:23:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint64",
																							"typeString": "uint64"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "=",
																					"rightHandSide": {
																						"expression": {
																							"id": 3303,
																							"name": "prevOwnership",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 3164,
																							"src": "18517:13:12",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_TokenOwnership_$2177_memory_ptr",
																								"typeString": "struct ERC721A.TokenOwnership memory"
																							}
																						},
																						"id": 3304,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberLocation": "18531:14:12",
																						"memberName": "startTimestamp",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 2174,
																						"src": "18517:28:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint64",
																							"typeString": "uint64"
																						}
																					},
																					"src": "18491:54:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint64",
																						"typeString": "uint64"
																					}
																				},
																				"id": 3306,
																				"nodeType": "ExpressionStatement",
																				"src": "18491:54:12"
																			}
																		]
																	}
																}
															]
														}
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 3313,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3170,
															"src": "18612:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 3316,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "18626:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 3315,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "18618:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 3314,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "18618:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 3317,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "18618:10:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3318,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3157,
															"src": "18630:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3312,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 127,
														"src": "18603:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 3319,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "18603:35:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3320,
												"nodeType": "EmitStatement",
												"src": "18598:40:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 3322,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3170,
															"src": "18669:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 3325,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "18683:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 3324,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "18675:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 3323,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "18675:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 3326,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "18675:10:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3327,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3157,
															"src": "18687:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 3328,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "18696:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 3321,
														"name": "_afterTokenTransfers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3440,
														"src": "18648:20:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 3329,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "18648:50:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3330,
												"nodeType": "ExpressionStatement",
												"src": "18648:50:12"
											},
											{
												"id": 3334,
												"nodeType": "UncheckedBlock",
												"src": "18797:49:12",
												"statements": [
													{
														"expression": {
															"id": 3332,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "++",
															"prefix": false,
															"src": "18821:14:12",
															"subExpression": {
																"id": 3331,
																"name": "_burnCounter",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2190,
																"src": "18821:12:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3333,
														"nodeType": "ExpressionStatement",
														"src": "18821:14:12"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3155,
										"nodeType": "StructuredDocumentation",
										"src": "16286:206:12",
										"text": " @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."
									},
									"id": 3336,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "16506:5:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3160,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3157,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "16520:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 3336,
												"src": "16512:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3156,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16512:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3159,
												"mutability": "mutable",
												"name": "approvalCheck",
												"nameLocation": "16534:13:12",
												"nodeType": "VariableDeclaration",
												"scope": 3336,
												"src": "16529:18:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3158,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "16529:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16511:37:12"
									},
									"returnParameters": {
										"id": 3161,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16566:0:12"
									},
									"scope": 3441,
									"src": "16497:2355:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3358,
										"nodeType": "Block",
										"src": "19064:89:12",
										"statements": [
											{
												"expression": {
													"id": 3350,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 3346,
															"name": "_tokenApprovals",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2208,
															"src": "19074:15:12",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 3348,
														"indexExpression": {
															"id": 3347,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3341,
															"src": "19090:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "19074:24:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 3349,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3339,
														"src": "19101:2:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "19074:29:12",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 3351,
												"nodeType": "ExpressionStatement",
												"src": "19074:29:12"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 3353,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3343,
															"src": "19127:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3354,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3339,
															"src": "19134:2:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3355,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3341,
															"src": "19138:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3352,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 136,
														"src": "19118:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 3356,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "19118:28:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3357,
												"nodeType": "EmitStatement",
												"src": "19113:33:12"
											}
										]
									},
									"documentation": {
										"id": 3337,
										"nodeType": "StructuredDocumentation",
										"src": "18858:100:12",
										"text": " @dev Approve `to` to operate on `tokenId`\n Emits a {Approval} event."
									},
									"id": 3359,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "18972:8:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3344,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3339,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "18998:2:12",
												"nodeType": "VariableDeclaration",
												"scope": 3359,
												"src": "18990:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3338,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18990:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3341,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "19018:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 3359,
												"src": "19010:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3340,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "19010:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3343,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "19043:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 3359,
												"src": "19035:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3342,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "19035:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18980:74:12"
									},
									"returnParameters": {
										"id": 3345,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "19064:0:12"
									},
									"scope": 3441,
									"src": "18963:190:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3413,
										"nodeType": "Block",
										"src": "19799:486:12",
										"statements": [
											{
												"clauses": [
													{
														"block": {
															"id": 3394,
															"nodeType": "Block",
															"src": "19910:87:12",
															"statements": [
																{
																	"expression": {
																		"commonType": {
																			"typeIdentifier": "t_bytes4",
																			"typeString": "bytes4"
																		},
																		"id": 3392,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 3386,
																			"name": "retval",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3384,
																			"src": "19931:6:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"expression": {
																				"expression": {
																					"arguments": [
																						{
																							"id": 3388,
																							"name": "to",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 3364,
																							"src": "19957:2:12",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 3387,
																						"name": "IERC721Receiver",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 246,
																						"src": "19941:15:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_contract$_IERC721Receiver_$246_$",
																							"typeString": "type(contract IERC721Receiver)"
																						}
																					},
																					"id": 3389,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "19941:19:12",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC721Receiver_$246",
																						"typeString": "contract IERC721Receiver"
																					}
																				},
																				"id": 3390,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "19961:16:12",
																				"memberName": "onERC721Received",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 245,
																				"src": "19941:36:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$",
																					"typeString": "function (address,address,uint256,bytes memory) external returns (bytes4)"
																				}
																			},
																			"id": 3391,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "19978:8:12",
																			"memberName": "selector",
																			"nodeType": "MemberAccess",
																			"src": "19941:45:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			}
																		},
																		"src": "19931:55:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"functionReturnParameters": 3372,
																	"id": 3393,
																	"nodeType": "Return",
																	"src": "19924:62:12"
																}
															]
														},
														"errorName": "",
														"id": 3395,
														"nodeType": "TryCatchClause",
														"parameters": {
															"id": 3385,
															"nodeType": "ParameterList",
															"parameters": [
																{
																	"constant": false,
																	"id": 3384,
																	"mutability": "mutable",
																	"name": "retval",
																	"nameLocation": "19902:6:12",
																	"nodeType": "VariableDeclaration",
																	"scope": 3395,
																	"src": "19895:13:12",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	"typeName": {
																		"id": 3383,
																		"name": "bytes4",
																		"nodeType": "ElementaryTypeName",
																		"src": "19895:6:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes4",
																			"typeString": "bytes4"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"src": "19894:15:12"
														},
														"src": "19886:111:12"
													},
													{
														"block": {
															"id": 3410,
															"nodeType": "Block",
															"src": "20026:253:12",
															"statements": [
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 3402,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"id": 3399,
																				"name": "reason",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3397,
																				"src": "20044:6:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"id": 3400,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "20051:6:12",
																			"memberName": "length",
																			"nodeType": "MemberAccess",
																			"src": "20044:13:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 3401,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "20061:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "20044:18:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"falseBody": {
																		"id": 3408,
																		"nodeType": "Block",
																		"src": "20150:119:12",
																		"statements": [
																			{
																				"AST": {
																					"nodeType": "YulBlock",
																					"src": "20177:78:12",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"kind": "number",
																												"nodeType": "YulLiteral",
																												"src": "20210:2:12",
																												"type": "",
																												"value": "32"
																											},
																											{
																												"name": "reason",
																												"nodeType": "YulIdentifier",
																												"src": "20214:6:12"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nodeType": "YulIdentifier",
																											"src": "20206:3:12"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "20206:15:12"
																									},
																									{
																										"arguments": [
																											{
																												"name": "reason",
																												"nodeType": "YulIdentifier",
																												"src": "20229:6:12"
																											}
																										],
																										"functionName": {
																											"name": "mload",
																											"nodeType": "YulIdentifier",
																											"src": "20223:5:12"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "20223:13:12"
																									}
																								],
																								"functionName": {
																									"name": "revert",
																									"nodeType": "YulIdentifier",
																									"src": "20199:6:12"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "20199:38:12"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "20199:38:12"
																						}
																					]
																				},
																				"evmVersion": "paris",
																				"externalReferences": [
																					{
																						"declaration": 3397,
																						"isOffset": false,
																						"isSlot": false,
																						"src": "20214:6:12",
																						"valueSize": 1
																					},
																					{
																						"declaration": 3397,
																						"isOffset": false,
																						"isSlot": false,
																						"src": "20229:6:12",
																						"valueSize": 1
																					}
																				],
																				"id": 3407,
																				"nodeType": "InlineAssembly",
																				"src": "20168:87:12"
																			}
																		]
																	},
																	"id": 3409,
																	"nodeType": "IfStatement",
																	"src": "20040:229:12",
																	"trueBody": {
																		"id": 3406,
																		"nodeType": "Block",
																		"src": "20064:80:12",
																		"statements": [
																			{
																				"errorCall": {
																					"arguments": [],
																					"expression": {
																						"argumentTypes": [],
																						"id": 3403,
																						"name": "TransferToNonERC721ReceiverImplementer",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2151,
																						"src": "20089:38:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_error_pure$__$returns$__$",
																							"typeString": "function () pure"
																						}
																					},
																					"id": 3404,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "20089:40:12",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_tuple$__$",
																						"typeString": "tuple()"
																					}
																				},
																				"id": 3405,
																				"nodeType": "RevertStatement",
																				"src": "20082:47:12"
																			}
																		]
																	}
																}
															]
														},
														"errorName": "",
														"id": 3411,
														"nodeType": "TryCatchClause",
														"parameters": {
															"id": 3398,
															"nodeType": "ParameterList",
															"parameters": [
																{
																	"constant": false,
																	"id": 3397,
																	"mutability": "mutable",
																	"name": "reason",
																	"nameLocation": "20018:6:12",
																	"nodeType": "VariableDeclaration",
																	"scope": 3411,
																	"src": "20005:19:12",
																	"stateVariable": false,
																	"storageLocation": "memory",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes"
																	},
																	"typeName": {
																		"id": 3396,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "20005:5:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_storage_ptr",
																			"typeString": "bytes"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"src": "20004:21:12"
														},
														"src": "19998:281:12"
													}
												],
												"externalCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 3377,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 615,
																"src": "19850:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 3378,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "19850:12:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3379,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3362,
															"src": "19864:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3380,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3366,
															"src": "19870:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 3381,
															"name": "_data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3368,
															"src": "19879:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 3374,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3364,
																	"src": "19829:2:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 3373,
																"name": "IERC721Receiver",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 246,
																"src": "19813:15:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC721Receiver_$246_$",
																	"typeString": "type(contract IERC721Receiver)"
																}
															},
															"id": 3375,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "19813:19:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC721Receiver_$246",
																"typeString": "contract IERC721Receiver"
															}
														},
														"id": 3376,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "19833:16:12",
														"memberName": "onERC721Received",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 245,
														"src": "19813:36:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$",
															"typeString": "function (address,address,uint256,bytes memory) external returns (bytes4)"
														}
													},
													"id": 3382,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "19813:72:12",
													"tryCall": true,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"id": 3412,
												"nodeType": "TryStatement",
												"src": "19809:470:12"
											}
										]
									},
									"documentation": {
										"id": 3360,
										"nodeType": "StructuredDocumentation",
										"src": "19159:470:12",
										"text": " @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param _data bytes optional data to send along with the call\n @return bool whether the call correctly returned the expected magic value"
									},
									"id": 3414,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkContractOnERC721Received",
									"nameLocation": "19643:30:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3369,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3362,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "19691:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 3414,
												"src": "19683:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3361,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "19683:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3364,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "19713:2:12",
												"nodeType": "VariableDeclaration",
												"scope": 3414,
												"src": "19705:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3363,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "19705:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3366,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "19733:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 3414,
												"src": "19725:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3365,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "19725:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3368,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "19763:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 3414,
												"src": "19750:18:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3367,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "19750:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "19673:101:12"
									},
									"returnParameters": {
										"id": 3372,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3371,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3414,
												"src": "19793:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3370,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "19793:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "19792:6:12"
									},
									"scope": 3441,
									"src": "19634:651:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3426,
										"nodeType": "Block",
										"src": "21068:2:12",
										"statements": []
									},
									"documentation": {
										"id": 3415,
										"nodeType": "StructuredDocumentation",
										"src": "20291:620:12",
										"text": " @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\n And also called before burning one token.\n startTokenId - the first token id to be transferred\n quantity - the amount to be transferred\n Calling conditions:\n - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n transferred to `to`.\n - When `from` is zero, `tokenId` will be minted for `to`.\n - When `to` is zero, `tokenId` will be burned by `from`.\n - `from` and `to` are never both zero."
									},
									"id": 3427,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfers",
									"nameLocation": "20925:21:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3424,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3417,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "20964:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 3427,
												"src": "20956:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3416,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "20956:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3419,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "20986:2:12",
												"nodeType": "VariableDeclaration",
												"scope": 3427,
												"src": "20978:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3418,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "20978:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3421,
												"mutability": "mutable",
												"name": "startTokenId",
												"nameLocation": "21006:12:12",
												"nodeType": "VariableDeclaration",
												"scope": 3427,
												"src": "20998:20:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3420,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "20998:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3423,
												"mutability": "mutable",
												"name": "quantity",
												"nameLocation": "21036:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 3427,
												"src": "21028:16:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3422,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "21028:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "20946:104:12"
									},
									"returnParameters": {
										"id": 3425,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "21068:0:12"
									},
									"scope": 3441,
									"src": "20916:154:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3439,
										"nodeType": "Block",
										"src": "21862:2:12",
										"statements": []
									},
									"documentation": {
										"id": 3428,
										"nodeType": "StructuredDocumentation",
										"src": "21076:630:12",
										"text": " @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\n minting.\n And also called after one token has been burned.\n startTokenId - the first token id to be transferred\n quantity - the amount to be transferred\n Calling conditions:\n - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n transferred to `to`.\n - When `from` is zero, `tokenId` has been minted for `to`.\n - When `to` is zero, `tokenId` has been burned by `from`.\n - `from` and `to` are never both zero."
									},
									"id": 3440,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterTokenTransfers",
									"nameLocation": "21720:20:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3437,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3430,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "21758:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 3440,
												"src": "21750:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3429,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "21750:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3432,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "21780:2:12",
												"nodeType": "VariableDeclaration",
												"scope": 3440,
												"src": "21772:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3431,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "21772:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3434,
												"mutability": "mutable",
												"name": "startTokenId",
												"nameLocation": "21800:12:12",
												"nodeType": "VariableDeclaration",
												"scope": 3440,
												"src": "21792:20:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3433,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "21792:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3436,
												"mutability": "mutable",
												"name": "quantity",
												"nameLocation": "21830:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 3440,
												"src": "21822:16:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3435,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "21822:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21740:104:12"
									},
									"returnParameters": {
										"id": 3438,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "21862:0:12"
									},
									"scope": 3441,
									"src": "21711:153:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 3442,
							"src": "1515:20351:12",
							"usedErrors": [
								2131,
								2133,
								2135,
								2137,
								2139,
								2145,
								2147,
								2149,
								2151,
								2153,
								2155
							]
						}
					],
					"src": "107:21760:12"
				},
				"id": 12
			},
			"https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/IERC721R.sol": {
				"ast": {
					"absolutePath": "https://github.com/exo-digital-labs/ERC721R/blob/main/contracts/IERC721R.sol",
					"exportedSymbols": {
						"IERC165": [
							890
						],
						"IERC721": [
							228
						],
						"IERC721R": [
							3480
						]
					},
					"id": 3481,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3443,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "62:23:13"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"id": 3444,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3481,
							"sourceUnit": 891,
							"src": "87:65:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"id": 3445,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3481,
							"sourceUnit": 229,
							"src": "153:58:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 3447,
										"name": "IERC165",
										"nameLocations": [
											"273:7:13"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 890,
										"src": "273:7:13"
									},
									"id": 3448,
									"nodeType": "InheritanceSpecifier",
									"src": "273:7:13"
								},
								{
									"baseName": {
										"id": 3449,
										"name": "IERC721",
										"nameLocations": [
											"282:7:13"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 228,
										"src": "282:7:13"
									},
									"id": 3450,
									"nodeType": "InheritanceSpecifier",
									"src": "282:7:13"
								}
							],
							"canonicalName": "IERC721R",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 3446,
								"nodeType": "StructuredDocumentation",
								"src": "213:38:13",
								"text": "@notice Refundable EIP-721 tokens"
							},
							"fullyImplemented": false,
							"id": 3480,
							"linearizedBaseContracts": [
								3480,
								228,
								890
							],
							"name": "IERC721R",
							"nameLocation": "261:8:13",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 3451,
										"nodeType": "StructuredDocumentation",
										"src": "296:219:13",
										"text": "@notice           Emitted when a token is refunded\n @dev              Emitted by `refund`\n @param  _sender   The person that requested a refund\n @param  _tokenId  The `tokenId` that was refunded"
									},
									"eventSelector": "bb28353e4598c3b9199101a66e0989549b659a59a54d2c27fbb183f1932c8e6d",
									"id": 3457,
									"name": "Refund",
									"nameLocation": "526:6:13",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3456,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3453,
												"indexed": true,
												"mutability": "mutable",
												"name": "_sender",
												"nameLocation": "558:7:13",
												"nodeType": "VariableDeclaration",
												"scope": 3457,
												"src": "542:23:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3452,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "542:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3455,
												"indexed": true,
												"mutability": "mutable",
												"name": "_tokenId",
												"nameLocation": "591:8:13",
												"nodeType": "VariableDeclaration",
												"scope": 3457,
												"src": "575:24:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3454,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "575:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "532:73:13"
									},
									"src": "520:86:13"
								},
								{
									"documentation": {
										"id": 3458,
										"nodeType": "StructuredDocumentation",
										"src": "612:259:13",
										"text": "@notice         As long as the refund is active for the given `tokenId`, refunds the user\n @dev            Make sure to check that the user has the token, and be aware of potential re-entrancy vectors\n @param  tokenId The `tokenId` to refund"
									},
									"functionSelector": "278ecde1",
									"id": 3463,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "refund",
									"nameLocation": "885:6:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3461,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3460,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "900:7:13",
												"nodeType": "VariableDeclaration",
												"scope": 3463,
												"src": "892:15:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3459,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "892:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "891:17:13"
									},
									"returnParameters": {
										"id": 3462,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "917:0:13"
									},
									"scope": 3480,
									"src": "876:42:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3464,
										"nodeType": "StructuredDocumentation",
										"src": "924:190:13",
										"text": "@notice         Gets the refund price of the specific `tokenId`\n @param  tokenId The `tokenId` to query\n @return _wei    The amount of ether (in wei) that would be refunded"
									},
									"functionSelector": "81a49174",
									"id": 3471,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "refundOf",
									"nameLocation": "1128:8:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3467,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3466,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1145:7:13",
												"nodeType": "VariableDeclaration",
												"scope": 3471,
												"src": "1137:15:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3465,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1137:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1136:17:13"
									},
									"returnParameters": {
										"id": 3470,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3469,
												"mutability": "mutable",
												"name": "_wei",
												"nameLocation": "1185:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 3471,
												"src": "1177:12:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3468,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1177:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1176:14:13"
									},
									"scope": 3480,
									"src": "1119:72:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3472,
										"nodeType": "StructuredDocumentation",
										"src": "1198:221:13",
										"text": "@notice         Gets the first block for which the refund is not active for a given `tokenId`\n @param  tokenId The `tokenId` to query\n @return _block   The block beyond which the token cannot be refunded"
									},
									"functionSelector": "4f556016",
									"id": 3479,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "refundDeadlineOf",
									"nameLocation": "1433:16:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3475,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3474,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1458:7:13",
												"nodeType": "VariableDeclaration",
												"scope": 3479,
												"src": "1450:15:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3473,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1450:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1449:17:13"
									},
									"returnParameters": {
										"id": 3478,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3477,
												"mutability": "mutable",
												"name": "_block",
												"nameLocation": "1498:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 3479,
												"src": "1490:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3476,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1490:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1489:16:13"
									},
									"scope": 3480,
									"src": "1424:82:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 3481,
							"src": "251:1257:13",
							"usedErrors": []
						}
					],
					"src": "62:1447:13"
				},
				"id": 13
			}
		}
	}
}